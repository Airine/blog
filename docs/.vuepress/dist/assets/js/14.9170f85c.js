(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{194:function(t,r,e){t.exports=e.p+"assets/img/2019-12-23-00-39-40.b71c6992.png"},245:function(t,r,e){"use strict";e.r(r);var a=e(0),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"树和图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和图","aria-hidden":"true"}},[t._v("#")]),t._v(" 树和图")]),t._v(" "),a("h2",{attrs:{id:"理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论","aria-hidden":"true"}},[t._v("#")]),t._v(" 理论")]),t._v(" "),a("p",[t._v("链表是特殊的树(后继节点可以多个)，树是特殊的图(可以乱指)。")]),t._v(" "),a("p",[t._v("二叉搜索树(binary search tree)：有序二叉树、排序二叉树，是指一棵空树或具有下列性质的二叉树：")]),t._v(" "),a("ol",[a("li",[t._v("左子树上所有节点的值都小于它的根节点的值。")]),t._v(" "),a("li",[t._v("右子树上所有节点的值都大于它的根节点的指。")]),t._v(" "),a("li",[t._v("recursively，坐、右子树也分别为二叉搜索树。")])]),t._v(" "),a("p",[t._v("时间复杂度是O(logN)，最差是O(n)，比如只有右子节点，就是一个链表了。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(194),alt:""}})])])}),[],!1,null,null,null);r.default=s.exports}}]);