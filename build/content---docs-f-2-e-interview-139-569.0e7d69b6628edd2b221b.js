(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{293:function(e,t,l){"use strict";l.d(t,"a",function(){return c}),l.d(t,"b",function(){return m});var a=l(0),b=l.n(a),n=b.a.createContext({}),i=function(e){var t=b.a.useContext(n),l=t;return e&&(l="function"==typeof e?e(t):Object.assign({},t,e)),l},c=function(e){var t=i(e.components);return b.a.createElement(n.Provider,{value:t},e.children)};var r="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},u=function(e){var t=e.components,l=e.mdxType,a=e.originalType,n=e.parentName,c=function(e,t){var l={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(l[a]=e[a]);return l}(e,["components","mdxType","originalType","parentName"]),r=i(t),u=l,m=r[n+"."+u]||r[u]||p[u]||a;return t?b.a.createElement(m,Object.assign({},c,{components:t})):b.a.createElement(m,c)};function m(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=l.length,i=new Array(n);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[r]="string"==typeof e?e:a,i[1]=c;for(var m=2;m<n;m++)i[m]=l[m];return b.a.createElement.apply(null,i)}return b.a.createElement.apply(null,l)}u.displayName="MDXCreateElement"},83:function(e,t,l){"use strict";l.r(t),l.d(t,"frontMatter",function(){return i}),l.d(t,"rightToc",function(){return c}),l.d(t,"default",function(){return u});l(0);var a=l(293);function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e}).apply(this,arguments)}function n(e,t){if(null==e)return{};var l,a,b=function(e,t){if(null==e)return{};var l,a,b={},n=Object.keys(e);for(a=0;a<n.length;a++)l=n[a],t.indexOf(l)>=0||(b[l]=e[l]);return b}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)l=n[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(b[l]=e[l])}return b}var i={title:"壹题面试题解答"},c=[{value:"39. 介绍下 BFC 及其应用?",id:"39-介绍下-bfc-及其应用",children:[]},{value:"52. 怎么让一个 div 水平垂直居中",id:"52-怎么让一个-div-水平垂直居中",children:[]},{value:"57. 三种透明方案的分析比较",id:"57-三种透明方案的分析比较",children:[]},{value:"60. 覆盖 import 让图片宽度 300px",id:"60-覆盖-import-让图片宽度-300px",children:[]},{value:"68.如何解决移动端 1px 像素问题？",id:"68如何解决移动端-1px-像素问题？",children:[]},{value:"73.介绍下 BFC、IFC、GFC 和 FFC?",id:"73介绍下-bfc、ifc、gfc-和-ffc",children:[]},{value:"koa2",id:"koa2",children:[]},{value:"pm2",id:"pm2",children:[]},{value:"网络",id:"网络",children:[{value:"get和post有什么区别",id:"get和post有什么区别",children:[]},{value:"网络的五层模型",id:"网络的五层模型",children:[]},{value:"HTTP和HTTPS的区别",id:"http和https的区别",children:[]},{value:"HTTPS的加密过程",id:"https的加密过程",children:[]}]},{value:"从输入URL到页面加载全过程",id:"从输入url到页面加载全过程",children:[]},{value:"linux",id:"linux",children:[]},{value:"js",id:"js",children:[]},{value:"事件",id:"事件",children:[]},{value:"性能优化",id:"性能优化",children:[]},{value:"异步",id:"异步",children:[]},{value:"算法",id:"算法",children:[]},{value:"跨域",id:"跨域",children:[]},{value:"小程序",id:"小程序",children:[]},{value:"设计模式",id:"设计模式",children:[]},{value:"内存泄露",id:"内存泄露",children:[]},{value:"项目",id:"项目",children:[]},{value:"webpack",id:"webpack",children:[{value:"webpack 打包流程和生命周期",id:"webpack-打包流程和生命周期",children:[]}]},{value:"vue",id:"vue",children:[]},{value:"react",id:"react",children:[]},{value:"redux",id:"redux",children:[]},{value:"css",id:"css",children:[{value:"介绍flex布局",id:"介绍flex布局",children:[]},{value:"介绍css3中position:sticky",id:"介绍css3中positionsticky",children:[]},{value:"清除浮动",id:"清除浮动",children:[]}]},{value:"浏览器",id:"浏览器",children:[{value:"居中为什么要使用transform（为什么不使用marginLeft/Top）",id:"居中为什么要使用transform（为什么不使用marginlefttop）",children:[]}]},{value:"安全",id:"安全",children:[{value:"项目中如何处理安全问题",id:"项目中如何处理安全问题",children:[]},{value:"介绍css，xsrf",id:"介绍css，xsrf",children:[]},{value:"xsrf跨域攻击的安全性问题怎么防范",id:"xsrf跨域攻击的安全性问题怎么防范",children:[]},{value:"对安全有什么了解",id:"对安全有什么了解",children:[]},{value:"介绍下数字签名的原理",id:"介绍下数字签名的原理",children:[]}]},{value:"ajax",id:"ajax",children:[]},{value:"cookie session",id:"cookie-session",children:[]},{value:"300.前端怎么做单元测试",id:"300前端怎么做单元测试",children:[]},{value:"html",id:"html",children:[]},{value:"防抖",id:"防抖",children:[]},{value:"虚拟DOM",id:"虚拟dom",children:[]},{value:"rn",id:"rn",children:[]},{value:"进程和线程",id:"进程和线程",children:[]},{value:"node",id:"node",children:[]},{value:"npm2和npm3+有什么区别",id:"npm2和npm3有什么区别",children:[]},{value:"react",id:"react-1",children:[]}],r={rightToc:c},p="wrapper";function u(e){var t=e.components,l=n(e,["components"]);return Object(a.b)(p,b({},r,l,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"回答壹题项目面试题。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"面试题地址：",Object(a.b)("a",b({parentName:"li"},{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question"}),"https://github.com/Advanced-Frontend/Daily-Interview-Question"))),Object(a.b)("h2",{id:"39-介绍下-bfc-及其应用"},"39. 介绍下 BFC 及其应用?"),Object(a.b)("p",null,"BFC 是块级格式化上下文。正常流的排版分为3种情况："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"遇到行级元素，归入行级格式化上下文。行级元素是从左往右边排列(根据文字方向)，如果排不下，会新起一行盒，行盒是块级，归入块级格式化上下文。"),Object(a.b)("li",{parentName:"ul"},"遇到块级元素，归入块级格式化上下文。块级元素是独占一行，从上往下排列。"),Object(a.b)("li",{parentName:"ul"},"遇到 float 元素，顶部与当前行级格式化上下文对齐，左右边缘根据浮动左右与块级格式化上下文对齐。")),Object(a.b)("p",null,"行内盒子上下 margin 失效\n特点是：\n1. 块级格式化上下文包含其内的所有元素，包括浮动盒子，所以会计算高度。\n2. BFC 里的元素上下 margin 会重叠。这个可以理解为 margin 是盒子之间的最小距离\n3. BFC 内的元素会一个个从上往下放置。"),Object(a.b)("p",null,"新建 BFC 的方式：\n1. 浮动元素\n2. 绝对定位元素 poa pof\n3. 非块级，但是能包含块的容器，如 inline-block，table-cell，table-captions\n4. 块级元素设置 overflow: 非 visible，如 auto\n5. 弹性盒子，网格元素"),Object(a.b)("p",null,"应用场景："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"清除浮动"),Object(a.b)("li",{parentName:"ul"},"margin 重叠")),Object(a.b)("h2",{id:"52-怎么让一个-div-水平垂直居中"},"52. 怎么让一个 div 水平垂直居中"),Object(a.b)("p",null,"基础布局"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-html"}),"<div class='parent'>\n    <div class=\"child\"></div>\n</div>\n\n.parent {\n    outline: solid 1px red;\n    width: 200px;\n    height: 200px;\n}\n\n.child {\n    width: 50px;\n    height: 50px;\n    background: blue;\n}\n")),Object(a.b)("p",null,"布局方式如下："),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"flex 布局")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-css"}),"// 1\n.parent{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n// 2\n.parent{\n    display: flex;\n}\n.child{\n    margin: auto\n}\n")),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"grid 布局")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-css"}),".parent{\n    display: grid\n}\n.child{\n    align-self: center;\n    justify-self: center;\n}\n\n// 2 \n.child{\n    margin: auto\n}\n")),Object(a.b)("ol",{start:3},Object(a.b)("li",{parentName:"ol"},"absolute")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-css"}),".parent{\n    position: relative\n}\n\n// 1\n.child{\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:atuo;\n}\n\n// 2\n.child{\n    position:absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%)\n}\n\n// 3\n.child{\n    position:absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -25px;\n    margin-top: -25px;\n}\n")),Object(a.b)("ol",{start:4},Object(a.b)("li",{parentName:"ol"},"table-cell")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-css"}),".parent{\n    display: tabel-cell;\n    text-align: center;\n    vertical-align: middle\n}\n.child{\n    display: inline-block\n}\n\n// 如果只要文字居中，可以\n.parent{\n    display: table\n}\n.child{\n    display: table-cell;\n    vertical-align: middle;\n    text-algin: center;\n}\n")),Object(a.b)("h2",{id:"57-三种透明方案的分析比较"},"57. 三种透明方案的分析比较"),Object(a.b)("p",null,"分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。"),Object(a.b)("p",null,"结构上： display:none 不会进 render tree，不占空间，opacity:0 占据空间，只是内容不可见，可点击，visibility:hidden，占据空间，内容不可见。"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",b({parentName:"tr"},{align:null}),"属性"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"显示时"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"占位"),Object(a.b)("th",b({parentName:"tr"},{align:null}),"子元素"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"display:none")),Object(a.b)("td",b({parentName:"tr"},{align:null}),"重排"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"不占"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"无法显示")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"visibility:hidden")),Object(a.b)("td",b({parentName:"tr"},{align:null}),"重绘"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"占"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"visiblility:visible可显示")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",b({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"opacity:0")),Object(a.b)("td",b({parentName:"tr"},{align:null}),"重绘，重建图层，性能消耗少"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"占"),Object(a.b)("td",b({parentName:"tr"},{align:null}),"无法显示")))),Object(a.b)("p",null,"问：用 CSS 隐藏页面上的一个元素有哪几种方法？"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"设置 fixed 并设置足够大负距离的 left top 使其“隐藏”；"),Object(a.b)("li",{parentName:"ul"},"用层叠关系 z-index 把元素叠在最底下使其“隐藏”；"),Object(a.b)("li",{parentName:"ul"},"用 text-indent:-9999px 使其文字隐藏。")),Object(a.b)("h2",{id:"60-覆盖-import-让图片宽度-300px"},"60. 覆盖 import 让图片宽度 300px"),Object(a.b)("p",null,"已知如下代码，让图片宽度 300px。"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-html"}),'<img src="1.jpg" style="width:480px!important;" />\n')),Object(a.b)("p",null,"方法如下："),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-html"}),'// 1\n<img src="http://resource.muyiy.cn/image/winter.jpg" style="width:300px!important" style="width:480px!important;"  />\n\n// 2\nimg{\n    transform: scale(0.625)\n}\n\n// 3\nimg{\n    max-width: 300px;\n}\n\n// 4\nimg{\n    box-sizing: border-box;\n    padding: 0 90px;\n}\n\n// 5. 动画样式优先级高于 important\nimg {\n    animation: test 0s forwards;\n}\n@keyframes test {\n    from {\n        width: 300px;\n    }\n    to {\n        width: 300px;\n    }\n}\n\n// 6.zoom CSS 属性会根据 @viewport 来初始化一个缩放因数。\nimg {\n    zoom: 0.625;\n}\n')),Object(a.b)("h2",{id:"68如何解决移动端-1px-像素问题？"},"68.如何解决移动端 1px 像素问题？"),Object(a.b)("h2",{id:"73介绍下-bfc、ifc、gfc-和-ffc"},"73.介绍下 BFC、IFC、GFC 和 FFC?"),Object(a.b)("h2",{id:"koa2"},"koa2"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍koa2"),Object(a.b)("li",{parentName:"ul"},"使用过的koa2中间件"),Object(a.b)("li",{parentName:"ul"},"koa2中间件原理"),Object(a.b)("li",{parentName:"ul"},"koa-body原理"),Object(a.b)("li",{parentName:"ul"},"介绍自己写过的中间件"),Object(a.b)("li",{parentName:"ul"},"koa原理，为什么要用koa(express和koa对比)"),Object(a.b)("li",{parentName:"ul"},"使用的koa中间件"),Object(a.b)("li",{parentName:"ul"},"koa中response.send、response.rounded、response.json发生了什么事，浏览器为什么能识别到它是一个json结构或是html"),Object(a.b)("li",{parentName:"ul"},"koa-bodyparser怎么来解析request")),Object(a.b)("h2",{id:"pm2"},"pm2"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍pm2"),Object(a.b)("li",{parentName:"ul"},"master挂了的话pm2怎么处理"),Object(a.b)("li",{parentName:"ul"},"pm2怎么做进程管理，进程挂掉怎么处理"),Object(a.b)("li",{parentName:"ul"},"不用pm2怎么做进程管理")),Object(a.b)("h2",{id:"网络"},"网络"),Object(a.b)("h3",{id:"get和post有什么区别"},"get和post有什么区别"),Object(a.b)("h3",{id:"网络的五层模型"},"网络的五层模型"),Object(a.b)("h3",{id:"http和https的区别"},"HTTP和HTTPS的区别"),Object(a.b)("h3",{id:"https的加密过程"},"HTTPS的加密过程"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍SSL和TLS"),Object(a.b)("li",{parentName:"ul"},"介绍DNS解析"),Object(a.b)("li",{parentName:"ul"},"常见Http请求头"),Object(a.b)("li",{parentName:"ul"},"通过什么做到并发请求"),Object(a.b)("li",{parentName:"ul"},"介绍http2.0"),Object(a.b)("li",{parentName:"ul"},"http1.1时如何复用tcp连接"),Object(a.b)("li",{parentName:"ul"},"Http报文的请求会有几个部分"),Object(a.b)("li",{parentName:"ul"},"tcp3次握手"),Object(a.b)("li",{parentName:"ul"},"tcp属于哪一层（1 物理层 -> 2 数据链路层 -> 3 网络层(ip)-> 4 传输层(tcp) -> 5 应用层(http)）"),Object(a.b)("li",{parentName:"ul"},"http缓存控制"),Object(a.b)("li",{parentName:"ul"},"介绍下HTTP状态码"),Object(a.b)("li",{parentName:"ul"},"403、301、302是什么"),Object(a.b)("li",{parentName:"ul"},"缓存相关的HTTP请求头"),Object(a.b)("li",{parentName:"ul"},"介绍HTTPS"),Object(a.b)("li",{parentName:"ul"},"HTTPS怎么建立安全通道")),Object(a.b)("h2",{id:"从输入url到页面加载全过程"},"从输入URL到页面加载全过程"),Object(a.b)("h2",{id:"linux"},"linux"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Linux 754 介绍")),Object(a.b)("h2",{id:"js"},"js"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍暂时性死区")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"[1, 2, 3, 4, 5]","变成","[1, 2, 3, a, b, 5]")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"取数组的最大值（ES5、ES6）")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"ES5和ES6有什么区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS是什么范式语言(面向对象还是函数式编程)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍class和ES5的类以及区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍箭头函数和普通函数的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍defineProperty方法，什么时候需要用到")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"for..in 和 object.keys的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍闭包，使用场景")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"使用闭包特权函数的使用场景")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍ES6的功能")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"let、const以及var的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"浅拷贝和深拷贝的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍箭头函数的this")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"对闭包的理解")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"工程中闭包使用场景")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍this和原型")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"使用原型最大的好处")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍localstorage的API")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"如何处理异常捕获")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"项目如何管理模块")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS继承方案")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"如何判断一个变量是不是数组")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"变量a和b，如何交换")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"多个标签生成的Dom结构是一个类数组")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"类数组和数组的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"dom的类数组如何转成数组")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍闭包")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"闭包的核心是什么")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS的继承方法")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"cookie的引用为了解决什么问题")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"cookie和localStorage的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"使用canvas绘图时如何组织成通用组件")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"formData和原生的ajax有什么区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍下表单提交，和formData有什么关系")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"怎么实现this对象的深拷贝")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍this各种情况")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"== 和 ===的区别，什么情况下用相等==")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"bind、call、apply的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"ES6中的map和原生的对象有什么区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍下原型链（解决的是继承问题吗）")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"sum(2, 3)实现sum(2)(3)的效果")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"两个对象如何比较")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS的原型")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"变量作用域链")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"call、apply、bind的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"防抖和节流的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"ES6新的特性")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"说一下闭包")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"prototype和——proto——区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"_construct是什么")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"new是怎么实现的")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"localStorage和cookie有什么区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍原型链")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"如何继承")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍JS数据类型，基本数据类型和引用数据类型的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Array是Object类型吗")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"数据类型分别存在哪里")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},'var a = {name: "前端开发"}; var b = a; a = null那么b输出什么')),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"var a = {b: 1} 存放在哪里")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"var a = {b: {c: 1}}存放在哪里")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"栈和堆的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"垃圾回收时栈和堆的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"栈和堆具体怎么存储")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"介绍闭包以及闭包为什么没清除")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"闭包的使用场景")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS执行过程中分为哪些阶段")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"词法作用域和this的区别")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"平常是怎么做继承")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"深拷贝和浅拷贝")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"loadsh深拷贝实现原理")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"ES6中let块作用域是怎么实现的")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"JS变量类型分为几种，区别是什么")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"手写数组去重函数")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"手写数组扁平化函数")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"对闭包的看法，为什么要用闭包")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"前端怎么控制管理路由")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"使用路由时出现问题如何解决")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"柯里化函数两端的参数具体是什么东西")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"随机值存在一样的情况，如何避免?\n加时间戳"))),Object(a.b)("h2",{id:"事件"},"事件"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"浏览器事件流向"),Object(a.b)("li",{parentName:"ul"},"事件委托"),Object(a.b)("li",{parentName:"ul"},"介绍事件代理以及优缺点"),Object(a.b)("li",{parentName:"ul"},"some、every、find、filter、map、forEach有什么区别"),Object(a.b)("li",{parentName:"ul"},"上述数组随机取数，每次返回的值都不一样"),Object(a.b)("li",{parentName:"ul"},"如何找0-5的随机数，95-99呢"),Object(a.b)("li",{parentName:"ul"},"页面上有1万个button如何绑定事件"),Object(a.b)("li",{parentName:"ul"},"如何判断是button"),Object(a.b)("li",{parentName:"ul"},"页面上生成一万个button，并且绑定事件，如何做（JS原生操作DOM）"),Object(a.b)("li",{parentName:"ul"},"循环绑定时的index是多少，为什么，怎么解决"),Object(a.b)("li",{parentName:"ul"},"页面上有一个input，还有一个p标签，改变input后p标签就跟着变化，如何处理"),Object(a.b)("li",{parentName:"ul"},"监听input的哪个事件，在什么时候触发"),Object(a.b)("li",{parentName:"ul"},"React的事件机制（绑定一个事件到一个组件上）"),Object(a.b)("li",{parentName:"ul"},"介绍下事件代理，主要解决什么问题")),Object(a.b)("h2",{id:"性能优化"},"性能优化"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"前端性能优化"),Object(a.b)("li",{parentName:"ul"},"304是什么"),Object(a.b)("li",{parentName:"ul"},"整个前端性能提升大致分几类"),Object(a.b)("li",{parentName:"ul"},"用户体验做过什么优化"),Object(a.b)("li",{parentName:"ul"},"前端性能优化（JS原生和React）"),Object(a.b)("li",{parentName:"ul"},"前端性能优化（1js css；2 图片；3 缓存预加载； 4 SSR； 5 多域名加载；6 负载均衡）"),Object(a.b)("li",{parentName:"ul"},"并发请求资源数上限（6个）"),Object(a.b)("li",{parentName:"ul"},"base64为什么能提升性能，缺点"),Object(a.b)("li",{parentName:"ul"},"介绍webp这个图片文件格式"),Object(a.b)("li",{parentName:"ul"},"介绍service worker")),Object(a.b)("h2",{id:"异步"},"异步"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍异步方案"),Object(a.b)("li",{parentName:"ul"},"Promise 和 async/await 和 callback的区别"),Object(a.b)("li",{parentName:"ul"},"Promise有没有解决异步的问题（promise链是真正强大的地方）"),Object(a.b)("li",{parentName:"ul"},"Promise和setTimeout的区别（Event Loop）"),Object(a.b)("li",{parentName:"ul"},"介绍Promise和then"),Object(a.b)("li",{parentName:"ul"},"promise、async有什么区别"),Object(a.b)("li",{parentName:"ul"},"介绍Promise，异常捕获"),Object(a.b)("li",{parentName:"ul"},"介绍下Promise，内部实现"),Object(a.b)("li",{parentName:"ul"},"如何设计Promise.all()"),Object(a.b)("li",{parentName:"ul"},"使用Async会注意哪些东西"),Object(a.b)("li",{parentName:"ul"},"Async里面有多个await请求，可以怎么优化（请求是否有依赖）"),Object(a.b)("li",{parentName:"ul"},"Promise和Async处理失败的时候有什么区别"),Object(a.b)("li",{parentName:"ul"},"介绍下Promise的用途和性质"),Object(a.b)("li",{parentName:"ul"},"Promise和Callback有什么区别"),Object(a.b)("li",{parentName:"ul"},"介绍Promise"),Object(a.b)("li",{parentName:"ul"},"Promise有几个状态"),Object(a.b)("li",{parentName:"ul"},"promise的精髓，以及优缺点"),Object(a.b)("li",{parentName:"ul"},"JS怎么实现异步"),Object(a.b)("li",{parentName:"ul"},"异步整个执行周期"),Object(a.b)("li",{parentName:"ul"},"Async/Await怎么实现"),Object(a.b)("li",{parentName:"ul"},"Promise和setTimeout执行先后的区别"),Object(a.b)("li",{parentName:"ul"},"JS为什么要区分微任务和宏任务"),Object(a.b)("li",{parentName:"ul"},"Promise构造函数是同步还是异步执行，then呢"),Object(a.b)("li",{parentName:"ul"},"Promise.all实现原理"),Object(a.b)("li",{parentName:"ul"},"介绍Promise的特性，优缺点"),Object(a.b)("li",{parentName:"ul"},"promise如何实现then处理"),Object(a.b)("li",{parentName:"ul"},"promise里面和then里面执行有什么区别"),Object(a.b)("li",{parentName:"ul"},"setInterval需要注意的点"),Object(a.b)("li",{parentName:"ul"},"定时器为什么是不精确的"),Object(a.b)("li",{parentName:"ul"},"setTimeout(1)和setTimeout(2)之间的区别"),Object(a.b)("li",{parentName:"ul"},"介绍宏任务和微任务"),Object(a.b)("li",{parentName:"ul"},"JS异步解决方案的发展历程以及优缺点"),Object(a.b)("li",{parentName:"ul"},"对async、await的理解，内部原理")),Object(a.b)("h2",{id:"算法"},"算法"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍冒泡排序，选择排序，冒泡排序如何优化"),Object(a.b)("li",{parentName:"ul"},"介绍快速排序"),Object(a.b)("li",{parentName:"ul"},"算法：前K个最大的元素"),Object(a.b)("li",{parentName:"ul"},"项目中树的使用场景以及了解"),Object(a.b)("li",{parentName:"ul"},"介绍排序算法和快排原理"),Object(a.b)("li",{parentName:"ul"},"如何判断链表是否有环"),Object(a.b)("li",{parentName:"ul"},"介绍二叉搜索树的特点"),Object(a.b)("li",{parentName:"ul"},"项目中如何应用数据结构"),Object(a.b)("li",{parentName:"ul"},"介绍下DFS深度优先")),Object(a.b)("h2",{id:"跨域"},"跨域"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍下浏览器跨域"),Object(a.b)("li",{parentName:"ul"},"怎么去解决跨域问题"),Object(a.b)("li",{parentName:"ul"},"jsonp方案需要服务端怎么配合"),Object(a.b)("li",{parentName:"ul"},"Ajax发生跨域要设置什么（前端）"),Object(a.b)("li",{parentName:"ul"},"加上CORS之后从发起到请求正式成功的过程"),Object(a.b)("li",{parentName:"ul"},"跨域怎么解决，有没有使用过Apache等方案"),Object(a.b)("li",{parentName:"ul"},"Access-Control-Allow-Origin在服务端哪里配置"),Object(a.b)("li",{parentName:"ul"},"csrf跨站攻击怎么解决"),Object(a.b)("li",{parentName:"ul"},"ajax如何处理跨域"),Object(a.b)("li",{parentName:"ul"},"CORS如何设置"),Object(a.b)("li",{parentName:"ul"},"介绍同源策略"),Object(a.b)("li",{parentName:"ul"},"jsonp为什么不支持post方法")),Object(a.b)("h2",{id:"小程序"},"小程序"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"小程序里面开页面最多多少  < 10  做了限制")),Object(a.b)("h2",{id:"设计模式"},"设计模式"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍下观察者模式"),Object(a.b)("li",{parentName:"ul"},"观察者和发布订阅的区别，各自用在哪里"),Object(a.b)("li",{parentName:"ul"},"观察者模式里面使用的数据结构(不具备顺序 ，是一个list)"),Object(a.b)("li",{parentName:"ul"},"单例、工厂、观察者项目中实际场景"),Object(a.b)("li",{parentName:"ul"},"介绍中介者模式"),Object(a.b)("li",{parentName:"ul"},"前端开发中用到哪些设计模式"),Object(a.b)("li",{parentName:"ul"},"React/Redux中哪些功能用到了哪些设计模式")),Object(a.b)("h2",{id:"内存泄露"},"内存泄露"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍垃圾回收"),Object(a.b)("li",{parentName:"ul"},"添加原生事件不移除为什么会内存泄露"),Object(a.b)("li",{parentName:"ul"},"还有哪些地方会内存泄露"),Object(a.b)("li",{parentName:"ul"},"JS里垃圾回收机制是什么，常用的是哪种，怎么处理的")),Object(a.b)("h2",{id:"项目"},"项目"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"遇到的复杂业务场景  火车票里的三种状态"),Object(a.b)("li",{parentName:"ul"},"什么是单页项目"),Object(a.b)("li",{parentName:"ul"},"使用过程中遇到的问题，如何解决的"),Object(a.b)("li",{parentName:"ul"},"网站SEO怎么处理"),Object(a.b)("li",{parentName:"ul"},"服务端怎么做统一的状态处理"),Object(a.b)("li",{parentName:"ul"},"介绍单页面应用和多页面应用"),Object(a.b)("li",{parentName:"ul"},"介绍MVP怎么组织"),Object(a.b)("li",{parentName:"ul"},"对PWA有什么了解")),Object(a.b)("h2",{id:"webpack"},"webpack"),Object(a.b)("h3",{id:"webpack-打包流程和生命周期"},"webpack 打包流程和生命周期"),Object(a.b)("p",null,"打包过程：\n1. 初始化 option， entry-option\n1. 开始编译  run"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-js"}),"// Compiler.js  经过改造，只为了让流程清晰\nclass Compiler{\n    newCompilation(){\n        const compilation = new Compilation(this)\n        this.hooks.compilation.call()\n    }\n    compile(callback){\n        this.hooks.beforeCompile.callAsync(()=>{\n            this.hooks.compile.call()\n            const compilation = this.newCompilation()\n            this.hooks.make.callAsync(compilation, ()=>{\n                compilation.finish(()=>{\n                    compilation.seal(()=>{\n                        this.hooks.afterCompile.callAsync(compilation, ()=>{\n                            return callback(null, compilation)\n                        })\n                    })\n                })\n            })\n        })\n    }\n    run(){\n        const onCompiled = ()=>{\n            this.hooks.shouldEmit.call()\n            this.emitAssets(compilation, ()=>{\n                this.hooks.done.callAsync(()=>{\n                    this.hooks.additionalPass.callAsync(()=>{\n                        this.compile(onCompiled)\n                    })\n                })\n            })\n        }\n        this.hooks.beforeRun.callAsync(()=>{\n            this.hooks.run.callAsync(()=>{\n                this.compile(onCompiled)\n            })\n        })\n    }\n}\n")),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"make:  从 entry 开始递归的分析依赖，对每个依赖模块进行 build"),Object(a.b)("li",{parentName:"ol"},"before-resolve: 对模块位置进行解析"),Object(a.b)("li",{parentName:"ol"},"build-module: 使用 loader 加载文件并开始构建某个模块"),Object(a.b)("li",{parentName:"ol"},"normal-module-loader: 对 loader 加载对文件用 acron 编译，生成 AST 树"),Object(a.b)("li",{parentName:"ol"},"program: 遍历 AST，当遇到 require 等一些调用表达式时，收集依赖"),Object(a.b)("li",{parentName:"ol"},"seal: 所有依赖 build 完成，开始优化（抽取公共模块，加 hash）"),Object(a.b)("li",{parentName:"ol"},"emit: 输出到 dist 目录")),Object(a.b)("p",null,"生命周期"),Object(a.b)("p",null,"compiler hooks 流程相关"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"(before-)run"),Object(a.b)("li",{parentName:"ul"},"(before-/after-)compile"),Object(a.b)("li",{parentName:"ul"},"make"),Object(a.b)("li",{parentName:"ul"},"(after-)emit"),Object(a.b)("li",{parentName:"ul"},"done")),Object(a.b)("p",null,"监听相关"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"watch-run"),Object(a.b)("li",{parentName:"ul"},"watch-close")),Object(a.b)("p",null,"compilation hooks\ncompiler 也会调用 compilation 生命周期方法\naddEntry -> addModuleChain\nfinish 模块错误上报\nseal 构建完后资源的生成和优化"),Object(a.b)("p",null,"ModuleFactory会创建\nNormalModuleFactory\nContextModuleFactory"),Object(a.b)("p",null,"Module 下有五种\nNormalModule  普通模块\n- 使用loader-runner 运行 loaders\n- 通过 Parser 解析，内部是 acron，解析出 require 依赖\n- ParserPlugins 添加依赖\nContextModule ./src/a 带路径的\nExternalModule  module.exports = jQuery\nDelegatedModule  manifest\nMultiModule      entry:","['a','b']"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"使用 webpack 构建时有无做一些自定义操作? ")),Object(a.b)("p",null,"之前将 vue-cli 的单页配置改为多页配置。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"webpack里面的插件是怎么实现的?")),Object(a.b)("p",null,"插件机制是通过 tapable 实现的，它类似 node 里的 EventEmitter。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"抽取公共文件是怎么配置的?")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-js"}),"optimization:{\n    splitChunks: {\n        cacheGroups: {\n            commons: {\n                name: 'commons',\n                chunks: 'all',\n                minChunks: 2\n            }\n        }\n    }\n}\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"import { Button } from 'antd'")," ，打包的时候只打包button，分模块加载，是怎么做到的")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"loader 和 plugin 有什么区别"))),Object(a.b)("p",null,"loader 主要是加载资源，转换资源。plugin 主要是扩展 webpack 功能，更强大。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍AST（Abstract Syntax Tree）抽象语法树")),Object(a.b)("p",null,"AST 抽象语法树是对源代码的一种抽象。将源代码抽象成树状结构，像 babel，场景的 ast 库有 babylon。之前模仿过一个四则运算的解析器。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"使用过webpack里面哪些 plugin 和 loader ?")),Object(a.b)("p",null,"HtmlWebpackPlugin\nCleanWebpackPlugin\nTerserWebpackPlguin\nDllPlugin\nCommonsChunkPlugin\nSplitChunksPlugin\nHotModuleReplacementPlugin\nMiniCssExtractPlugin\nUglifyjsWebpackPlugin"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"一般怎么组织CSS（Webpack）")),Object(a.b)("p",null,"专门建一个 css 目录，通过",Object(a.b)("inlineCode",{parentName:"p"},"import"),"入口文件，通用样式放在入口文件中，按照模块添加样式文件，组件内文件放在 .vue 文件中。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"webpack和gulp的优缺点")),Object(a.b)("p",null,"gulp 是基于任务的，可以自动化完成一些任务，但是它没有解决模块化和打包的问题。\nwebpack 目的就是打包，支持各种模块化开发。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"webpack 配 sass 需要哪些 loader?")),Object(a.b)("p",null,"css-loader、less-loader、style-loader(或者 MiniCssExtractPlugin 将 css 提取出来)"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"如何配置把js、css、html单独打包成一个文件。")),Object(a.b)("p",null,"html 通过 HtmlWebpackPlugin 生成。css 通过 style-loader 或 html-inline-css-webpack-plugin 插件，可以嵌入到 html 中。\n可以使用 raw-loader 在 html 模版里嵌入 html 和 js 文件。"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{}),"<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}<\/script>\n")),Object(a.b)("h2",{id:"vue"},"vue"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"虚拟DOM主要做了什么"),Object(a.b)("li",{parentName:"ul"},"虚拟DOM本身是什么（JS对象）")),Object(a.b)("h2",{id:"react"},"react"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"React声明周期及自己的理解"),Object(a.b)("li",{parentName:"ul"},"如何配置React-Router"),Object(a.b)("li",{parentName:"ul"},"服务端渲染SSR"),Object(a.b)("li",{parentName:"ul"},"介绍路由的history"),Object(a.b)("li",{parentName:"ul"},"介绍react优化"),Object(a.b)("li",{parentName:"ul"},"redux请求中间件如何处理并发")),Object(a.b)("h2",{id:"redux"},"redux"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍Redux数据流的流程")),Object(a.b)("h2",{id:"css"},"css"),Object(a.b)("h3",{id:"介绍flex布局"},"介绍flex布局"),Object(a.b)("h3",{id:"介绍css3中positionsticky"},"介绍css3中position:sticky"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍position属性包括CSS3新增")),Object(a.b)("h3",{id:"清除浮动"},"清除浮动"),Object(a.b)("h2",{id:"浏览器"},"浏览器"),Object(a.b)("h3",{id:"居中为什么要使用transform（为什么不使用marginlefttop）"},"居中为什么要使用transform（为什么不使用marginLeft/Top）"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"定位问题（绝对定位、相对定位等）"),Object(a.b)("li",{parentName:"ul"},"transform动画和直接使用left、top改变位置有什么优缺点"),Object(a.b)("li",{parentName:"ul"},"动画的了解"),Object(a.b)("li",{parentName:"ul"},"CSS选择器有哪些"),Object(a.b)("li",{parentName:"ul"},"盒子模型，以及标准情况和IE下的区别"),Object(a.b)("li",{parentName:"ul"},"如何实现高度自适应"),Object(a.b)("li",{parentName:"ul"},"如何实现H5手机端的适配"),Object(a.b)("li",{parentName:"ul"},"rem、flex的区别（root em）"),Object(a.b)("li",{parentName:"ul"},"em和px的区别"),Object(a.b)("li",{parentName:"ul"},"两个元素块，一左一右，中间相距10像素"),Object(a.b)("li",{parentName:"ul"},"上下固定，中间滚动布局如何实现")),Object(a.b)("h2",{id:"安全"},"安全"),Object(a.b)("h3",{id:"项目中如何处理安全问题"},"项目中如何处理安全问题"),Object(a.b)("h3",{id:"介绍css，xsrf"},"介绍css，xsrf"),Object(a.b)("h3",{id:"xsrf跨域攻击的安全性问题怎么防范"},"xsrf跨域攻击的安全性问题怎么防范"),Object(a.b)("h3",{id:"对安全有什么了解"},"对安全有什么了解"),Object(a.b)("h3",{id:"介绍下数字签名的原理"},"介绍下数字签名的原理"),Object(a.b)("h2",{id:"ajax"},"ajax"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"文件上传如何做断点续传"),Object(a.b)("li",{parentName:"ul"},"表单可以跨域吗"),Object(a.b)("li",{parentName:"ul"},"异步请求，低版本fetch如何低版本适配"),Object(a.b)("li",{parentName:"ul"},"前端和后端怎么联调")),Object(a.b)("h2",{id:"cookie-session"},"cookie session"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"cookie放哪里，cookie能做的事情和存在的价值"),Object(a.b)("li",{parentName:"ul"},"cookie和token都存放在header里面，为什么只劫持前者"),Object(a.b)("li",{parentName:"ul"},"cookie和session有哪些方面的区别")),Object(a.b)("h2",{id:"300前端怎么做单元测试"},"300.前端怎么做单元测试"),Object(a.b)("h2",{id:"html"},"html"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"html语义化的理解"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<b>"),"和",Object(a.b)("inlineCode",{parentName:"li"},"<strong>"),"的区别")),Object(a.b)("h2",{id:"防抖"},"防抖"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"搜索请求如何处理（防抖）")),Object(a.b)("h2",{id:"虚拟dom"},"虚拟DOM"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"介绍虚拟DOM"),Object(a.b)("li",{parentName:"ul"},"为什么虚拟DOM比真实DOM性能好"),Object(a.b)("li",{parentName:"ul"},"渲染的时候key给什么值，可以使用index吗，用id好还是index好")),Object(a.b)("h2",{id:"rn"},"rn"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"RN有没有做热加载"),Object(a.b)("li",{parentName:"ul"},"RN遇到的兼容性问题"),Object(a.b)("li",{parentName:"ul"},"RN如何实现一个原生的组件"),Object(a.b)("li",{parentName:"ul"},"RN混原生和原生混RN有什么不同"),Object(a.b)("li",{parentName:"ul"},"RN的原理，为什么可以同时在安卓和IOS端运行"),Object(a.b)("li",{parentName:"ul"},"RN如何调用原生的一些功能"),Object(a.b)("li",{parentName:"ul"},"介绍RN的缺点"),Object(a.b)("li",{parentName:"ul"},"RN和原生通信"),Object(a.b)("li",{parentName:"ul"},"如何做RN在安卓和IOS端的适配"),Object(a.b)("li",{parentName:"ul"},"RN为什么能在原生中绘制成原生组件（bundle.js）"),Object(a.b)("li",{parentName:"ul"},"native提供了什么能力给RN"),Object(a.b)("li",{parentName:"ul"},"安卓Activity之间数据是怎么传递的"),Object(a.b)("li",{parentName:"ul"},"安卓4.0到6.0过程中WebView对js兼容性的变化"),Object(a.b)("li",{parentName:"ul"},"WebView和原生是如何通信")),Object(a.b)("h2",{id:"进程和线程"},"进程和线程"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"进程和线程的区别（一个node实例就是一个进程，node是单线程，通过事件循环来实现异步）")),Object(a.b)("h2",{id:"node"},"node"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"node接口转发有无做什么优化"),Object(a.b)("li",{parentName:"ul"},"node起服务如何保证稳定性，平缓降级，重启等"),Object(a.b)("li",{parentName:"ul"},"node文件查找优先级")),Object(a.b)("h2",{id:"npm2和npm3有什么区别"},"npm2和npm3+有什么区别"),Object(a.b)("h2",{id:"react-1"},"react"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"有没有涉及到Cluster"),Object(a.b)("li",{parentName:"ul"},"如何和MySQL进行通信"),Object(a.b)("li",{parentName:"ul"},"路由的动态加载模块"),Object(a.b)("li",{parentName:"ul"},"Redux如何实现多个组件之间的通信，多个组件使用相同状态如何进行管理"),Object(a.b)("li",{parentName:"ul"},"多个组件之间如何拆分各自的state，每块小的组件有自己的状态，它们之间还有一些公共的状态需要维护，如何思考这块"),Object(a.b)("li",{parentName:"ul"},"使用过的Redux中间件"),Object(a.b)("li",{parentName:"ul"},"介绍redux，主要解决什么问题"),Object(a.b)("li",{parentName:"ul"},"搜索请求中文如何请求"),Object(a.b)("li",{parentName:"ul"},"React组件中怎么做事件代理"),Object(a.b)("li",{parentName:"ul"},"React组件事件代理的原理"),Object(a.b)("li",{parentName:"ul"},"React怎么做数据的检查和变化"),Object(a.b)("li",{parentName:"ul"},"react-router怎么实现路由切换"),Object(a.b)("li",{parentName:"ul"},"react-router里的",Object(a.b)("inlineCode",{parentName:"li"},"<Link>"),"标签和",Object(a.b)("inlineCode",{parentName:"li"},"<a>"),"标签有什么区别"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<a>"),"标签默认事件禁掉之后做了什么才实现了跳转"),Object(a.b)("li",{parentName:"ul"},"React层面的性能优化"),Object(a.b)("li",{parentName:"ul"},"React中Dom结构发生变化后内部经历了哪些变化"),Object(a.b)("li",{parentName:"ul"},"React挂载的时候有3个组件，textComponent、composeComponent、domComponent，区别和关系，Dom结构发生变化时怎么区分data的变化，- 怎么更新，更新怎么调度，如果更新的时候还有其他任务存在怎么处理"),Object(a.b)("li",{parentName:"ul"},"key主要是解决哪一类的问题，为什么不建议用索引index（重绘）"),Object(a.b)("li",{parentName:"ul"},"Redux中异步的请求怎么处理"),Object(a.b)("li",{parentName:"ul"},"Redux中间件是什么东西，接受几个参数（两端的柯里化函数）"),Object(a.b)("li",{parentName:"ul"},"中间件是怎么拿到store和action，然后怎么处理"),Object(a.b)("li",{parentName:"ul"},"state是怎么注入到组件的，从reducer到组件经历了什么样的过程"),Object(a.b)("li",{parentName:"ul"},"redux的设计思想"),Object(a.b)("li",{parentName:"ul"},"接入redux的过程"),Object(a.b)("li",{parentName:"ul"},"绑定connect的过程"),Object(a.b)("li",{parentName:"ul"},"connect原理"),Object(a.b)("li",{parentName:"ul"},"react异步渲染的概念,介绍Time Slicing 和 Suspense"),Object(a.b)("li",{parentName:"ul"},"16.X声明周期的改变"),Object(a.b)("li",{parentName:"ul"},"16.X中props改变后在哪个生命周期中处理"),Object(a.b)("li",{parentName:"ul"},"介绍纯函数"),Object(a.b)("li",{parentName:"ul"},"pureComponent和FunctionComponent区别"),Object(a.b)("li",{parentName:"ul"},"介绍JSX"),Object(a.b)("li",{parentName:"ul"},"如何设计一个localStorage，保证数据的实效性"),Object(a.b)("li",{parentName:"ul"},"介绍高阶组件"),Object(a.b)("li",{parentName:"ul"},"react性能优化"),Object(a.b)("li",{parentName:"ul"},"react生命周期"),Object(a.b)("li",{parentName:"ul"},"介绍Fiber"),Object(a.b)("li",{parentName:"ul"},"介绍DOM树对比"),Object(a.b)("li",{parentName:"ul"},"react中的key的作用"),Object(a.b)("li",{parentName:"ul"},"如何设计状态树"),Object(a.b)("li",{parentName:"ul"},"shouldComponentUpdate是为了解决什么问题"),Object(a.b)("li",{parentName:"ul"},"如何解决props层级过深的问题"),Object(a.b)("li",{parentName:"ul"},"Redux在状态管理方面解决了React本身不能解决的问题"),Object(a.b)("li",{parentName:"ul"},"Redux有没有做过封装"),Object(a.b)("li",{parentName:"ul"},"react生命周期，常用的生命周期"),Object(a.b)("li",{parentName:"ul"},"对应的生命周期做什么事"),Object(a.b)("li",{parentName:"ul"},"遇到性能问题一般在哪个生命周期里解决"),Object(a.b)("li",{parentName:"ul"},"怎么做性能优化（异步加载组件...）"),Object(a.b)("li",{parentName:"ul"},"写react有哪些细节可以优化"),Object(a.b)("li",{parentName:"ul"},"React子父组件之间如何传值"),Object(a.b)("li",{parentName:"ul"},"Emit事件怎么发，需要引入什么"),Object(a.b)("li",{parentName:"ul"},"介绍下React高阶组件，和普通组件有什么区别"),Object(a.b)("li",{parentName:"ul"},"一个对象数组，每个子对象包含一个id和name，React如何渲染出全部的name"),Object(a.b)("li",{parentName:"ul"},"其中有几个 name 不存在，通过异步接口获取，如何做"),Object(a.b)("li",{parentName:"ul"},"对React看法，有没有遇到一些坑"),Object(a.b)("li",{parentName:"ul"},"React生命周期"),Object(a.b)("li",{parentName:"ul"},"componentWillReceiveProps的触发条件是什么"),Object(a.b)("li",{parentName:"ul"},"React16.3对生命周期的改变"),Object(a.b)("li",{parentName:"ul"},"介绍下React的Filber架构"),Object(a.b)("li",{parentName:"ul"},"画 Filber 渲染树"),Object(a.b)("li",{parentName:"ul"},"介绍React高阶组件"),Object(a.b)("li",{parentName:"ul"},"父子组件之间如何通信"),Object(a.b)("li",{parentName:"ul"},"Redux怎么实现属性传递，介绍下原理"),Object(a.b)("li",{parentName:"ul"},"React-Router版本号"),Object(a.b)("li",{parentName:"ul"},"前后端通信使用什么方案"),Object(a.b)("li",{parentName:"ul"},"RESTful 常用的 Method"),Object(a.b)("li",{parentName:"ul"},"React声明周期"),Object(a.b)("li",{parentName:"ul"},"如何去除url中的#号"),Object(a.b)("li",{parentName:"ul"},"Redux状态管理器和变量挂载到window中有什么区别"),Object(a.b)("li",{parentName:"ul"},"如何实现异步加载"),Object(a.b)("li",{parentName:"ul"},"如何实现分模块打包（多入口）"),Object(a.b)("li",{parentName:"ul"},"React使用过的一些组件"),Object(a.b)("li",{parentName:"ul"},"介绍 Immuable"),Object(a.b)("li",{parentName:"ul"},"介绍下redux整个流程原理"),Object(a.b)("li",{parentName:"ul"},"React中setState后发生了什么"),Object(a.b)("li",{parentName:"ul"},"setState为什么默认是异步"),Object(a.b)("li",{parentName:"ul"},"setState什么时候是同步的"),Object(a.b)("li",{parentName:"ul"},"为什么3大框架出现以后就出现很多native（RN）框架（虚拟DOM）"),Object(a.b)("li",{parentName:"ul"},"a，b两个按钮，点击aba，返回顺序可能是baa，如何保证是aba（Promise.then）"),Object(a.b)("li",{parentName:"ul"},"介绍Redux"),Object(a.b)("li",{parentName:"ul"},"堆和栈的区别"),Object(a.b)("li",{parentName:"ul"},"介绍redux接入流程"),Object(a.b)("li",{parentName:"ul"},"rudux和全局管理有什么区别（数据可控、数据响应）"),Object(a.b)("li",{parentName:"ul"},"常用的中间件"),Object(a.b)("li",{parentName:"ul"},"如何对相对路径引用进行优化"),Object(a.b)("li",{parentName:"ul"},"knex连接数据库响应回调"),Object(a.b)("li",{parentName:"ul"},"redux状态树的管理"),Object(a.b)("li",{parentName:"ul"},"react设计思路"),Object(a.b)("li",{parentName:"ul"},"react常见的通信方式"),Object(a.b)("li",{parentName:"ul"},"redux整体的工作流程"),Object(a.b)("li",{parentName:"ul"},"redux和全局对象之间的区别"),Object(a.b)("li",{parentName:"ul"},"Redux数据回溯设计思路"),Object(a.b)("li",{parentName:"ul"},"react生命周期"),Object(a.b)("li",{parentName:"ul"},"react性能优化"),Object(a.b)("li",{parentName:"ul"},"介绍pureComponet"),Object(a.b)("li",{parentName:"ul"},"介绍Function Component"),Object(a.b)("li",{parentName:"ul"},"React数据流"),Object(a.b)("li",{parentName:"ul"},"props和state的区别"),Object(a.b)("li",{parentName:"ul"},"介绍react context"),Object(a.b)("li",{parentName:"ul"},"React15/16.x的区别"),Object(a.b)("li",{parentName:"ul"},"重新渲染render会做些什么"),Object(a.b)("li",{parentName:"ul"},"哪些方法会触发react重新渲染"),Object(a.b)("li",{parentName:"ul"},"state和props触发更新的生命周期分别有什么区别"),Object(a.b)("li",{parentName:"ul"},"setState是同步还是异步"),Object(a.b)("li",{parentName:"ul"},"对无状态组件的理解"),Object(a.b)("li",{parentName:"ul"},"介绍Redux工作流程"),Object(a.b)("li",{parentName:"ul"},"对react看法，它的优缺点"),Object(a.b)("li",{parentName:"ul"},"react的理念是什么（拿函数式编程来做页面渲染）")))}u.isMDXComponent=!0}}]);