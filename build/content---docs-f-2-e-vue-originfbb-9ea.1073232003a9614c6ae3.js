(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{207:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return o}),t.d(n,"rightToc",function(){return i}),t.d(n,"default",function(){return b});t(0);var r=t(217);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o={title:"vue 原理分析",sidebar_label:"原理分析"},i=[{value:"响应式原理",id:"响应式原理",children:[{value:"defineProperty",id:"defineproperty",children:[]},{value:"Proxy",id:"proxy",children:[]}]}],p={rightToc:i},c="wrapper";function b(e){var n=e.components,t=l(e,["components"]);return Object(r.b)(c,a({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",null,Object(r.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"响应式原理"})),Object(r.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#响应式原理"}),"#"),"响应式原理"),Object(r.b)("h3",null,Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"defineproperty"})),Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#defineproperty"}),"#"),"defineProperty"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Object.defineProperty(obj, property, 描述符对象)"),"用来定义对象的属性描述符。属性描述符分为数据描述符、存取描述符。"),Object(r.b)("p",null,"数据描述符："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"configurable"),": 为 false 时，属性描述符不能被改变，属性不能被删除，默认值为 false。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enumerable"),": 属性是否可以枚举，默认值为 false。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"value"),": 属性的值，默认为 undefined。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"writable"),": 属性值是否可修改，默认为 false。")),Object(r.b)("p",null,"存取描述符："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"configurable"),": 为 false 时，属性描述符不能被改变，属性不能被删除，默认值为 false。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enumerable"),": 属性是否可以枚举，默认值为 false。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"get()"),": 读取属性时，会执行这个函数。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"set()"),": 设置属性值时，会执行这个函数。")),Object(r.b)("p",null,"属性描述符只能是两者之一，不能同时交叉使用，比如不能同时设置存取描述符 get() 和 数据描述符 value。"),Object(r.b)("p",null,"通过",Object(r.b)("inlineCode",{parentName:"p"},"defineProperty()"),"方法，可以监听在读取属性或设置属性值时，做一些自定义事情。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"let o = {\n    name: 'zs',\n    child: {\n        name: 'lisi'\n    }\n}\n\nfunction watch(obj, property, func){\n  var value = obj[property]\n  Object.defineProperty(obj, property, {\n    get(){\n      return value\n    },\n    set(newValue){\n      value = newValue\n      func(value)\n    }\n  })\n\n  // 第一次时，触发一次 setter，即触发一次 func\n  if(value) obj[property] = value\n}\n\nwatch(o, 'name', function(val){\n  console.log('o name changed to:', val)\n})\n")),Object(r.b)("p",null,"上面代码，可以监听",Object(r.b)("inlineCode",{parentName:"p"},"o.name"),"属性的变化，但是",Object(r.b)("inlineCode",{parentName:"p"},"o.child.name"),"修改时，不会执行",Object(r.b)("inlineCode",{parentName:"p"},"setter"),"方法，需要递归进行处理。"),Object(r.b)("h3",null,Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"proxy"})),Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#proxy"}),"#"),"Proxy"),Object(r.b)("p",null,"使用",Object(r.b)("inlineCode",{parentName:"p"},"defineProperty()"),"方法只能监听属性的读取、设置。ES6 新增了 Proxy，用来代理对象，它相当于是个拦截器，在操作原对象时，会被它拦截，它可以拦截 13 种操作。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"let o = {\n    name: 'zs',\n    child: {\n        name: 'lisi'\n    }\n}\n\nlet handler = {\n    get(target, property) {\n        if (typeof target[property] === 'object' && target[property] !== null) {\n            return new Proxy(target[property], handler)\n        }\n        return Reflect.get(target, property)\n    },\n    set(target, property, value) {\n        console.log('设置了属性:', value)\n        target[property] = value\n    }\n}\n\nlet n = new Proxy(o, handler)\n\nn.child.name = 'ww'\nconsole.log(o)\n")),Object(r.b)("p",null,"上面代码，通过 new Proxy 可以很方便的给对象 o 深层的对象也添加监听。"))}b.isMDXComponent=!0},217:function(e,n,t){"use strict";t.d(n,"a",function(){return i}),t.d(n,"b",function(){return u});var r=t(0),a=t.n(r),l=a.a.createContext({}),o=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=o(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){return a.a.createElement(a.a.Fragment,{},e.children)}},b=function(e){var n=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=o(n);return a.a.createElement(p[l+"."+t]||p[t]||c[t]||r,n?Object.assign({},i,{components:n}):i)};function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=b;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);