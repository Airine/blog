(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{251:function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return p});var r=n(0),l=n.n(r),c=l.a.createContext({}),b=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},a=function(e){var t=b(e.components);return l.a.createElement(c.Provider,{value:t},e.children)};var i="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},o=function(e){var t=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),i=b(t),o=n,p=i[c+"."+o]||i[o]||u[o]||r;return t?l.a.createElement(p,Object.assign({},a,{components:t})):l.a.createElement(p,a)};function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,b=new Array(c);b[0]=o;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[i]="string"==typeof e?e:r,b[1]=a;for(var p=2;p<c;p++)b[p]=n[p];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,n)}o.displayName="MDXCreateElement"},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return b}),n.d(t,"rightToc",function(){return a}),n.d(t,"default",function(){return o});n(0);var r=n(251);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var b={title:"NodeJS 测试",sidebar_label:"测试"},a=[{value:"测试",id:"测试",children:[]},{value:"简述",id:"简述",children:[{value:"测试方法",id:"测试方法",children:[]},{value:"黑盒测试",id:"黑盒测试",children:[]},{value:"白盒测试",id:"白盒测试",children:[]},{value:"单元测试",id:"单元测试",children:[]},{value:"覆盖率",id:"覆盖率",children:[]},{value:"Mock",id:"mock",children:[]},{value:"常用的测试工具",id:"常用的测试工具",children:[]},{value:"集成测试",id:"集成测试",children:[]},{value:"基准测试",id:"基准测试",children:[]},{value:"压力测试",id:"压力测试",children:[]},{value:"Assert",id:"assert",children:[]},{value:"常见断言工具",id:"常见断言工具",children:[]}]}],i={rightToc:a},u="wrapper";function o(e){var t=e.components,n=c(e,["components"]);return Object(r.b)(u,l({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"测试"},"测试"),Object(r.b)("p",null,"测试部分主要涉及的内容如下："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"测试方法"),Object(r.b)("li",{parentName:"ul"},"单元测试"),Object(r.b)("li",{parentName:"ul"},"基准测试"),Object(r.b)("li",{parentName:"ul"},"集成测试"),Object(r.b)("li",{parentName:"ul"},"压力测试"),Object(r.b)("li",{parentName:"ul"},"Assert(断言)")),Object(r.b)("h2",{id:"简述"},"简述"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"为什么要写测试? 写测试是否会拖累开发进度?")),Object(r.b)("p",null,"测试可以保证代码质量，减少 bug；并且因为有测试的保证，可以大胆的进行重构。不过要确保测试覆盖率达到 90%。"),Object(r.b)("p",null,"开发进度包括产品的质量和功能，单纯的功能开发快并不是进度的全部。测试可以在一定情况下加速功能开发并保证质量。比如一个基础函数刚开始符合功能要求，后来需要增加一些功能，如果没有测试，在修改之后还需要再将之前的功能测试一下；但是有了测试，就可以只需要保证新增功能是好的，因为一旦之前的功能出错了，测试用例会报错。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"测试是如何保证业务逻辑中不会出现死循环的？")),Object(r.b)("p",null,"可以在测试中加入超时来排查死循环和低性能等情况。"),Object(r.b)("h3",{id:"测试方法"},"测试方法"),Object(r.b)("p",null,"测试方法分为黑盒测试和白盒测试。"),Object(r.b)("h3",{id:"黑盒测试"},"黑盒测试"),Object(r.b)("p",null,"黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。测试中不关心内部的代码实现，只关注输入与界面输出。"),Object(r.b)("h3",{id:"白盒测试"},"白盒测试"),Object(r.b)("p",null,'白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，你清楚盒子内部的东西以及里面是如何运作的。"白盒"法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。比如测试函数的功能等。'),Object(r.b)("h3",{id:"单元测试"},"单元测试"),Object(r.b)("p",null,"单元测试是白盒测试的一种，针对最小可测试部件进行测试，如方法、类等。"),Object(r.b)("h3",{id:"覆盖率"},"覆盖率"),Object(r.b)("p",null,"测试覆盖率(Test Coverage)是指代码中各项逻辑被测试覆盖到的比率。主要有四个方面：行覆盖率、函数覆盖率、分支覆盖率、语句覆盖率。"),Object(r.b)("p",null,"常用的测试覆盖率框架 istanbul。"),Object(r.b)("h3",{id:"mock"},"Mock"),Object(r.b)("p",null,"Mock 主要用于单元测试中，当一个测试的对象可能依赖其它对象时，为了保证其行为不受其它对象的影响，可以通过模拟其它对象的行为来隔离要测试的对象。"),Object(r.b)("h3",{id:"常用的测试工具"},"常用的测试工具"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Mocha"),Object(r.b)("li",{parentName:"ul"},"Jest")),Object(r.b)("h3",{id:"集成测试"},"集成测试"),Object(r.b)("p",null,"集成测试，也叫组装测试或联合测试。在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。"),Object(r.b)("p",null,"实践表明，一些模块虽然能够单独地工作，但并不能保证连接起来也能正常的工作。一些局部反映不出来的问题，在全局上很可能暴露出来。"),Object(r.b)("h3",{id:"基准测试"},"基准测试"),Object(r.b)("p",null,"基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。比如一个方法的不同实现哪个更快。"),Object(r.b)("p",null,"目前 Node.js 中流行的白盒级基准测试工具是 benchmark."),Object(r.b)("p",null,"黑盒级别的基准测试, 则推荐 Apache ab 以及 wrk 等。"),Object(r.b)("h3",{id:"压力测试"},"压力测试"),Object(r.b)("p",null,"压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。比如测试大量并发。"),Object(r.b)("h3",{id:"assert"},"Assert"),Object(r.b)("p",null,"node 提供了 assert 模块用来做一些简单的单元测试。"),Object(r.b)("h3",{id:"常见断言工具"},"常见断言工具"))}o.isMDXComponent=!0}}]);