(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return c}),t.d(n,"default",function(){return p});t(0);var r=t(88);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i={id:"oop",title:"javascript 面向对象",sidebar_label:"面向对象"},c=[{value:"关于 this",id:"关于-this",children:[{value:"this 解析",id:"this-解析",children:[]}]}],l={rightToc:c},s="wrapper";function p(e){var n=e.components,t=o(e,["components"]);return Object(r.b)(s,a({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",null,Object(r.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"关于-this"})),Object(r.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#关于-this"}),"#"),"关于 this"),Object(r.b)("h3",null,Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"this-解析"})),Object(r.b)("a",a({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#this-解析"}),"#"),"this 解析"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"涉及面试题：如何正确判断 this？箭头函数的 this 是什么？")),Object(r.b)("p",null,"this 的本质是函数执行时的上下文环境。代码中 this 其实很简单，谁调用它，this 就指向谁。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"function foo() {\n  console.log(this.a)\n}\nvar a = 1\nfoo()\n\nconst obj = {\n  a: 2,\n  foo: foo\n}\nobj.foo()\n\nconst c = new foo()\n")),Object(r.b)("p",null,"上面代码，",Object(r.b)("inlineCode",{parentName:"p"},"foo()")," 执行时，没有指定调用对象，调用对象就是全局 global 对象。所以在浏览器中，this 就指向 window。",Object(r.b)("inlineCode",{parentName:"p"},"obj.foo()"),"是通过 obj 调用，所以 this 指向 obj。最后，",Object(r.b)("inlineCode",{parentName:"p"},"new foo()"),"时，this 就是 new 创建的对象 c。"),Object(r.b)("p",null,"要注意，箭头函数是没有 this 的，它也不能通过 bind 绑定 this。箭头函数中的 this 实际会查找上级作用域链。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"function a() {\n    return () => {\n      console.log(this)\n    }\n}\na()()\n")),Object(r.b)("p",null,"上面代码中，箭头函数是没有 this 的，所以 this 是函数 a 的，指向 window。"))}p.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",function(){return c}),t.d(n,"b",function(){return u});var r=t(0),a=t.n(r),o=a.a.createContext({}),i=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=i(e.components);return a.a.createElement(o.Provider,{value:n},e.children)},l="mdxType",s={inlineCode:"code",wrapper:function(e){return a.a.createElement(a.a.Fragment,{},e.children)}},p=function(e){var n=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,c=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),l=i(n);return a.a.createElement(l[o+"."+t]||l[t]||s[t]||r,n?Object.assign({},c,{components:n}):c)};function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);