(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{275:function(e,n,l){"use strict";l.r(n),l.d(n,"frontMatter",function(){return b}),l.d(n,"rightToc",function(){return i}),l.d(n,"default",function(){return o});l(0);var t=l(293);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var l=arguments[n];for(var t in l)Object.prototype.hasOwnProperty.call(l,t)&&(e[t]=l[t])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var l,t,a=function(e,n){if(null==e)return{};var l,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)l=r[t],n.indexOf(l)>=0||(a[l]=e[l]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)l=r[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var b={title:"webpack 知识总结"},i=[{value:"理想的构建工具",id:"理想的构建工具",children:[]},{value:"处理文件",id:"处理文件",children:[{value:"HTML",id:"html",children:[]},{value:"CSS",id:"css",children:[]},{value:"JS",id:"js",children:[]},{value:"图片",id:"图片",children:[]}]},{value:"响应式开发",id:"响应式开发",children:[]},{value:"体验",id:"体验",children:[{value:"热更新",id:"热更新",children:[]}]},{value:"优化构建速度",id:"优化构建速度",children:[{value:"升级最新版本工具",id:"升级最新版本工具",children:[]},{value:"多进程构建",id:"多进程构建",children:[]},{value:"多进程并行压缩",id:"多进程并行压缩",children:[]},{value:"分包",id:"分包",children:[]},{value:"缓存",id:"缓存",children:[]},{value:"缩小构建目标",id:"缩小构建目标",children:[]}]},{value:"优化构建大小",id:"优化构建大小",children:[]},{value:"参考资料",id:"参考资料",children:[]}],c={rightToc:i},p="wrapper";function o(e){var n=e.components,l=r(e,["components"]);return Object(t.b)(p,a({},c,l,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h2",{id:"理想的构建工具"},"理想的构建工具"),Object(t.b)("p",null,"思考下，一个理想的前端项目构建工具，需要有哪些功能："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"文件",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"html: 压缩、支持 require 引入(如 header)"),Object(t.b)("li",{parentName:"ul"},"js: 压缩混淆、合并，支持 es6+、jsx、ts 等语法"),Object(t.b)("li",{parentName:"ul"},"css: 预处理(如less)、加浏览器私有前缀、合并"),Object(t.b)("li",{parentName:"ul"},"图片、字体：压缩"))),Object(t.b)("li",{parentName:"ul"},"体验",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"构建速度快"),Object(t.b)("li",{parentName:"ul"},"模块化开发"),Object(t.b)("li",{parentName:"ul"},"修改文件后，浏览器自动刷新/热更新"),Object(t.b)("li",{parentName:"ul"},"跨域时，proxy 请求代理"),Object(t.b)("li",{parentName:"ul"},"命令行输出关键日志"))),Object(t.b)("li",{parentName:"ul"},"质量",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"代码规范 eslint"),Object(t.b)("li",{parentName:"ul"},"git 提交规范"),Object(t.b)("li",{parentName:"ul"},"测试"),Object(t.b)("li",{parentName:"ul"},"持续集成"))),Object(t.b)("li",{parentName:"ul"},"部署",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"非覆盖式发布：文件指纹"))),Object(t.b)("li",{parentName:"ul"},"优化",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"支持持续优化的方案")))),Object(t.b)("h2",{id:"处理文件"},"处理文件"),Object(t.b)("h3",{id:"html"},"HTML"),Object(t.b)("p",null,"webpack 中通常使用插件 HtmlWebpackPlugin 来处理 HTML 文件。它的功能如下："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"将模版文件转换为最终打包输出的 html 文件"),Object(t.b)("li",{parentName:"ul"},"可以将打包后的 js 以 script 标签形式插入到文件。"),Object(t.b)("li",{parentName:"ul"},"支持 html 压缩")),Object(t.b)("p",null,"基本配置如下："),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"new HtmlWebpackPlugin({\n    template: path.join(__dirname, 'src/search.html'),  // 模版文件\n    filename: 'search.html',  // 打包输出模版的名称\n    chunks: ['search'],  // 这个chunk会插入到输出模版中\n    inject: true,\n    minify:{\n        html5: true,           \n        collapseWhitespace: true,   // 移除空格\n        preserveLineBreaks: false,  // 必须与上面一起使用，多换行变成一行\n        minifyCSS: true,   // 用于压缩一开始就内联的 css\n        minifyJS: true,    // 用于压缩一开始就内联的 js\n        removeComments: false,             // 移除注释\n        removeRedundantAttributes: true,   // 移除默认匹配的属性 如 \n        removeScriptTypeAttributes: true,  // 移除 script  type 属性\n        removeStyleLinkTypeAttributes: true,  // 移除默认值属性，如input 默认值为 type=\"text\" ，将被移除\n        useShortDoctype: true,           // 使用短 doctype\n        removeEmptyAttributes: true,     // 移除空属性 ，如 id=\"\" id=\"\\n\"\n    }\n})\n")),Object(t.b)("p",null,"另外 HTML 还需要支持",Object(t.b)("inlineCode",{parentName:"p"},"require('head.html')"),"语法，可以使用",Object(t.b)("inlineCode",{parentName:"p"},"raw-loader"),"，它可以读取文件并嵌入到页面中。由于 HtmlWebpackPlugin 默认是 ejs 语法，所以可以使用",Object(t.b)("inlineCode",{parentName:"p"},"${require}"),"。"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"// raw-loader 0.5.1\n<script>${require('raw-loader!babel-loader!./meta.html')}<\/script>\n")),Object(t.b)("h3",{id:"css"},"CSS"),Object(t.b)("p",null,"CSS 文件一般要做的事情如下："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"支持",Object(t.b)("inlineCode",{parentName:"li"},"require('x.css')"),"，使用",Object(t.b)("inlineCode",{parentName:"li"},"css-loader"),"，它将文件转为 commonjs 对象。"),Object(t.b)("li",{parentName:"ul"},"支持 css 内嵌入 html 中，使用",Object(t.b)("inlineCode",{parentName:"li"},"style-loader"),"，它会将 css 通过",Object(t.b)("inlineCode",{parentName:"li"},"<style>"),"标签形式插入 head 中。或者使用",Object(t.b)("inlineCode",{parentName:"li"},"html-inline-css-webpack-plugin"),"插件。")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"{\n    loader:'style-loader'\n    options:{\n        insertAt: 'top', // 样式插入到 <head>\n        singleton: true, // 将所有 style 标签合并成一个\n    }\n}\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"支持将 css 抽取成外链(",Object(t.b)("inlineCode",{parentName:"li"},"mini-css-extract-plugin"),")。"),Object(t.b)("li",{parentName:"ul"},"支持预处理，如 less，可以使用",Object(t.b)("inlineCode",{parentName:"li"},"less-loader"),"。"),Object(t.b)("li",{parentName:"ul"},"支持压缩，一般使用",Object(t.b)("inlineCode",{parentName:"li"},"optimize-css-asset-webpack-plugin"),"插件 +",Object(t.b)("inlineCode",{parentName:"li"},"cssnano"),"处理器。"),Object(t.b)("li",{parentName:"ul"},"支持自动添加浏览器私有前缀，如 -webkit- 等，可以使用",Object(t.b)("inlineCode",{parentName:"li"},"postcss-loader")," + ",Object(t.b)("inlineCode",{parentName:"li"},"autoprefixer"),"插件，",Object(t.b)("inlineCode",{parentName:"li"},"autoprefixer"),"是一个 css 后置处理器，是代码生成后再处理的，它根据 can i use 规则进行添加私有前缀。",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"Trident -ms"),Object(t.b)("li",{parentName:"ul"},"Geko    -moz"),Object(t.b)("li",{parentName:"ul"},"Webkit   -webkit"),Object(t.b)("li",{parentName:"ul"},"Presto   -o")))),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"const OptimizeCssAssetsPlugin = require('optimize-css-asset-webpack-plugin')\nconst cssnano = require('cssnano')\nconst autoprefixer = require('autoprefixer')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n    ...\n    module: {\n        rules: [\n            {\n                test: /.css$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader'\n                ]\n            },\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: () => [\n                                autoprefixer({\n                                    browsers: ['last 2 version', '>1%', 'ios 7']\n                                })\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new OptimizeCssAssetsPlugin({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: cssnano\n        })\n    ]\n}\n")),Object(t.b)("h3",{id:"js"},"JS"),Object(t.b)("p",null,"js 需要做的事情如下："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"压缩：webpack 内置了 uglifyjs-webpack-plugin，在 mode 为 production 时默认开启"),Object(t.b)("li",{parentName:"ul"},"内联JS，",Object(t.b)("inlineCode",{parentName:"li"},"<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}<\/script>"),"。"),Object(t.b)("li",{parentName:"ul"},"解析 es6，需要使用",Object(t.b)("inlineCode",{parentName:"li"},"babel-loader"),"。添加配置文件",Object(t.b)("inlineCode",{parentName:"li"},".babelrc"),"。")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"npm i @babel/core @babel/preset-env babel-loader -D (--dev-save)\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},".babelrc")),Object(t.b)("p",null,"presets 对应一个功能集合，plugins 对应一个功能"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-json"}),'{\n    "presets": [\n        "@babel/preset-env"\n    ],\n    "plugins": [\n        "@babel/plugin-proposal-class-properties"\n    ]\n}\n')),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"解析react")),Object(t.b)("p",null,"需要在 presets 配置里增加",Object(t.b)("inlineCode",{parentName:"p"},"@babel/preset-react"),"。"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"npm i react react-dom @babel/preset-react -D\n")),Object(t.b)("h3",{id:"图片"},"图片"),Object(t.b)("p",null,"图片需要做的事情如下："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"支持",Object(t.b)("inlineCode",{parentName:"li"},"require()"),"引入模块，可以使用",Object(t.b)("inlineCode",{parentName:"li"},"url-loader"),"或",Object(t.b)("inlineCode",{parentName:"li"},"file-loader"),"，",Object(t.b)("inlineCode",{parentName:"li"},"url-loader"),"内部也是使用的",Object(t.b)("inlineCode",{parentName:"li"},"file-loader"),"，但是它支持设置小图片转 base64 内嵌。"),Object(t.b)("li",{parentName:"ul"},"图片压缩，一般是使用 imagemin 库或 tinypng API 进行图片压缩。可以配置",Object(t.b)("inlineCode",{parentName:"li"},"image-webpack-loader"),"，它内部是用的",Object(t.b)("inlineCode",{parentName:"li"},"imagemin"),"。")),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"imagemin"),"的优点是:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"有很多定制选项"),Object(t.b)("li",{parentName:"ul"},"可以引入更多第三方优化插件，如 pngquant"),Object(t.b)("li",{parentName:"ul"},"可以处理多种图片格式")),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"imagemin"),"压缩原理是:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"pngquant"),": "),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"pngcrush"),": 主要目的是通过尝试不同压缩级别和 PNG 过滤方法来降低 PNG IDAT 数据流的大小。"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"optipng"),": "),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"tingpng"),": ")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"{\n    test: /\\.(png|svg|jpg|gif|blob)$/,\n    use: [{\n        loader: 'file-loader',\n        options: {\n            name: `${filename}img/[name]${hash}.[ext]`\n        }\n    },\n    {\n        loader: 'image-webpack-loader',\n        options: {\n            mozjpeg: {\n                progressive: true,\n                quality: 65\n            },\n            optipng: {\n                enabled: false\n            },\n            pngquant: {\n                quality: '65-90',\n                speed: 4\n            },\n            gifsicle: {\n                interlaced: false\n            },\n            webp: {\n                quality: 75\n            }\n        }\n    }]\n}\n")),Object(t.b)("h2",{id:"响应式开发"},"响应式开发"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"支持响应式开发：可以使用",Object(t.b)("inlineCode",{parentName:"li"},"px2rem-loader")," + ",Object(t.b)("inlineCode",{parentName:"li"},"lib-flexible"),"。")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"@media max-width(768px){\n\n}\n")),Object(t.b)("p",null,"缺陷：需要写多套代码"),Object(t.b)("p",null,"w3c 对 rem 的定义：font-size of the root element。"),Object(t.b)("p",null,"通过750的设计稿去写，然后用构建工具进行转换成 rem"),Object(t.b)("p",null,"使用 px2rem-loader"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"{\n    loader: 'px2rem-loader',\n    options: {\n        remUnit: 75,       // 设计图的宽度/10 比如你的设计图是1920的宽度 这里你就1920/10=192\n        remPrecision: 8    // 换算的rem保留几位小数点\n    }\n}\n")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"//对于有些地方不用转换的我们可以在样式后面添加/*no*/这样就不会给我们转化了;\n.text{\n    width:200px;\n    height:200px;\n    border-radius: 50%;\n    border:1px solid red;/*no*/\n}\n")),Object(t.b)("p",null,"页面渲染时计算根元素的 font-size 值"),Object(t.b)("p",null,"可以使用 lib-flexible，注意代码里限制了 PC 使用，只支持移动端。需要修改 refreshRem 前三行。"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"npm i px2rem-loader lib-flexible -D\n")),Object(t.b)("h2",{id:"体验"},"体验"),Object(t.b)("h3",{id:"热更新"},"热更新"),Object(t.b)("p",null,"实现热更新有两种方式："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},Object(t.b)("inlineCode",{parentName:"li"},"webpack-dev-server")," + HotModuleReplacementPlugin 插件。")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"// webpack-dev-server --config webpack.dev.js --open\n\ndevServer: {\n    contentBase: './dist',\n    hot: true,\n    stats: 'errors-only',\n}\n\nnew webpack.HotModuleReplacementPlugin()\n")),Object(t.b)("ol",{start:2},Object(t.b)("li",{parentName:"ol"},Object(t.b)("inlineCode",{parentName:"li"},"webpack-dev-middleware"),"，它会将 webpack 输出的文件传给服务器，适合灵活的定制场景。")),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"const express = require('express')\nconst webpack = require('webpack')\nconst webpackDevMiddleware = require('webpack-dev-middleware')\n\nconst app = express()\nconst config = require('./webpack.config.js')\nconst compiler = webpack(config)\n\napp.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath\n}))\napp.listen(3000, function(){})\n")),Object(t.b)("p",null,"热更新的原理如下："),Object(t.b)("p",null,Object(t.b)("img",a({parentName:"p"},{src:"/img/webpack/hmr.jpg",alt:null}))),Object(t.b)("p",null,"webpack-dev-server 会启动两个服务 Bundle Server 和 HMR Server，并通过 webpack compiler 将 JS 文件打包编译输出给这两个服务，Bundler Server 是浏览器访问服务，HMR Server 是热更新服务，浏览器访问时，会被注入 HMR Runtime(使用 websocket 进行通信)，当文件有更新时，HMR Server 会将更新输出给 HMR Runtime，进行更新。"),Object(t.b)("h2",{id:"优化构建速度"},"优化构建速度"),Object(t.b)("p",null,"构建速度的优化方法主要有下面几点："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"升级最新版本工具(node、webpack等)"),Object(t.b)("li",{parentName:"ol"},"多进程构建"),Object(t.b)("li",{parentName:"ol"},"多进程压缩"),Object(t.b)("li",{parentName:"ol"},"分包"),Object(t.b)("li",{parentName:"ol"},"缓存"),Object(t.b)("li",{parentName:"ol"},"缩小构建目标")),Object(t.b)("h3",{id:"升级最新版本工具"},"升级最新版本工具"),Object(t.b)("p",null,"工具的升级往往伴随着工具性能的提升，所以升级 node 和 webpack 等。"),Object(t.b)("h3",{id:"多进程构建"},"多进程构建"),Object(t.b)("p",null,"可以使用",Object(t.b)("inlineCode",{parentName:"p"},"thread-loader"),"，还可以使用",Object(t.b)("inlineCode",{parentName:"p"},"parallel-webpack"),"，",Object(t.b)("inlineCode",{parentName:"p"},"HappyPack"),"。HappyPack 的原理是当 webpack 解析模块时，他会将它及它的依赖分配到其它 worker 线程中。"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{className:"language-js"}),"{\n    loader: 'thread-loader',\n    options: {\n        workers: 3\n    }\n}\n")),Object(t.b)("h3",{id:"多进程并行压缩"},"多进程并行压缩"),Object(t.b)("p",null,"有下面几种方案："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"开启",Object(t.b)("inlineCode",{parentName:"li"},"terser-webpack-plugin"),"的 parallel 参数，默认线程数是 cpu * 2 - 1。"),Object(t.b)("li",{parentName:"ol"},"使用",Object(t.b)("inlineCode",{parentName:"li"},"webpack-parellel-uglify-plugin"),"插件"),Object(t.b)("li",{parentName:"ol"},"开启",Object(t.b)("inlineCode",{parentName:"li"},"uglifyjs-webpack-plugin"),"的 parallel 参数")),Object(t.b)("h3",{id:"分包"},"分包"),Object(t.b)("p",null,"分包主要有 2 种方案："),Object(t.b)("p",null,"1、通过 cdn 引入基础包(如 react、react-dom)，这样就无需将基础包打入 bundle 中。可以使用",Object(t.b)("inlineCode",{parentName:"p"},"html-webpack-externals-plugin"),"。"),Object(t.b)("p",null,"2、预编译资源模块，即只最初打包一次基础包，之后直接引入，不再重新打基础包。使用 DLLPlugin 插件进行分包，DLLReferencePlugin 对 manifest.json 引用。"),Object(t.b)("p",null,"DLLPlugin 通常用于基础包(框架基础包、业务基础包)的分离，SplitChunks 虽然也可以提取，但是它每次提取需要耗时，而 DLLPlugin 只需要编译一次，后面无需再编译。通常是单独写一个",Object(t.b)("inlineCode",{parentName:"p"},"webpack.dll.js"),"文件，并配置命令",Object(t.b)("inlineCode",{parentName:"p"},"npm run dll"),"。"),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"{\n    context: process.cwd(),\n    resolve: {\n        extensions: ['.js', '.jsx', '.json', '.less', '.css'],\n        module: [__dirname, 'node_modules']\n    },\n    entry: {\n        library: [\n            'react',\n            'react-dom',\n            'redux'\n        ]\n    },\n    output: {\n        filename: '[name].dll.js',\n        path: path.resolve(__dirname, './build/library'),\n        library: '[name]'\n    },\n    plugins: [\n        new webpack.DllPlugin({\n            name: '[name]',\n            path: './build/library/[name].json'\n        })\n    ]\n}\n")),Object(t.b)("h3",{id:"缓存"},"缓存"),Object(t.b)("p",null,"缓存可以大幅提升二次构建速度。"),Object(t.b)("p",null,"缓存的方案有："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"babel-loader")," 开启缓存",Object(t.b)("inlineCode",{parentName:"li"},"babel-loader?cacheDirectory"),"。"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"terser-webpack-plugin"),"开启缓存。"),Object(t.b)("li",{parentName:"ul"},"使用",Object(t.b)("inlineCode",{parentName:"li"},"cache-loader"),"或者",Object(t.b)("inlineCode",{parentName:"li"},"hard-source-webpack-plugin"),"提升模块转换阶段缓存。")),Object(t.b)("h3",{id:"缩小构建目标"},"缩小构建目标"),Object(t.b)("p",null,"缩小构建目标可以减少文件搜索范围。"),Object(t.b)("p",null,"方案如下："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"babel-loader"),"不解析 node_modules 目录的文件。通过配置",Object(t.b)("inlineCode",{parentName:"li"},"exclude: 'node_modules'"),"。"),Object(t.b)("li",{parentName:"ul"},"配置 resolve 模块查找",Object(t.b)("ul",{parentName:"li"},Object(t.b)("li",{parentName:"ul"},"优化 resolve.modules，resolve.mainFields，resolve.extensions。"),Object(t.b)("li",{parentName:"ul"},"合理使用 alias"),Object(t.b)("li",{parentName:"ul"},"设置resolve.symlinks: false，如果不使用 npm link。"),Object(t.b)("li",{parentName:"ul"},"设置resolve.cacheWithContext: false，关闭根据上下文解析插件。")))),Object(t.b)("pre",null,Object(t.b)("code",a({parentName:"pre"},{}),"resolve:{\n    alias: {\n        react: path.resolve(__dirname, './node_modules/xx.react.js'\n    },\nmodules: [path.resolve(__dirname, 'node_modules')],\nextensions: ['.js'],\nmainFields: ['main']\n}\n")),Object(t.b)("h2",{id:"优化构建大小"},"优化构建大小"),Object(t.b)("h2",{id:"参考资料"},"参考资料"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",a({parentName:"li"},{href:"https://webpack.js.org/guides/build-performance/"}),"https://webpack.js.org/guides/build-performance/"))))}o.isMDXComponent=!0},293:function(e,n,l){"use strict";l.d(n,"a",function(){return i}),l.d(n,"b",function(){return u});var t=l(0),a=l.n(t),r=a.a.createContext({}),b=function(e){var n=a.a.useContext(r),l=n;return e&&(l="function"==typeof e?e(n):Object.assign({},n,e)),l},i=function(e){var n=b(e.components);return a.a.createElement(r.Provider,{value:n},e.children)};var c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},o=function(e){var n=e.components,l=e.mdxType,t=e.originalType,r=e.parentName,i=function(e,n){var l={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(l[t]=e[t]);return l}(e,["components","mdxType","originalType","parentName"]),c=b(n),o=l,u=c[r+"."+o]||c[o]||p[o]||t;return n?a.a.createElement(u,Object.assign({},i,{components:n})):a.a.createElement(u,i)};function u(e,n){var l=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=l.length,b=new Array(r);b[0]=o;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:t,b[1]=i;for(var u=2;u<r;u++)b[u]=l[u];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,l)}o.displayName="MDXCreateElement"}}]);