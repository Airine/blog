(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{145:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",function(){return l}),a.d(n,"rightToc",function(){return c}),a.d(n,"default",function(){return m});a(0);var t=a(217);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l={title:"javascript 模块化",sidebar_label:"模块化编程"},c=[{value:"立即执行函数",id:"立即执行函数",children:[]},{value:"AMD 和 CMD",id:"amd-和-cmd",children:[]},{value:"CommonJS",id:"commonjs",children:[]},{value:"ES Module",id:"es-module",children:[]},{value:"ES Module 和 CommonJS 的区别？",id:"es-module-和-commonjs-的区别？",children:[]}],u={rightToc:c},i="wrapper";function m(e){var n=e.components,a=o(e,["components"]);return Object(t.b)(i,r({},u,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"面试题：为什么要使用模块化？都有哪几种方式可以实现模块化，各有什么特点？")),Object(t.b)("p",null,"模块化的好处："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"解决命名冲突"),Object(t.b)("li",{parentName:"ul"},"提供复用性"),Object(t.b)("li",{parentName:"ul"},"提高代码可维护性")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"立即执行函数"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#立即执行函数"}),"#"),"立即执行函数"),Object(t.b)("p",null,"立即执行函数中声明的变量、函数，不会污染全局作用域。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),";(function(global){\n    global.$ = jQuery\n})(window);\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"amd-和-cmd"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#amd-和-cmd"}),"#"),"AMD 和 CMD"),Object(t.b)("p",null,"这两种方式现在已经很少用到。"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"// AMD\ndefine(['./a', './b'], function(a, b) {\n  // 加载模块完毕可以使用\n  a.do()\n  b.do()\n})\n// CMD\ndefine(function(require, exports, module) {\n  // 加载模块\n  // 可以把 require 写在函数体的任意地方实现延迟加载\n  var a = require('./a')\n  a.doSomething()\n})\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"commonjs"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#commonjs"}),"#"),"CommonJS"),Object(t.b)("p",null,"CommonJS 模块规范在 Node 中被使用。它的特点是："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"每个文件是一个模块"),Object(t.b)("li",{parentName:"ul"},"使用 export 导出模块"),Object(t.b)("li",{parentName:"ul"},"使用 require 导入模块")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"es-module"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#es-module"}),"#"),"ES Module"),Object(t.b)("p",null,"es module babel 会编译成 require/exports ?"),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"es-module-和-commonjs-的区别？"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#es-module-和-commonjs-的区别？"}),"#"),"ES Module 和 CommonJS 的区别？"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"CommonJS 是运行时加载，支持动态导入(即路径使用变量)。ES Module 不支持。"),Object(t.b)("li",{parentName:"ul"},"CommonJS 是同步的，因为服务器文件都在本地，速度快。而 ES Module 是异步的，用于浏览器，如果采用同步导入会对渲染有很大影响。"),Object(t.b)("li",{parentName:"ul"},"CommonJS export 的是浅拷贝(如果是基本类型，是拷贝值，不影响原来的值)，esModule 输出的是引用。")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"/*************** a.js**********************/\nlet count = {name:1}\nexports.count = count; // 输出值的拷贝\nexports.add = ()=>{\n    //这里改变count值，并不会将module.exports对象的count属性值改变\n    // count++;\n    count.name = 'xx'\n}\n\n\n/*************** b.js**********************/\nconst { count, add } = require('./a.js')\n\nconsole.log(count.name) // 1\nadd();\nconsole.log(count.name) //xx\n")))}m.isMDXComponent=!0},217:function(e,n,a){"use strict";a.d(n,"a",function(){return c}),a.d(n,"b",function(){return b});var t=a(0),r=a.n(t),o=r.a.createContext({}),l=function(e){var n=r.a.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},c=function(e){var n=l(e.components);return r.a.createElement(o.Provider,{value:n},e.children)},u="mdxType",i={inlineCode:"code",wrapper:function(e){return r.a.createElement(r.a.Fragment,{},e.children)}},m=function(e){var n=e.components,a=e.mdxType,t=e.originalType,o=e.parentName,c=function(e,n){var a={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(a[t]=e[t]);return a}(e,["components","mdxType","originalType","parentName"]),u=l(n);return r.a.createElement(u[o+"."+a]||u[a]||i[a]||t,n?Object.assign({},c,{components:n}):c)};function b(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[u]="string"==typeof e?e:t,l[1]=c;for(var b=2;b<o;b++)l[b]=a[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);