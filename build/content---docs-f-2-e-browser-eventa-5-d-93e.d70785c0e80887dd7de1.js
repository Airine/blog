(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return r}),n.d(t,"default",function(){return o});n(0);var a=n(249);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i={title:"浏览器事件机制",sidebar_label:"事件机制"},r=[{value:"事件绑定",id:"事件绑定",children:[{value:"addEventListener",id:"addeventlistener",children:[]}]},{value:"事件传播",id:"事件传播",children:[{value:"事件兼容性",id:"事件兼容性",children:[]},{value:"阻止事件传播",id:"阻止事件传播",children:[]},{value:"阻止事件默认行为",id:"阻止事件默认行为",children:[]},{value:"创建与触发自定义事件",id:"创建与触发自定义事件",children:[]}]},{value:"事件对象",id:"事件对象",children:[{value:"Event",id:"event",children:[]},{value:"实例属性",id:"实例属性",children:[]}]},{value:"事件委托",id:"事件委托",children:[]},{value:"鼠标事件",id:"鼠标事件",children:[{value:"MouseEvent接口",id:"mouseevent接口",children:[]},{value:"WheelEvent 接口",id:"wheelevent-接口",children:[]},{value:"键盘事件",id:"键盘事件",children:[]},{value:"进度事件",id:"进度事件",children:[]},{value:"表单事件",id:"表单事件",children:[]},{value:"触摸事件",id:"触摸事件",children:[]},{value:"拖拉事件",id:"拖拉事件",children:[]},{value:"其它常见事件",id:"其它常见事件",children:[]}]},{value:"jQuery事件绑定",id:"jquery事件绑定",children:[{value:"简介",id:"简介",children:[]}]},{value:"参考资料",id:"参考资料",children:[]}],c={rightToc:r},p="wrapper";function o(e){var t=e.components,n=b(e,["components"]);return Object(a.b)(p,l({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"事件绑定"},"事件绑定"),Object(a.b)("p",null,"与事件绑定相关的方法有："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"addEventListener()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"removeEventListener()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"dispatchEvent()"))),Object(a.b)("h3",{id:"addeventlistener"},"addEventListener"),Object(a.b)("p",null,"addEventListener 方法用于绑定事件处理程序。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"addEventListener(type, listener, useCapture)\n")),Object(a.b)("p",null,"addEventListener 方法的参数如下："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"type <String>"),": 事件名"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"listener <Function>"),": 事件处理程序"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"useCapture <Boolean|Object>"),": 是否冒泡，这个参数还可以是一个对象，它有属性：",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"capture"),":布尔值，是否冒泡"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"once"),":布尔值，是否只触发一次"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"passive"),": 布尔值，设为 true 时，表示事件处理程序 listener 永远不会调用",Object(a.b)("inlineCode",{parentName:"li"},"preventDefault()"),"，如果 listener 还是调用了",Object(a.b)("inlineCode",{parentName:"li"},"preventDefault()"),"，客户端将忽略它并抛出一个控制台警告。")))),Object(a.b)("p",null,"DOM0 级还可以使用 onclick 方式绑定，但是它只能绑定一个事件处理函数。"),Object(a.b)("h2",{id:"事件传播"},"事件传播"),Object(a.b)("p",null,"事件的传播分为三个阶段：捕获(从 window 到目标元素)、到达目标元素、冒泡(从目标元素到 window)。"),Object(a.b)("p",null,"要注意的是，给目标元素同时绑定捕获或冒泡事件，会按照绑定的顺序执行。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"target.addEventListener('click', e => console.log(\"冒泡\") , false)\ntarget.addEventListener('click', e => console.log(\"捕获\") , true)\n")),Object(a.b)("p",null,"上面代码，点击 target，将依次输出",Object(a.b)("inlineCode",{parentName:"p"},"冒泡"),"、",Object(a.b)("inlineCode",{parentName:"p"},"捕获"),"。"),Object(a.b)("h3",{id:"事件兼容性"},"事件兼容性"),Object(a.b)("p",null,"IE9 之前，事件有如下兼容性问题："),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"只支持冒泡，不支持捕获，所以实际开发中很少使用捕获。"),Object(a.b)("li",{parentName:"ol"},"不支持 addEventListener 和 removeEventListener，但是有对应的 attachEvent 和 detachEvent。"),Object(a.b)("li",{parentName:"ol"},"事件对象是挂在 window 上。"),Object(a.b)("li",{parentName:"ol"},"取消冒泡和取消默认行为")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"// 取消冒泡\ne.cancelBubble = true\n\n// 取消默认行为\ne.returnValue = false\n\n// 事件目标元素\ne.srcElement\n")),Object(a.b)("p",null,"所以兼容的方法如下："),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"/**\n * 修复事件对象不兼容的地方\n */\nfunction fixEventObj(e) {\n  e.target = e.target || e.srcElement;\n  e.preventDefault = e.preventDefault || function() {\n    e.returnValue = false;\n  };\n  e.stopPropagation = e.stopPropagation || function() {\n    e.cancelBubble = true;\n  };\n\n  return e;\n}\n\n/**\n * 跨浏览器的绑定事件\n */\nfunction on(elem, type, handle) {\n  if (elem.addEventListener) { // 检测是否有标准方法\n    elem.addEventListener(type, handle, false);\n  } else if (elem.attachEvent) { // 试图使用 `attachEvent`\n    elem.attachEvent('on' + type, function(event) {\n      event = fixEventObj(event);\n      handle.call(elem, event); // 使用 call 来改变 handle 的作用域，使其指向 elem\n    });\n  } else { // 兜底\n    elem['on' + type] = function() {\n      var event = fixEventObj(window.event);\n      handle.call(elem, event);\n    }\n  }\n}\n")),Object(a.b)("h3",{id:"阻止事件传播"},"阻止事件传播"),Object(a.b)("p",null,"阻止事件传播的方法有 2 个："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"stopPropagation()"),": 这个方法会阻止当前绑定的事件传播，不会阻止其它的同名事件传播。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"stopImmediatePropagation()"),": 这个方法会阻止当前绑定事件的传播，以及之后绑定事件的传播。")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var b = document.body\n\ndocument.addEventListener('click', (e) => {\n    console.log('document capture')\n}, true)\n\ndocument.addEventListener('click', (e) => {\n    console.log('document bubble')\n}, false)\n\nb.addEventListener('click', (e) => {\n    console.log('body click 0')\n}, false)\n\nb.addEventListener('click', (e) => {\n    // e.stopPropagation()\n    e.stopImmediatePropagation()\n    console.log('body click 1')\n}, false)\n\nb.addEventListener('click', (e) => {\n    console.log('body click 2')\n}, false)\n\n// 如果使用 e.stopPropagation()，将输出\n// document capture\n// body click 0\n// body click 1\n// body click 2\n\n// 如果使用 e.stopImmediatePropagation()，将输出\n// document capture\n// body click 0\n// body click 1\n")),Object(a.b)("p",null,"上面的例子中，如果使用",Object(a.b)("inlineCode",{parentName:"p"},"e.stopImmediatePropagation()"),"，不会输出",Object(a.b)("inlineCode",{parentName:"p"},"body click 2"),"，也就是将自身后面写的事件也阻止了。"),Object(a.b)("p",null,"另外，要注意它是阻止冒泡，并没有阻止捕获。所以",Object(a.b)("inlineCode",{parentName:"p"},"document capture"),"总是会输出的。"),Object(a.b)("h3",{id:"阻止事件默认行为"},"阻止事件默认行为"),Object(a.b)("p",null,"事件默认行为就是浏览器自带的一些事件行为。比如鼠标右键时会打开菜单，选中文字后可以按住拖动等。有时候，这些默认事件会影响我们的开发，所以需要阻止它。"),Object(a.b)("p",null,"阻止默认事件的方法是使用事件对象的",Object(a.b)("inlineCode",{parentName:"p"},"preventDefault()"),"方法。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"b.addEventListener('contextmenu', (e) => {\n    console.log('body click 1')\n    e.preventDefault()\n}, false)\n")),Object(a.b)("p",null,"上面例子中，禁止了右键菜单，所以鼠标右键点击时，不再出现菜单。"),Object(a.b)("h3",{id:"创建与触发自定义事件"},"创建与触发自定义事件"),Object(a.b)("p",null,"自定义事件的创建触发流程如下："),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var event = new Event('build')\nelement.addEventListener('build', (e)=>{}, false)\nelement.dispatch(event)\n")),Object(a.b)("p",null,"上面例子，创建了一个 build 事件，然后给 element 元素注册 build 事件函数，最后使用 dispatch 触发。"),Object(a.b)("p",null,"如果需要在事件函数中传递数据，则需要使用 CustomEvent 的 detail 属性。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var event = new CustomEvent('build', {detail: element.dataset.time})\nfunction eventHandler(e){\n    console.log(e.detail)\n}\n")),Object(a.b)("p",null,"下面这个例子，可以将子元素事件冒泡给父级，并传递数据。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"// html 结构\n// <form>\n//   <textarea></textarea>\n// </form>\n\nconst form = document.querySelector('form');\nconst textarea = document.querySelector('textarea');\n\n// 创建事件，允许冒泡，并传递数据\nconst eventAwesome = new CustomEvent('awesome', {\n  bubbles: true,\n  detail: { text: () => textarea.value }\n});\n\nform.addEventListener('awesome', e => console.log(e.detail.text()));\n\ntextarea.addEventListener('input', e => e.target.dispatchEvent(eventAwesome));\n// 或使用 function this\n// textarea.addEventListener('input', function(e){\n//     this.dispatchEvent(new CustomEvent('awesome', { \n//         bubbles: true, detail: { text: () => textarea.value } \n//     }))\n// });\n")),Object(a.b)("h2",{id:"事件对象"},"事件对象"),Object(a.b)("h3",{id:"event"},"Event"),Object(a.b)("h3",{id:"实例属性"},"实例属性"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"e.bubbles"),Object(a.b)("li",{parentName:"ul"},"e.eventPhase"),Object(a.b)("li",{parentName:"ul"},"e.currentTarget: 事件触发时经过的节点，因为总是在当前对象触发，所以相当于 this。"),Object(a.b)("li",{parentName:"ul"},"e.target: 事件触发目标")),Object(a.b)("h2",{id:"事件委托"},"事件委托"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"// 给100个li元素绑定事件\nfor(let i = 0; i < li.length; i++){\n    li.addEventListener('click', handler, false)\n}\n")),Object(a.b)("p",null,"上面例子中，在给大量元素(如列表",Object(a.b)("inlineCode",{parentName:"p"},"<li>"),")绑定事件时，传统的事件绑定会有一些问题："),Object(a.b)("ol",{start:0},Object(a.b)("li",{parentName:"ol"},"大量事件绑定，消耗性能，而且 IE 还需要解绑，否则会内存泄露。"),Object(a.b)("li",{parentName:"ol"},"绑定元素必须存在，后期插入的元素，需要重新绑定事件。"),Object(a.b)("li",{parentName:"ol"},"语法过于复杂")),Object(a.b)("p",null,"优化的办法就是使用",Object(a.b)("inlineCode",{parentName:"p"},"事件委托"),"。事件委托就是将事件处理函数绑定在目标对象的父级或祖先级节点上，目标对象的事件会通过冒泡或捕获传递给它。主要的好处是："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"新增子节点时，无需再重新绑定事件"),Object(a.b)("li",{parentName:"ul"},"节省内存")),Object(a.b)("p",null,"不足点是："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"并非所有的事件都能冒泡，如",Object(a.b)("inlineCode",{parentName:"li"},"load"),"、",Object(a.b)("inlineCode",{parentName:"li"},"change"),"、",Object(a.b)("inlineCode",{parentName:"li"},"submit"),"、",Object(a.b)("inlineCode",{parentName:"li"},"focus"),"、",Object(a.b)("inlineCode",{parentName:"li"},"blur"),"。"),Object(a.b)("li",{parentName:"ul"},"事件传播链越长，越耗时，可以从 jQuery 取消 live(直接委托在 document 上) 方法可以看出。")),Object(a.b)("h2",{id:"鼠标事件"},"鼠标事件"),Object(a.b)("h3",{id:"mouseevent接口"},"MouseEvent接口"),Object(a.b)("p",null,"鼠标事件继承自",Object(a.b)("inlineCode",{parentName:"p"},"MouseEvent"),"接口，具体事件主要有："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"click"),": 点击鼠标主键时触发。鼠标点击时，事件触发顺序是",Object(a.b)("inlineCode",{parentName:"li"},"mousedown"),"->",Object(a.b)("inlineCode",{parentName:"li"},"mouseup"),"->",Object(a.b)("inlineCode",{parentName:"li"},"click"),"。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"dblclick"),": 双击鼠标时触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mousedown"),": 鼠标键按下时触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mouseup"),": 鼠标键抬起时触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mousemove"),": 鼠标移动时触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mouseenter"),": 鼠标移动进入节点时触发，进入子节点不会触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mouseleave"),": 鼠标离开节点时触发"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mouseover"),": 鼠标进入节点时触发，进入子节点会再次触发。（记忆方法，over、out，两个o是一对）。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mouseout"),": 鼠标离开节点时触发(如进入子节点)，离开子节点会再次触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"contextmenu"),"：鼠标右键时触发。或按下上下文菜单键时触发。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"wheel"),": 滚动鼠标的滚轮时触发，该事件继承自",Object(a.b)("inlineCode",{parentName:"li"},"WheelEvent"),"接口。")),Object(a.b)("p",null,"鼠标事件对象，是",Object(a.b)("inlineCode",{parentName:"p"},"MouseEvent"),"的实例。它的主要属性如下："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"altKey")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"ctrlKey")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"metaKey"),": meta 键是否按下(mac 是 command 键，windows 是 windows 键)。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"shiftKey")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"button"),": 表示鼠标按下的哪个键，0是主键，或事件没有初始化这个属性(如 mousemove)，1是辅助键(中键或滚轮键)，2是次键。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"buttons"),": 返回三个 bit 的值，表示同时按下了哪些键。1(",Object(a.b)("inlineCode",{parentName:"li"},"001"),")表示按下左键，2(",Object(a.b)("inlineCode",{parentName:"li"},"010"),")表示按下右键，4(",Object(a.b)("inlineCode",{parentName:"li"},"100"),")表示按下中键或滚轮键。所以 3(",Object(a.b)("inlineCode",{parentName:"li"},"011"),")表示同时按下左键和右键。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"clientX"),"、",Object(a.b)("inlineCode",{parentName:"li"},"clientY"),": 鼠标举例浏览器窗口左上角的位置，单位是像素。它们还有别名",Object(a.b)("inlineCode",{parentName:"li"},"x"),"、",Object(a.b)("inlineCode",{parentName:"li"},"y"),"。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"movementX"),"、",Object(a.b)("inlineCode",{parentName:"li"},"movementY"),": 返回当前位置与上一个",Object(a.b)("inlineCode",{parentName:"li"},"mousemove"),"事件的距离。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"screenX"),"、",Object(a.b)("inlineCode",{parentName:"li"},"screenY"),": 返回鼠标相对于屏幕左上角的位置。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"offsetX"),"、",Object(a.b)("inlineCode",{parentName:"li"},"offsetY"),": 返回鼠标与目标节点左上角的 padding 外边缘的距离(包括 padding)。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"pageX"),"、",Object(a.b)("inlineCode",{parentName:"li"},"pageY"),": 返回鼠标与文档的距离，即包括滚动条。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"relatedTarget"),": 返回事件的相关节点。对于没有相关节点的事件，该属性返回 null。个人理解为副相关节点。具体如下。")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",l({parentName:"tr"},{align:null}),"事件名"),Object(a.b)("th",l({parentName:"tr"},{align:null}),"target"),Object(a.b)("th",l({parentName:"tr"},{align:null}),"relatedTarget"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"focusin"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"获得焦点的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"失去焦点的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"focusout"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"失去焦点的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"获得焦点的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"mouseenter"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"mouseleave"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"mouseover"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"mouseout"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"dragenter"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",l({parentName:"tr"},{align:null}),"dragexit"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要离开的元素"),Object(a.b)("td",l({parentName:"tr"},{align:null}),"将要进入的元素")))),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"getModifierState()"),": 返回有没有按下特定的功能键，参数是一个",Object(a.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#Modifier_keys_on_Gecko"}),"功能键字符串"),"。")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"document.addEventListener('click', function (e) {\n    // 是否按下大写键\n    console.log(e.getModifierState('CapsLock'));\n}, false);\n")),Object(a.b)("h3",{id:"wheelevent-接口"},"WheelEvent 接口"),Object(a.b)("p",null,"WheelEvent 接口继承了 MouseEvent 实例，代表鼠标滚轮事件的实例对象。鼠标滚轮事件目前只有一个",Object(a.b)("inlineCode",{parentName:"p"},"wheel"),"事件。"),Object(a.b)("p",null,"浏览器原生提供了",Object(a.b)("inlineCode",{parentName:"p"},"WheelEvent()"),"构造函数，用来生成",Object(a.b)("inlineCode",{parentName:"p"},"WheelEvent"),"实例。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var wheelEvent = new WheelEvent(type, options)\n")),Object(a.b)("p",null,"type 是事件类型，目前只能是",Object(a.b)("inlineCode",{parentName:"p"},"wheel"),"。第二个参数是事件配置对象，它有下面属性。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deltaX"),": 数值，表示滚轮的水平滚动量，默认是0.0。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deltaY"),": 数值，表示滚轮的垂直滚动量，默认是0.0。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deltaZ"),": 数值，表示滚轮的Z轴滚动量，默认是0.0。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deltaMode"),": 数值，表示相关的滚轮事件的单位，适用于上面三个属性。",Object(a.b)("inlineCode",{parentName:"li"},"0"),"表示单位是像素，",Object(a.b)("inlineCode",{parentName:"li"},"1"),"表示单位是行，",Object(a.b)("inlineCode",{parentName:"li"},"2"),"表示单位是页，默认是",Object(a.b)("inlineCode",{parentName:"li"},"0"),"。")),Object(a.b)("h3",{id:"键盘事件"},"键盘事件"),Object(a.b)("p",null,"键盘事件继承自 KeyboardEvent 接口，主要有三个："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"keydown: 按所有键都会触发"),Object(a.b)("li",{parentName:"ul"},"keypress: 按字符集触发，用于检测用户输入了什么字符。对Ctrl、Alt、Shift、Meta 键无效。"),Object(a.b)("li",{parentName:"ul"},"keyup: 松开键盘时触发")),Object(a.b)("p",null,"如果用户一直按着键盘，会连续触发键盘事件，顺序为",Object(a.b)("inlineCode",{parentName:"p"},"keydown -> keypress -> keydown -> keypress ... -> keyup"),"。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"新建键盘事件")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"new KeyboardEvent(type, options)\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"type: 事件类型"),Object(a.b)("li",{parentName:"ul"},"options: 除了 Event 接口的属性，还有",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"key: 字符串，当前按下的键，默认为''。"),Object(a.b)("li",{parentName:"ul"},"code: 字符串，当前按下键的字符串形式，默认为''。"),Object(a.b)("li",{parentName:"ul"},"location: 整数，当前按下的键的位置，默认为 0。"),Object(a.b)("li",{parentName:"ul"},"ctrlKey: 是否按下 Ctrl 键，默认为false"),Object(a.b)("li",{parentName:"ul"},"shiftKey"),Object(a.b)("li",{parentName:"ul"},"altKey"),Object(a.b)("li",{parentName:"ul"},"metaKey"),Object(a.b)("li",{parentName:"ul"},"repeat: 是否重复按键，默认为 false")))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"KeyboardEvent 实例属性")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"e.ctrlKey"),Object(a.b)("li",{parentName:"ul"},"e.altKey"),Object(a.b)("li",{parentName:"ul"},"e.shiftKey"),Object(a.b)("li",{parentName:"ul"},"e.metaKey"),Object(a.b)("li",{parentName:"ul"},"e.key: 按下的键名，返回字符串，如",Object(a.b)("inlineCode",{parentName:"li"},"a"),"，如果无法识别，则返回字符串",Object(a.b)("inlineCode",{parentName:"li"},"Unidentified"),"。"),Object(a.b)("li",{parentName:"ul"},"e.keyCode: 已废弃。"),Object(a.b)("li",{parentName:"ul"},"e.code: ",Object(a.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values"}),"当前按键的字符串形式"),"，如",Object(a.b)("inlineCode",{parentName:"li"},"KeyA"),"。"),Object(a.b)("li",{parentName:"ul"},"e.location: 返回一个整数，表示按下的键的位置。",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"0: 主区域，或者无法判断在哪"),Object(a.b)("li",{parentName:"ul"},"1: 键盘的左侧，只适用哪些有两个位置的键(如 Ctrl 和 Shift)"),Object(a.b)("li",{parentName:"ul"},"2: 键盘的右侧，只适用哪些有两个位置的键(如 Ctrl 和 Shift)"),Object(a.b)("li",{parentName:"ul"},"3: 处于数字小键盘"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"e.repeat"),": 布尔值，表示用户是否按着不放"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"e.getModifierState()"),": 表示是否按下或激活指定的功能键。常用参数如下：",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Alt")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"CapsLock"),": 大写锁定键"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Control"),": Ctrl 键"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Meta")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"NumLock"),": 数字键盘开关"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Shift"))))),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"if (\n  event.getModifierState('Control') +\n  event.getModifierState('Alt') +\n  event.getModifierState('Meta') > 1\n) {\n  return;\n}\n")),Object(a.b)("p",null,"上面代码中，只要 Ctrl、Alt、Meta ，同时按下两个键，就返回。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"键盘事件的兼容性问题")),Object(a.b)("p",null,"在IE中，只有一个keyCode属性，并且它的解释取决于事件类型。对于keydown来说，keyCode存储的是按键码，对于 keypress事件来说，keyCode存储的是一个字符码。而IE中没有which和charCode属性，所以which和charCode属性始终为undefined。"),Object(a.b)("p",null,"FireFox中keyCode始终为0，时间keydown/keyup时，charCode=0，which为按键码。事件keypress时，which和charCode二者的值相同，存储了字符码。"),Object(a.b)("p",null,"在Opera中，keyCode和which二者的值始终相同，在keydown/keyup事件中，它们存储按键码，在keypress时间中，它们存储字符码，而charCode没有定义，始终是undefined。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"let key = e.key || e.keyCode || e.which\n")),Object(a.b)("h3",{id:"进度事件"},"进度事件"),Object(a.b)("p",null,"进度事件主要用于 ajax 或 底层资源的加载，如",Object(a.b)("inlineCode",{parentName:"p"},"<img>"),", ",Object(a.b)("inlineCode",{parentName:"p"},"<audio>"),", ",Object(a.b)("inlineCode",{parentName:"p"},"<video>"),", ",Object(a.b)("inlineCode",{parentName:"p"},"<style>"),"，",Object(a.b)("inlineCode",{parentName:"p"},"<link>"),"。继承自",Object(a.b)("inlineCode",{parentName:"p"},"ProgressEvent"),"接口。它主要有下几个事件。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"abort"),Object(a.b)("li",{parentName:"ul"},"error"),Object(a.b)("li",{parentName:"ul"},"load"),Object(a.b)("li",{parentName:"ul"},"loadstart"),Object(a.b)("li",{parentName:"ul"},"loadend"),Object(a.b)("li",{parentName:"ul"},"progress"),Object(a.b)("li",{parentName:"ul"},"timeout")),Object(a.b)("p",null,"除了资源下载，文件上传也存在这些事件。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"ProgressEvent 接口")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"new ProgressEvent(type, options)\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"lengthComputable: 布尔值，表示加载的总量是否可以计算，默认是 false。"),Object(a.b)("li",{parentName:"ul"},"loaded: 整数，表示已经加载的量，默认是 0。"),Object(a.b)("li",{parentName:"ul"},"total: 整数，表示已经加载的总量，默认是 0。")),Object(a.b)("p",null,"如果",Object(a.b)("inlineCode",{parentName:"p"},"ProgressEvent.lengthComputable"),"为",Object(a.b)("inlineCode",{parentName:"p"},"false"),"，",Object(a.b)("inlineCode",{parentName:"p"},"ProgressEvent.total"),"实际上是没有意义的。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var xhr = new XMLHttpRequest();\n\nxhr.addEventListener('progress', updateProgress, false);\nxhr.addEventListener('load', transferComplete, false);\nxhr.addEventListener('error', transferFailed, false);\nxhr.addEventListener('abort', transferCanceled, false);\n\nxhr.open();\n\nfunction updateProgress(e) {\n  if (e.lengthComputable) {\n    var percentComplete = e.loaded / e.total;\n  } else {\n    console.log('不能计算进度');\n  }\n}\n\nfunction transferComplete(e) {\n  console.log('传输结束');\n}\n\nfunction transferFailed(evt) {\n  console.log('传输过程中发生错误');\n}\n\nfunction transferCanceled(evt) {\n  console.log('用户取消了传输');\n}\n")),Object(a.b)("p",null,"上面是下载过程的进度事件，上传过程的进度可以通过",Object(a.b)("inlineCode",{parentName:"p"},"xhr.upload"),"对象来监听。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var xhr = new XMLHttpRequest();\n\nxhr.upload.addEventListener('progress', updateProgress, false);\nxhr.upload.addEventListener('load', transferComplete, false);\nxhr.upload.addEventListener('error', transferFailed, false);\nxhr.upload.addEventListener('abort', transferCanceled, false);\n\nxhr.open();\n")),Object(a.b)("h3",{id:"表单事件"},"表单事件"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"input 事件")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件，当",Object(a.b)("inlineCode",{parentName:"p"},"<input>"),"、",Object(a.b)("inlineCode",{parentName:"p"},"<select>"),"、",Object(a.b)("inlineCode",{parentName:"p"},"<textarea>"),"的值发生变化时触发。对于复选框和单选框，用户改变选项时，也会触发这个事件。另外，对于 contenteditable 为 true 的元素，只要值发生变化，也就触发",Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件继承自",Object(a.b)("inlineCode",{parentName:"p"},"inputEvent"),"接口。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件和",Object(a.b)("inlineCode",{parentName:"p"},"change"),"事件的区别是，",Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件在元素值发生变化后立即触发，而",Object(a.b)("inlineCode",{parentName:"p"},"change"),"在元素失去焦点时发生。",Object(a.b)("inlineCode",{parentName:"p"},"input"),"事件必然伴随",Object(a.b)("inlineCode",{parentName:"p"},"change"),"事件。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"select 事件")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"select"),"事件，在",Object(a.b)("inlineCode",{parentName:"p"},"<input>"),"、",Object(a.b)("inlineCode",{parentName:"p"},"<textarea>"),"里面选中文本时触发。"),Object(a.b)("p",null,"选中文本可以通过事件对象的",Object(a.b)("inlineCode",{parentName:"p"},"selectionDirection"),"、",Object(a.b)("inlineCode",{parentName:"p"},"selectionEnd"),"、",Object(a.b)("inlineCode",{parentName:"p"},"selectionStart"),"和",Object(a.b)("inlineCode",{parentName:"p"},"value"),"属性拿到。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"change 事件")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"change"),"事件，当",Object(a.b)("inlineCode",{parentName:"p"},"<input>"),"、",Object(a.b)("inlineCode",{parentName:"p"},"<select>"),"、",Object(a.b)("inlineCode",{parentName:"p"},"<textarea>"),"的值发生变化时触发。具体如下："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"激活 radio 或 checkbox 时触发。"),Object(a.b)("li",{parentName:"ul"},"用户提交时触发，如在",Object(a.b)("inlineCode",{parentName:"li"},"<select>"),"下拉列表完成选择，在日期或文件输入框完成选择。"),Object(a.b)("li",{parentName:"ul"},"当文本框或",Object(a.b)("inlineCode",{parentName:"li"},"<textarea>"),"元素的值发生改变，并且丧失焦点时触发。")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"invalid 事件")),Object(a.b)("p",null,"用户提交表单时，如果表单的值不满足校验条件，就会触发",Object(a.b)("inlineCode",{parentName:"p"},"invalid"),"事件。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),'<form>\n  <input type="text" required oninvalid="console.log(\'invalid input\')" />\n  <button type="submit">提交</button>\n</form>\n')),Object(a.b)("p",null,"上面代码中，输入框是必填的。如果不填，用户点击按钮提交时，就会触发输入框的invalid事件，导致提交被取消。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"reset 事件，submit 事件")),Object(a.b)("p",null,"这两个事件发生在表单对象",Object(a.b)("inlineCode",{parentName:"p"},"<form>"),"上，而不是发生在表单的成员上。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"reset"),"事件当表单重置时触发。",Object(a.b)("inlineCode",{parentName:"p"},"submit"),"事件当表单数据向服务器提交时触发，注意它的发生对象时",Object(a.b)("inlineCode",{parentName:"p"},"<form>"),"，而不是",Object(a.b)("inlineCode",{parentName:"p"},"<button>"),"。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"InputEvent 接口")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{}),"new InputEvent(type, options)\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"InputEvent"),"实例属性主要有："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"data"),": 表示改动的内容。如果手动在输入框里面输入",Object(a.b)("inlineCode",{parentName:"li"},"abc"),"，控制台会先输出",Object(a.b)("inlineCode",{parentName:"li"},"a"),"，再在下一行输出",Object(a.b)("inlineCode",{parentName:"li"},"b"),"，再在下一行输出",Object(a.b)("inlineCode",{parentName:"li"},"c"),"。然后选中",Object(a.b)("inlineCode",{parentName:"li"},"abc"),"，一次性将它们删除，控制台会输出",Object(a.b)("inlineCode",{parentName:"li"},"null"),"或一个空字符串。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"inputType"),": 返回一个字符串，表示字符串发生变更的类型。具体看",Object(a.b)("a",l({parentName:"li"},{href:"https://w3c.github.io/input-events/index.html#dom-inputevent-inputtype"}),"文档"),"，对于常见类型，Chrome 浏览器返回值如下：",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"insertText"),": 手动插入文本"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"insertFromPaste"),": 粘贴插入文本"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deleteContentBackward"),": 向后删除"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"deleteContentForward"),": 向前删除"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"dataTransfer"),": 该属性只在文本框接收粘贴内容(insertFromPaste)或拖拽内容(insertFromDrop)时有效。")),Object(a.b)("h3",{id:"触摸事件"},"触摸事件"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Touch 接口")),Object(a.b)("p",null,"Touch 接口表示单个触摸点，触摸可能是一个手指，或一根触摸笔。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"var touch = new Touch(touchOptions)\n")),Object(a.b)("p",null,"touchOptions 配置如下："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"identifier"),": 必需，类型是整数，表示触摸点的唯一 ID。")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"TouchList 接口"),"\n",Object(a.b)("strong",{parentName:"p"},"TouchEvent 接口")),Object(a.b)("h3",{id:"拖拉事件"},"拖拉事件"),Object(a.b)("p",null,"在网页中，除了元素节点默认不可以拖拉，其它(图片、链接、选中的文字)都可以拖拉。如果要让元素可以拖拉，可以设置",Object(a.b)("inlineCode",{parentName:"p"},"draggable"),"属性为",Object(a.b)("inlineCode",{parentName:"p"},"true"),"。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),'<div draggable="true">此区域可拖拉</div>\n')),Object(a.b)("p",null,"要注意，给默认可以拖拉的元素设置",Object(a.b)("inlineCode",{parentName:"p"},"draggable"),"为",Object(a.b)("inlineCode",{parentName:"p"},"false"),"，该元素还是可以拖拉。"),Object(a.b)("h3",{id:"其它常见事件"},"其它常见事件"),Object(a.b)("h2",{id:"jquery事件绑定"},"jQuery事件绑定"),Object(a.b)("h3",{id:"简介"},"简介"),Object(a.b)("p",null,"jQuery 事件绑定主要有下面几个 API。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"bind"),"、",Object(a.b)("inlineCode",{parentName:"li"},"unbind()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"delegate()"),"、",Object(a.b)("inlineCode",{parentName:"li"},"undelegate()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"on()"),"、",Object(a.b)("inlineCode",{parentName:"li"},"off()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"one()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"trigger()"),"、",Object(a.b)("inlineCode",{parentName:"li"},"triggerHandler()"))),Object(a.b)("p",null,"其中",Object(a.b)("inlineCode",{parentName:"p"},"bind"),"、",Object(a.b)("inlineCode",{parentName:"p"},"live"),"、",Object(a.b)("inlineCode",{parentName:"p"},"delegate"),"都是通过 on 实现的。",Object(a.b)("inlineCode",{parentName:"p"},"unbind"),"、",Object(a.b)("inlineCode",{parentName:"p"},"undelegate"),"都是通过 off 实现的。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},".bind()")),Object(a.b)("p",null,"直接给元素绑定事件处理程序，没有利用事件委托。3.0 已废弃。"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},".live() []")),Object(a.b)("p",null,"1.7 已废弃，它的作用是将事件处理程序委托绑定到 document 上，从而简化使用。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"$('a').live('click', function() { alert(\"!!!\") });\n")),Object(a.b)("p",null,"这个方法的缺点是："),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"调用 live() 前，jQuery 会搜索匹配元素，这一点对大型文档比较耗时。"),Object(a.b)("li",{parentName:"ol"},'不支持链式写法。$("a").find(".offsite, .external").live( ... ) 是不支持的。'),Object(a.b)("li",{parentName:"ol"},"由于添加在 document 上，事件传播链较长，所以事件处理程序的触发较慢。")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},".delegate()")," "),Object(a.b)("p",null,"利用事件委托绑定事件处理程序。jQuery 扫描文档，查找",Object(a.b)("inlineCode",{parentName:"p"},"#element"),"，并使用 click 事件和 a 选择器将事件处理函数绑定到 ",Object(a.b)("inlineCode",{parentName:"p"},"#element"),"上，只要有事件冒泡到",Object(a.b)("inlineCode",{parentName:"p"},"#element"),"，它就查看该事件是否是 click，该事件目标元素是否是 a，如果都匹配，则执行事件处理程序。"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"$('#element).delegate('a', 'click', function() {  });\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},".on()")),Object(a.b)("h2",{id:"参考资料"},"参考资料"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/Events"}))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"https://www.cnblogs.com/aaronjs/p/3279314.html"}),"jQuery源码分析系列(17 - 22) 事件绑定")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"https://www.html.cn/jqapi-1.9/"}),"jquery 1.9 API中文文档"))))}o.isMDXComponent=!0},249:function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return d});var a=n(0),l=n.n(a),b=l.a.createContext({}),i=function(e){var t=l.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},r=function(e){var t=i(e.components);return l.a.createElement(b.Provider,{value:t},e.children)};var c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},o=function(e){var t=e.components,n=e.mdxType,a=e.originalType,b=e.parentName,r=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),c=i(t),o=n,d=c[b+"."+o]||c[o]||p[o]||a;return t?l.a.createElement(d,Object.assign({},r,{components:t})):l.a.createElement(d,r)};function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,i=new Array(b);i[0]=o;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[c]="string"==typeof e?e:a,i[1]=r;for(var d=2;d<b;d++)i[d]=n[d];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,n)}o.displayName="MDXCreateElement"}}]);