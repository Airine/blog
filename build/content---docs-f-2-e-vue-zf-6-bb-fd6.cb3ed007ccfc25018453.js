(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{275:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return i}),t.d(n,"rightToc",function(){return s}),t.d(n,"default",function(){return c});t(0);var r=t(301);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i={title:"vue 知识点",sidebar_label:"知识点"},s=[{value:"响应式原理",id:"响应式原理",children:[{value:"响应式对象",id:"响应式对象",children:[]},{value:"依赖收集",id:"依赖收集",children:[]}]}],l={rightToc:s},p="wrapper";function c(e){var n=e.components,t=o(e,["components"]);return Object(r.b)(p,a({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"前端最重要的两个工作:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"数据渲染到页面"),Object(r.b)("li",{parentName:"ol"},"处理用户交互")),Object(r.b)("h2",{id:"响应式原理"},"响应式原理"),Object(r.b)("p",null,"修改 this.msg 时，视图 {{message}} 变化？"),Object(r.b)("p",null,"如果不用 vue，我们会监听事件，修改数据，手动渲染 dom。它和 vue 的区别就是手动渲染 dom。问题是："),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"修改哪块 dom?"),Object(r.b)("li",{parentName:"ol"},"手动渲染 dom 效率和性能最高？"),Object(r.b)("li",{parentName:"ol"},"每次数据修改都修改 dom?"),Object(r.b)("li",{parentName:"ol"},"需要针对每个项目都这样修改 dom 逻辑？")),Object(r.b)("h3",{id:"响应式对象"},"响应式对象"),Object(r.b)("p",null,"Object.defineProperty 只支持 ie8+。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"Object.defineProperty(obj, prop, descriptor)\n\nconfigurable\nenumerable\nget() set()\nwritable value\n")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"function _init(){\n    initState(vm)\n}\nfunction initState(vm){\n    initProps()\n    initMethods()\n    initData()\n    initComputed()\n    initWatch()\n}\nfunction initProps(){\n    const keys = vm.$options._propKeys = []\n    const props = vm._props = {}\n    for(const key in propsOptions){\n        keys.push(key)\n        value = validateProp()\n        defineReactive(props, key, value)  // 将 props 变成响应式\n        proxy(vm, `_props`, key)  //  vm.x = vm._props.x  这样就可以通过 this.msg 访问到 props上的属性\n    }\n}\nfunction initData(vm){\n    let data = vm.$options.data\n    data = vm._data = typeof data === 'function' ? getData() : data || {}\n    if (!isPlainObject(data)) { data = {} }   // 保证data是{}基本对象类型\n\n    let i = keys.length\n    while(i--){\n        if(hasOwn(methods, key)){ warn(`已经在 data 里定义了`) }\n        if(hasOwn(props, key)){ warn(`在 props 重复声明了，用 prop default value代替`) }\n        const key = keys[i]\n        proxy(vm, `_data`, key)\n    }\n    observe(data, true)  // 观测 data 的变化\n}\nconst sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: noop,   // noop 就是空函数 ()=>{}\n    set: noop\n}\nfunction proxy(target, sourceKey, key){\n    sharedPropertyDefinition.get = function proxyGetter(){\n        return this[sourceKey][key]\n    }\n    sharedPropertyDefinition.set = function proxySetter(val){\n        this[sourceKey][key] = val\n    }\n    // proxy(vm, `_data`, key)  \n    // 就相当于 vm[key] = {get(){return vm._data[key],set(val){ vm._data[key] = val} }\n    Object.defineProperty(target, key, sharedPropertyDefinition)\n}\nfunction observe(value, asRootData){\n    // 非对象或 是VNode对象 直接返回\n    if(!isObject(value) || value instanceof VNode) return \n\n    let ob\n    if(hasOwn(value, '__ob__') && value.__ob__ instanceof Observer){\n        ob = value.__ob__\n    }else{\n        ob = new Observer(value)\n    }\n    if(asRootData && ob){\n        ob.vmCount ++\n    }\n    return ob\n}\n\n// 给对象添加 getter 和 setter，用于依赖收集和派发更新\nclass Observer{\n    constructor(value){\n        this.value = value\n        this.dep = new Dep()\n        this.vmCount = 0\n        def(value, '__ob__', this) // vm.$options.data.__ob__ = this\n        if(Array.isArray(value)){\n            this.observeArray(value)\n        }else{\n            this.walk(value)\n        }\n    }\n    walk(obj){\n        const keys = Object.keys(obj)\n        for(let i=0;i<keys.length;i++){\n            defineReactive(obj, keys[i])\n        }\n    }\n    observeArray(items){\n        for(let i=0,l=items.length;i<l;i++){\n            observe(items[i])  \n        }\n    }\n}\nfunction defineReactive(obj, key, value){\n    const dep = new Dep()\n\n    // 如果不可配置，直接返回\n    const property = Object.getOwnPropertyDescriptor(obj, key)\n    if(property && property.configurable === false){\n        return \n    }\n\n    // 迎合预定义的 getter 和 setter\n\n    // 响应式 \n    Object.defineProperty(obj, key, {\n        get(){\n            const value = getter ? getter.call(obj) : val\n            if(Dep.target){\n                dep.depend()\n                if(childOb){\n                    childOb.dep.depend()\n                    if(Array.isArray(value)){\n                        dependArray(value)\n                    }\n                }\n            }\n            return value\n        },\n        set(newVal){\n            if(newVal === value || (newVal !== newVal && value !== value)) return \n\n            val = newVal\n            childOb = !shallow && observe(newVal)\n            dep.notify()\n        }\n    })\n\n}\n")),Object(r.b)("p",null,"initProps()做了2件事:\n1. 将 props 变为响应式\n2. 将每个值 vm._props.x 代理到 vm.x"),Object(r.b)("p",null,"initData()做了2件事:\n1. 把每个值 vm._data.x 代理到 vm.x\n2. observe(data)，把 data 变成响应式，可以通过 vm._data.x 访问到定义在 data 中的属性"),Object(r.b)("p",null,"proxy的作用是，将 props 和 data 上的属性代理到 vm 上，所以可以通过 this.msg 访问到 props 或 data 里的属性。"),Object(r.b)("p",null,"observer() 的作用是给非 VNode 对象添加一个 Observer，如果已经添加过，则直接返回。"),Object(r.b)("p",null,"defineReactive() 是递归整个 obj 对象，添加 getter和setter 属性。\ngetter 做依赖收集，setter 做派发更新。"),Object(r.b)("h3",{id:"依赖收集"},"依赖收集"),Object(r.b)("p",null,"Dep "),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"let uid = 0\nclass Dep{\n    constructor(){\n        this.id = uid++\n        this.subs = []\n    }\n    addSub(sub){\n        this.subs.push(sub)\n    }\n    removeSub(sub){\n        remove(this.subs, sub)\n    }\n    depend(){\n        if(Dep.target){\n            Dep.target.addDep(this)\n        }\n    }\n    notify(){\n        const subs = this.subs.slice()\n        for(let i = 0, l = subs.length;i < l; i++){\n            subs[i].update()\n        }\n    }\n}\nDep.target = null \nconst targetStack = []\nfunction pushTarget(_target){\n    if(Dep.target) targetStack.push(Dep.target)\n    Dep.target = _target\n}\nfunction popTarget(){\n    Dep.target = targetStack.pop()\n}\n")),Object(r.b)("p",null,"Dep 实际是对 Watcher 的管理。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),"class Watcher {\n\n}\n")))}c.isMDXComponent=!0},301:function(e,n,t){"use strict";t.d(n,"a",function(){return s}),t.d(n,"b",function(){return u});var r=t(0),a=t.n(r),o=a.a.createContext({}),i=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},s=function(e){var n=i(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},c=function(e){var n=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,s=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),l=i(n),c=t,u=l[o+"."+c]||l[c]||p[c]||r;return n?a.a.createElement(u,Object.assign({},s,{components:n})):a.a.createElement(u,s)};function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[l]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);