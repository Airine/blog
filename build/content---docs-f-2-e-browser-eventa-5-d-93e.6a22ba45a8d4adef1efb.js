(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return r}),n.d(t,"default",function(){return o});n(0);var l=n(245);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},b=Object.keys(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={title:"浏览器事件机制",sidebar_label:"事件机制"},r=[{value:"事件绑定",id:"事件绑定",children:[{value:"addEventListener",id:"addeventlistener",children:[]}]},{value:"事件传播",id:"事件传播",children:[]},{value:"阻止事件传播",id:"阻止事件传播",children:[]},{value:"阻止默认事件",id:"阻止默认事件",children:[{value:"创建与触发自定义事件",id:"创建与触发自定义事件",children:[]}]},{value:"事件委托",id:"事件委托",children:[]},{value:"鼠标事件",id:"鼠标事件",children:[{value:"MouseEvent接口",id:"mouseevent接口",children:[]},{value:"WheelEvent 接口",id:"wheelevent-接口",children:[]},{value:"键盘事件",id:"键盘事件",children:[]},{value:"进度事件",id:"进度事件",children:[]},{value:"表单事件",id:"表单事件",children:[]},{value:"触摸事件",id:"触摸事件",children:[]},{value:"拖拉事件",id:"拖拉事件",children:[]},{value:"其它常见事件",id:"其它常见事件",children:[]}]},{value:"jQuery事件绑定",id:"jquery事件绑定",children:[{value:"简介",id:"简介",children:[]}]},{value:"参考资料",id:"参考资料",children:[]}],c={rightToc:r},p="wrapper";function o(e){var t=e.components,n=b(e,["components"]);return Object(l.b)(p,a({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"事件绑定"},"事件绑定"),Object(l.b)("p",null,"与事件绑定相关的方法有："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"addEventListener()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"removeEventListener()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dispatchEvent()"))),Object(l.b)("h3",{id:"addeventlistener"},"addEventListener"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"addEventListener(type, listener, useCapture)\n")),Object(l.b)("p",null,"addEventListener 方法的参数如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"type <String>"),": 事件名"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"listener <Function>"),": 事件处理程序"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"useCapture <Boolean|Object>"),": 是否冒泡，这个参数还可以是一个对象，它有属性：",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"capture"),":布尔值，是否冒泡"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"once"),":布尔值，是否只触发一次"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"passive"),": 布尔值，设为 true 时，表示事件处理程序 listener 永远不会调用",Object(l.b)("inlineCode",{parentName:"li"},"preventDefault()"),"，如果 listener 还是调用了",Object(l.b)("inlineCode",{parentName:"li"},"preventDefault()"),"，客户端将忽略它并抛出一个控制台警告。")))),Object(l.b)("h2",{id:"事件传播"},"事件传播"),Object(l.b)("p",null,"事件的传播分为三个阶段：捕获(从 window 到目标元素)、到达目标元素、冒泡(从目标元素到 window)。"),Object(l.b)("p",null,"要注意的是，给目标元素同时绑定捕获或冒泡事件，会按照绑定的顺序执行。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"target.addEventListener('click', e => console.log(\"冒泡\") , false)\ntarget.addEventListener('click', e => console.log(\"捕获\") , true)\n")),Object(l.b)("p",null,"上面代码，点击 target，将依次输出",Object(l.b)("inlineCode",{parentName:"p"},"冒泡"),"、",Object(l.b)("inlineCode",{parentName:"p"},"捕获"),"。"),Object(l.b)("h2",{id:"阻止事件传播"},"阻止事件传播"),Object(l.b)("p",null,"阻止事件传播的方法有 2 个："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"stopPropagation()"),": 这个方法会阻止当前绑定的事件传播，不会阻止其它的同名事件传播。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"stopImmediatePropagation()"),": 这个方法会阻止当前绑定事件的传播，以及之后绑定事件的传播。")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var b = document.body\n\ndocument.addEventListener('click', (e) => {\n    console.log('document capture')\n}, true)\n\ndocument.addEventListener('click', (e) => {\n    console.log('document bubble')\n}, false)\n\nb.addEventListener('click', (e) => {\n    console.log('body click 0')\n}, false)\n\nb.addEventListener('click', (e) => {\n    // e.stopPropagation()\n    e.stopImmediatePropagation()\n    console.log('body click 1')\n}, false)\n\nb.addEventListener('click', (e) => {\n    console.log('body click 2')\n}, false)\n\n// 如果使用 e.stopPropagation()，将输出\n// document capture\n// body click 0\n// body click 1\n// body click 2\n\n// 如果使用 e.stopImmediatePropagation()，将输出\n// document capture\n// body click 0\n// body click 1\n")),Object(l.b)("p",null,"上面的例子中，如果使用",Object(l.b)("inlineCode",{parentName:"p"},"e.stopImmediatePropagation()"),"，不会输出",Object(l.b)("inlineCode",{parentName:"p"},"body click 2"),"，也就是将自身后面写的事件也阻止了。"),Object(l.b)("p",null,"另外，要注意它是阻止冒泡，并没有阻止捕获。所以",Object(l.b)("inlineCode",{parentName:"p"},"document capture"),"总是会输出的。"),Object(l.b)("h2",{id:"阻止默认事件"},"阻止默认事件"),Object(l.b)("p",null,"默认事件就是浏览器自带的一些事件。比如鼠标右键时会打开菜单，选中文字后可以按住拖动等。有时候，这些默认事件会影响我们的开发，所以需要阻止它。"),Object(l.b)("p",null,"阻止默认事件的方法是使用事件对象的",Object(l.b)("inlineCode",{parentName:"p"},"preventDefault()"),"方法。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"b.addEventListener('contextmenu', (e) => {\n    console.log('body click 1')\n    e.preventDefault()\n}, false)\n")),Object(l.b)("p",null,"上面例子中，禁止了右键菜单，所以鼠标右键点击时，不再出现菜单。"),Object(l.b)("h3",{id:"创建与触发自定义事件"},"创建与触发自定义事件"),Object(l.b)("p",null,"自定义事件的创建触发流程如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var event = new Event('build')\nelement.addEventListener('build', (e)=>{}, false)\nelement.dispatch(event)\n")),Object(l.b)("p",null,"上面例子，创建了一个 build 事件，然后给 element 元素注册 build 事件函数，最后使用 dispatch 触发。"),Object(l.b)("p",null,"如果需要在事件函数中传递数据，则需要使用 CustomEvent 的 detail 属性。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var event = new CustomEvent('build', {detail: element.dataset.time})\nfunction eventHandler(e){\n    console.log(e.detail)\n}\n")),Object(l.b)("p",null,"下面这个例子，可以将子元素事件冒泡给父级，并传递数据。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"// html 结构\n// <form>\n//   <textarea></textarea>\n// </form>\n\nconst form = document.querySelector('form');\nconst textarea = document.querySelector('textarea');\n\n// 创建事件，允许冒泡，并传递数据\nconst eventAwesome = new CustomEvent('awesome', {\n  bubbles: true,\n  detail: { text: () => textarea.value }\n});\n\nform.addEventListener('awesome', e => console.log(e.detail.text()));\n\ntextarea.addEventListener('input', e => e.target.dispatchEvent(eventAwesome));\n// 或使用 function this\n// textarea.addEventListener('input', function(e){\n//     this.dispatchEvent(new CustomEvent('awesome', { \n//         bubbles: true, detail: { text: () => textarea.value } \n//     }))\n// });\n")),Object(l.b)("h2",{id:"事件委托"},"事件委托"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"// 给100个li元素绑定事件\nfor(let i = 0; i < li.length; i++){\n    li.addEventListener('click', handler, false)\n}\n")),Object(l.b)("p",null,"上面例子中，在给大量元素(如列表",Object(l.b)("inlineCode",{parentName:"p"},"<li>"),")绑定事件时，传统的事件绑定会有一些问题："),Object(l.b)("ol",{start:0},Object(l.b)("li",{parentName:"ol"},"大量事件绑定，消耗性能，而且 IE 还需要解绑，否则会内存泄露。"),Object(l.b)("li",{parentName:"ol"},"绑定元素必须存在，后期插入的元素，需要重新绑定事件。"),Object(l.b)("li",{parentName:"ol"},"语法过于复杂")),Object(l.b)("p",null,"优化的办法就是使用",Object(l.b)("inlineCode",{parentName:"p"},"事件委托"),"。事件委托就是将事件处理函数绑定在目标对象的父级或祖先级节点上，目标对象的事件会通过冒泡或捕获传递给它。主要的好处是："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"新增子节点时，无需再重新绑定事件"),Object(l.b)("li",{parentName:"ul"},"节省内存")),Object(l.b)("p",null,"不足点是："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"并非所有的事件都能冒泡，如",Object(l.b)("inlineCode",{parentName:"li"},"load"),"、",Object(l.b)("inlineCode",{parentName:"li"},"change"),"、",Object(l.b)("inlineCode",{parentName:"li"},"submit"),"、",Object(l.b)("inlineCode",{parentName:"li"},"focus"),"、",Object(l.b)("inlineCode",{parentName:"li"},"blur"),"。"),Object(l.b)("li",{parentName:"ul"},"加大管理复杂。"),Object(l.b)("li",{parentName:"ul"},"不好模拟用户触发事件。")),Object(l.b)("h2",{id:"鼠标事件"},"鼠标事件"),Object(l.b)("h3",{id:"mouseevent接口"},"MouseEvent接口"),Object(l.b)("p",null,"鼠标事件继承自",Object(l.b)("inlineCode",{parentName:"p"},"MouseEvent"),"接口，具体事件主要有："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"click"),": 点击鼠标主键时触发。鼠标点击时，事件触发顺序是",Object(l.b)("inlineCode",{parentName:"li"},"mousedown"),"->",Object(l.b)("inlineCode",{parentName:"li"},"mouseup"),"->",Object(l.b)("inlineCode",{parentName:"li"},"click"),"。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dblclick"),": 双击鼠标时触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mousedown"),": 鼠标键按下时触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mouseup"),": 鼠标键抬起时触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mousemove"),": 鼠标移动时触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mouseenter"),": 鼠标移动进入节点时触发，进入子节点不会触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mouseleave"),": 鼠标离开节点时触发"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mouseover"),": 鼠标进入节点时触发，进入子节点会再次触发。（记忆方法，over、out，两个o是一对）。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mouseout"),": 鼠标离开节点时触发，离开子节点会再次触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"contextmenu"),"：鼠标右键时触发。或按下上下文菜单键时触发。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wheel"),": 滚动鼠标的滚轮时触发，该事件继承自",Object(l.b)("inlineCode",{parentName:"li"},"WheelEvent"),"接口。")),Object(l.b)("p",null,"鼠标事件对象，是",Object(l.b)("inlineCode",{parentName:"p"},"MouseEvent"),"的实例。它的主要属性如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"altKey")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ctrlKey")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"metaKey"),": meta 键是否按下(mac 是 command 键，windows 是 windows 键)。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"shiftKey")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"button"),": 表示鼠标按下的哪个键，0是主键，或事件没有初始化这个属性(如 mousemove)，1是辅助键(中键或滚轮键)，2是次键。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"buttons"),": 返回三个 bit 的值，表示同时按下了哪些键。1(",Object(l.b)("inlineCode",{parentName:"li"},"001"),")表示按下左键，2(",Object(l.b)("inlineCode",{parentName:"li"},"010"),")表示按下右键，4(",Object(l.b)("inlineCode",{parentName:"li"},"100"),")表示按下中键或滚轮键。所以 3(",Object(l.b)("inlineCode",{parentName:"li"},"011"),")表示同时按下左键和右键。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"clientX"),"、",Object(l.b)("inlineCode",{parentName:"li"},"clientY"),": 鼠标举例浏览器窗口左上角的位置，单位是像素。它们还有别名",Object(l.b)("inlineCode",{parentName:"li"},"x"),"、",Object(l.b)("inlineCode",{parentName:"li"},"y"),"。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"movementX"),"、",Object(l.b)("inlineCode",{parentName:"li"},"movementY"),": 返回当前位置与上一个",Object(l.b)("inlineCode",{parentName:"li"},"mousemove"),"事件的距离。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"screenX"),"、",Object(l.b)("inlineCode",{parentName:"li"},"screenY"),": 返回鼠标相对于屏幕左上角的位置。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"offsetX"),"、",Object(l.b)("inlineCode",{parentName:"li"},"offsetY"),": 返回鼠标与目标节点左上角的 padding 外边缘的距离(包括 padding)。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pageX"),"、",Object(l.b)("inlineCode",{parentName:"li"},"pageY"),": 返回鼠标与文档的距离，即包括滚动条。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"relatedTarget"),": 返回事件的相关节点。对于没有相关节点的事件，该属性返回 null。个人理解为副相关节点。具体如下。")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",a({parentName:"tr"},{align:null}),"事件名"),Object(l.b)("th",a({parentName:"tr"},{align:null}),"target"),Object(l.b)("th",a({parentName:"tr"},{align:null}),"relatedTarget"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"focusin"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"获得焦点的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"失去焦点的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"focusout"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"失去焦点的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"获得焦点的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"mouseenter"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"mouseleave"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"mouseover"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"mouseout"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"dragenter"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),"dragexit"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要离开的元素"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"将要进入的元素")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"getModifierState()"),": 返回有没有按下特定的功能键，参数是一个",Object(l.b)("a",a({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#Modifier_keys_on_Gecko"}),"功能键字符串"),"。")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"document.addEventListener('click', function (e) {\n    // 是否按下大写键\n    console.log(e.getModifierState('CapsLock'));\n}, false);\n")),Object(l.b)("h3",{id:"wheelevent-接口"},"WheelEvent 接口"),Object(l.b)("p",null,"WheelEvent 接口继承了 MouseEvent 实例，代表鼠标滚轮事件的实例对象。鼠标滚轮事件目前只有一个",Object(l.b)("inlineCode",{parentName:"p"},"wheel"),"事件。"),Object(l.b)("p",null,"浏览器原生提供了",Object(l.b)("inlineCode",{parentName:"p"},"WheelEvent()"),"构造函数，用来生成",Object(l.b)("inlineCode",{parentName:"p"},"WheelEvent"),"实例。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var wheelEvent = new WheelEvent(type, options)\n")),Object(l.b)("p",null,"type 是事件类型，目前只能是",Object(l.b)("inlineCode",{parentName:"p"},"wheel"),"。第二个参数是事件配置对象，它有下面属性。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deltaX"),": 数值，表示滚轮的水平滚动量，默认是0.0。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deltaY"),": 数值，表示滚轮的垂直滚动量，默认是0.0。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deltaZ"),": 数值，表示滚轮的Z轴滚动量，默认是0.0。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deltaMode"),": 数值，表示相关的滚轮事件的单位，适用于上面三个属性。",Object(l.b)("inlineCode",{parentName:"li"},"0"),"表示单位是像素，",Object(l.b)("inlineCode",{parentName:"li"},"1"),"表示单位是行，",Object(l.b)("inlineCode",{parentName:"li"},"2"),"表示单位是页，默认是",Object(l.b)("inlineCode",{parentName:"li"},"0"),"。")),Object(l.b)("h3",{id:"键盘事件"},"键盘事件"),Object(l.b)("h3",{id:"进度事件"},"进度事件"),Object(l.b)("h3",{id:"表单事件"},"表单事件"),Object(l.b)("h3",{id:"触摸事件"},"触摸事件"),Object(l.b)("h3",{id:"拖拉事件"},"拖拉事件"),Object(l.b)("h3",{id:"其它常见事件"},"其它常见事件"),Object(l.b)("h2",{id:"jquery事件绑定"},"jQuery事件绑定"),Object(l.b)("h3",{id:"简介"},"简介"),Object(l.b)("p",null,"jQuery 事件绑定主要有下面几个 API。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"bind"),"、",Object(l.b)("inlineCode",{parentName:"li"},"unbind()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"delegate()"),"、",Object(l.b)("inlineCode",{parentName:"li"},"undelegate()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"on()"),"、",Object(l.b)("inlineCode",{parentName:"li"},"off()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"one()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"trigger()"),"、",Object(l.b)("inlineCode",{parentName:"li"},"triggerHandler()"))),Object(l.b)("p",null,"其中",Object(l.b)("inlineCode",{parentName:"p"},"bind"),"、",Object(l.b)("inlineCode",{parentName:"p"},"live"),"、",Object(l.b)("inlineCode",{parentName:"p"},"delegate"),"都是通过 on 实现的。",Object(l.b)("inlineCode",{parentName:"p"},"unbind"),"、",Object(l.b)("inlineCode",{parentName:"p"},"undelegate"),"都是通过 off 实现的。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},".bind()")),Object(l.b)("p",null,"直接给元素绑定事件处理程序，没有利用事件委托。3.0 已废弃。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},".live() []")),Object(l.b)("p",null,"1.7 已废弃，它的作用是将事件处理程序委托绑定到 document 上，从而简化使用。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"$('a').live('click', function() { alert(\"!!!\") });\n")),Object(l.b)("p",null,"这个方法的缺点是："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"调用 live() 前，jQuery 会搜索匹配元素，这一点对大型文档比较耗时。"),Object(l.b)("li",{parentName:"ol"},'不支持链式写法。$("a").find(".offsite, .external").live( ... ) 是不支持的。'),Object(l.b)("li",{parentName:"ol"},"由于添加在 document 上，事件传播链较长，所以事件处理程序的触发较慢。")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},".delegate()")," "),Object(l.b)("p",null,"利用事件委托绑定事件处理程序。jQuery 扫描文档，查找",Object(l.b)("inlineCode",{parentName:"p"},"#element"),"，并使用 click 事件和 a 选择器将事件处理函数绑定到 ",Object(l.b)("inlineCode",{parentName:"p"},"#element"),"上，只要有事件冒泡到",Object(l.b)("inlineCode",{parentName:"p"},"#element"),"，它就查看该事件是否是 click，该事件目标元素是否是 a，如果都匹配，则执行事件处理程序。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"$('#element).delegate('a', 'click', function() {  });\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},".on()")),Object(l.b)("h2",{id:"参考资料"},"参考资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",a({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/Events"}))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",a({parentName:"li"},{href:"https://www.cnblogs.com/aaronjs/p/3279314.html"}),"jQuery源码分析系列(17 - 22) 事件绑定")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",a({parentName:"li"},{href:"https://www.html.cn/jqapi-1.9/"}),"jquery 1.9 API中文文档"))))}o.isMDXComponent=!0},245:function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return d});var l=n(0),a=n.n(l),b=a.a.createContext({}),i=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},r=function(e){var t=i(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){return a.a.createElement(a.a.Fragment,{},e.children)}},o=function(e){var t=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,r=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}(e,["components","mdxType","originalType","parentName"]),c=i(t);return a.a.createElement(c[b+"."+n]||c[n]||p[n]||l,t?Object.assign({},r,{components:t}):r)};function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var b=n.length,i=new Array(b);i[0]=o;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[c]="string"==typeof e?e:l,i[1]=r;for(var d=2;d<b;d++)i[d]=n[d];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}o.displayName="MDXCreateElement"}}]);