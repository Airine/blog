(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{223:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return c}),n.d(t,"rightToc",function(){return p}),n.d(t,"default",function(){return u});n(0);var l=n(301);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},b=Object.keys(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c={title:"网络协议之 HTTPS",sidebar_label:"HTTPS"},p=[{value:"HTTP 存在的问题",id:"http-存在的问题",children:[]},{value:"TLS/SSL 介绍与工作原理",id:"tlsssl-介绍与工作原理",children:[]},{value:"PKI 体系",id:"pki-体系",children:[{value:"证书链",id:"证书链",children:[]},{value:"证书吊销",id:"证书吊销",children:[]}]},{value:"HTTPS 的工作过程",id:"https-的工作过程",children:[]},{value:"HTTPS 性能与优化",id:"https-性能与优化",children:[{value:"HTTPS性能损耗",id:"https性能损耗",children:[]},{value:"HTTPS接入优化",id:"https接入优化",children:[]}]},{value:"HTTP 和 HTTPS 区别",id:"http-和-https-区别",children:[]},{value:"重放与篡改",id:"重放与篡改",children:[]},{value:"openssl",id:"openssl",children:[]},{value:"nodejs 创建 https 服务",id:"nodejs-创建-https-服务",children:[]},{value:"参考资料",id:"参考资料",children:[]}],a={rightToc:p},i="wrapper";function u(e){var t=e.components,n=b(e,["components"]);return Object(l.b)(i,r({},a,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"HTTPS 实际就是 HTTP + TLS。"),Object(l.b)("h2",{id:"http-存在的问题"},"HTTP 存在的问题"),Object(l.b)("p",null,"我们知道 http 是明文传输的，没有隐私可言，它很容易被中间层窃听和篡改。可能遇到的问题有："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"运营商劫持，即我们的网页没加广告，但是会出现运营商广告。"),Object(l.b)("li",{parentName:"ul"},"中间层重定向到流氓网站，比如中间层可以返回 headers (或插入location.href) 重定向到流氓网站。"),Object(l.b)("li",{parentName:"ul"},"xss、csrf 攻击。因为网页都被改了，所以无法抵御这些攻击。")),Object(l.b)("p",null,"如果要体验中间层攻击的感觉，可以使用",Object(l.b)("a",r({parentName:"p"},{href:"http://anyproxy.io/cn/"}),Object(l.b)("inlineCode",{parentName:"a"},"anyproxy")),"来模拟中间层篡改网页。"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"traceroute www.baidu.com 追踪数据包在网络传输的全部路径，包默认40字节。")),Object(l.b)("p",null,"既然 HTTP 有这么多问题，那么如何保证传输时的安全呢？那就是 TLS 协议。"),Object(l.b)("h2",{id:"tlsssl-介绍与工作原理"},"TLS/SSL 介绍与工作原理"),Object(l.b)("p",null,"1994年，网景公司为 Netscape Navigator浏览器设计了 SSL (Secure Socket Layer，安全套接层协议)，主要用于解决传输安全问题，即防止中间人攻击，特点是："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"机密性：用密钥对数据进行加密后再传输。"),Object(l.b)("li",{parentName:"ul"},"可靠性：对客户端、服务器的身份进行认证，防止数据发给黑客或是黑客发的。"),Object(l.b)("li",{parentName:"ul"},"完整性：对数据完整性进行检查，防止数据被篡改。")),Object(l.b)("p",null,"1999年，SSL 因为应用广泛，所以 IEFE 将其标准化，改名为传输层安全协议(Transport Layer Security, TLS)。所以有些文章把它叫做 TLS/SSL，实际它是同一个东西在不同阶段的叫法。"),Object(l.b)("p",null,"TLS/SSL 的实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密。"),Object(l.b)("p",null,"客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。"),Object(l.b)("h2",{id:"pki-体系"},"PKI 体系"),Object(l.b)("p",null,"TLS 协议可以通过加密、身份验证、完整性检查来保证传输的安全。加密容易办到，但是身份验证和完整性如何保证呢？"),Object(l.b)("p",null,"验证肯定不能让服务器来完成，因为客户端或服务端可能正在和中间层黑客在通信。所以大厂合理推动了一个名叫 PKI 的基础设施，通过第三方来认证网站。"),Object(l.b)("p",null,"PKI 是一种遵循标准的, 利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范. 其基础建置包含认证中心 (Certification Authority, CA) 、注册中心 (Register Authority, RA) 、目录服务 (Directory Service, DS) 服务器."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"RA: 统计、审核用户的证书申请，然后发给 CA"),Object(l.b)("li",{parentName:"ul"},"CA: 验证公钥的拥有者信息，并颁发证书"),Object(l.b)("li",{parentName:"ul"},"DS: 将成功的证书公布到 DS")),Object(l.b)("p",null,"流程如下，为了方便统称为 CA："),Object(l.b)("p",null,Object(l.b)("img",r({parentName:"p"},{src:"/img/net/2.png",alt:null}))),Object(l.b)("p",null,"a. 服务方 S 向 CA 提交 公钥、组织信息、个人信息(域名) 等信息并申请认证。\nb. CA 通过线上、线下等多种手段验证申请者提供信息的真实性，如组织/企业是否合法、是否拥有域名所有权等。\nc. 信息审核通过后，CA 会向申请者签发认证证书。"),Object(l.b)("p",null,"证书包括以下信息：申请者公钥、申请者组织/个人信息、签发机构 CA 的信息、有效时间、证书序列号等明文信息，同时包含一个签名。"),Object(l.b)("p",null,"签名算法是首先用哈希算法计算公开明文信息的信息摘要，然后用 CA 私钥对信息摘要进行加密，即得到签名。"),Object(l.b)("p",null,"d. 客户端 C 向 服务器 S 发出请求时，S 返回证书文件。\ne. 客户端 C 读取证书中的明文信息，采用相同的哈希函数计算信息摘要，然后利用 CA 的公钥解密签名数据，对比证书的信息摘要，如果一致，则可以确认证书的合法性，即公钥合法。\nf. 客户端验证证书的域名信息、有效时间等信息。\ng. 客户端会内置信任 CA 的证书信息(包括公钥)，如果 CA 不被信息，就找不到对应的 CA 证书，证书会被判定非法。"),Object(l.b)("p",null,"在这个过程注意几点："),Object(l.b)("p",null,'a.申请证书不需要提供私钥，确保私钥永远只能服务器掌握;\nb.证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名;\nc.内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书（为什么说"部署自签SSL证书非常不安全"）\nd.证书=公钥+申请者与颁发者信息+签名;'),Object(l.b)("h3",{id:"证书链"},"证书链"),Object(l.b)("p",null,"如 CA 根证书和服务器证书中间增加一级证书机构，即中间证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的CA根证书验证合法即可。"),Object(l.b)("p",null,"a. 服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书。\nb. 中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书;\nc. 客户端有个内置信任 CA 列表，含 root.pem 证书，因此服务器证书 server.pem 被信任。"),Object(l.b)("p",null,"二级证书结构存在的优势："),Object(l.b)("p",null,"a.减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发;"),Object(l.b)("p",null,"b.根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救;"),Object(l.b)("p",null,"c.中间证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书;"),Object(l.b)("p",null,"d.证书链四级以内一般不会对 HTTPS 的性能造成明显影响。"),Object(l.b)("h3",{id:"证书吊销"},"证书吊销"),Object(l.b)("p",null,"CA 机构能够签发证书，同样也存在机制宣布以往签发的证书无效。证书使用者不合法，CA 需要废弃该证书;或者私钥丢失，使用者申请让证书无效。主要存在两类机制：CRL 与 OCSP。"),Object(l.b)("p",null,"Certificate Revocation List, 证书吊销列表(什么是证书吊销列表(CRL)？吊销列表起什么作用)，一个单独的文件。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。"),Object(l.b)("p",null,"Online Certificate Status Protocol, 证书状态在线查询协议，一个实时查询证书是否吊销的方式。部分 CA 或大部分的自签 CA (根证书)都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。"),Object(l.b)("h2",{id:"https-的工作过程"},"HTTPS 的工作过程"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"客户端发送 Client Hello 消息到服务器，包括 TLS 版本信息，支持的加密套件列表(Cipher","[ˈsaɪfə(r)]"," Suites)，支持的压缩算法列表，一个随机数A。"),Object(l.b)("li",{parentName:"ol"},"服务端返回 Server Hello 消息到客户端，包括服务端选择的协议版本，加密套件，压缩算法等，还有一个随机数B。"),Object(l.b)("li",{parentName:"ol"},"服务端返回一个证书 Server Certificate，然后发一个 Server Hello Done 消息。"),Object(l.b)("li",{parentName:"ol"},"客户端进行证书校验，产生随机数字 Pre-master，用证书中的公钥加密后发送给服务器，服务器通过私钥解密出来。"),Object(l.b)("li",{parentName:"ol"},"客户端、服务器各自根据 A 、B、Pre-master 三个随机数生成相同的对称密钥。"),Object(l.b)("li",{parentName:"ol"},"客户端发送 Change Cipher Spec，表示以后用对称密钥传输。并发送 Encrypted Handshake Message，它是根据之前所有握手信息(接受、发送)用对称密钥计算的，发送给服务器用于数据与握手验证。"),Object(l.b)("li",{parentName:"ol"},"服务端收到后也返回 Change Cipher Spec(以后用对称密钥传输) 和 Encrypted Handshake Message。"),Object(l.b)("li",{parentName:"ol"},"握手成功后，通过对称密钥进行加密传输。")),Object(l.b)("h2",{id:"https-性能与优化"},"HTTPS 性能与优化"),Object(l.b)("h3",{id:"https性能损耗"},"HTTPS性能损耗"),Object(l.b)("p",null,"(1).增加延时"),Object(l.b)("p",null,"分析前面的握手过程，一次完整的握手至少需要两端依次来回两次通信，至少增加延时2",Object(l.b)("em",{parentName:"p"}," RTT，利用会话缓存从而复用连接，延时也至少1")," RTT*。"),Object(l.b)("p",null,"(2).消耗较多的CPU资源"),Object(l.b)("p",null,"除数据传输之外，HTTPS通信主要包括对对称加解密、非对称加解密(服务器主要采用私钥解密数据);压测 TS8 机型的单核 CPU：对称加密算法AES-CBC-256 吞吐量 600Mbps，非对称 RSA 私钥解密200次/s。不考虑其它软件层面的开销，10G 网卡为对称加密需要消耗 CPU 约17核，24核CPU最多接入 HTTPS 连接 4800;"),Object(l.b)("p",null,"静态节点当前10G 网卡的 TS8 机型的 HTTP 单机接入能力约为10w/s，如果将所有的HTTP连接变为HTTPS连接，则明显RSA的解密最先成为瓶颈。因此，RSA的解密能力是当前困扰HTTPS接入的主要难题。"),Object(l.b)("h3",{id:"https接入优化"},"HTTPS接入优化"),Object(l.b)("p",null,"(1).CDN接入"),Object(l.b)("p",null,"HTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。"),Object(l.b)("p",null,"(2).会话缓存"),Object(l.b)("p",null,"虽然前文提到 HTTPS 即使采用会话缓存也要至少1*RTT的延时，但是至少延时已经减少为原来的一半，明显的延时优化;同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用RSA私钥解密获取 Pre-master 信息，可以省去CPU 的消耗。如果业务访问连接集中，缓存命中率高，则HTTPS的接入能力讲明显提升。当前TRP平台的缓存命中率高峰时期大于30%，10k/s的接入资源实际可以承载13k/的接入，收效非常可观。"),Object(l.b)("p",null,"(3).硬件加速"),Object(l.b)("p",null,"为接入服务器安装专用的SSL硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供35k的解密能力，相当于175核 CPU，至少相当于7台24核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近10台服务器的接入能力。"),Object(l.b)("p",null,"(4).远程解密"),Object(l.b)("p",null,"本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的RSA解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模HTTPS接入的解决方案之一。"),Object(l.b)("p",null,"(5).SPDY/HTTP2"),Object(l.b)("p",null,"前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。"),Object(l.b)("h2",{id:"http-和-https-区别"},"HTTP 和 HTTPS 区别"),Object(l.b)("p",null,"1、HTTPS是加密传输协议，HTTP是名文传输协议;\n2、HTTPS需要用到SSL证书，而HTTP不用;\n3、HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO,参考：\n（1）为保护用户隐私安全,谷歌优先索引HTTPS网页\n（2）百度开放收录https站点，https全网化势不可挡\n4、 HTTPS标准端口443，HTTP标准端口80;\n5、 HTTPS基于传输层，HTTP基于应用层;\n6、 HTTPS在浏览器显示绿色安全锁，HTTP没有显示;"),Object(l.b)("p",null,"总的来说HTTPS比HTTP更加安全，能够有效的保护网站用户的隐私信息安全，这也是为什么现在的HTTPS网站越来越多。如果不想你的网站因为数据泄露上头条的话，就赶快去沃通CA申请一张SSL证书为自己的网站实现HTTPS加密吧!"),Object(l.b)("h2",{id:"重放与篡改"},"重放与篡改"),Object(l.b)("h2",{id:"openssl"},"openssl"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"# 生成私钥\nopenssl genrsa -out private-key.pem 1024\n\n# 创建证书申请文件，可以发给CA\nopenssl req -new -key private-key.pem -out csr.pem\n\n# 自己签名，不被信任\nopenssl x509 -req -in csr.pem -signkey private-key.pem -out public-cert.pem\n\n# 测试连接服务器过程\nopenssl s_client -connect 127.0.0.1:8000\n")),Object(l.b)("h2",{id:"nodejs-创建-https-服务"},"nodejs 创建 https 服务"),Object(l.b)("p",null,"nodejs 配置 https 很简单，只需要准备好证书和密钥后，用 https 模块配置一下 options。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{className:"language-js"}),"const https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('key.pem'),  // 密钥文件\n  cert: fs.readFileSync('cert.pem') // 证书文件\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(\"hello world\\n\");\n}).listen(8000);\n")),Object(l.b)("h2",{id:"参考资料"},"参考资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",r({parentName:"li"},{href:"https://xz.aliyun.com/t/2526"}),"SSL/TLS协议详解(上)：密码套件，哈希，加密，密钥交换算法")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",r({parentName:"li"},{href:"https://xz.aliyun.com/t/2530"}),"SSL/TLS协议详解(中)——证书颁发机构")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",r({parentName:"li"},{href:"https://xz.aliyun.com/t/2531#toc-1"}),"SSL/TLS协议详解(下)——TLS握手协议"))))}u.isMDXComponent=!0},301:function(e,t,n){"use strict";n.d(t,"a",function(){return p}),n.d(t,"b",function(){return o});var l=n(0),r=n.n(l),b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)};var a="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=function(e){var t=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,p=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}(e,["components","mdxType","originalType","parentName"]),a=c(t),u=n,o=a[b+"."+u]||a[u]||i[u]||l;return t?r.a.createElement(o,Object.assign({},p,{components:t})):r.a.createElement(o,p)};function o(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var b=n.length,c=new Array(b);c[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[a]="string"==typeof e?e:l,c[1]=p;for(var o=2;o<b;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);