(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{215:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return o}),t.d(n,"rightToc",function(){return c}),t.d(n,"default",function(){return d});t(0);var r=t(301);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o={title:"React 知识点总结"},c=[{value:"响应式框架的基本原理",id:"响应式框架的基本原理",children:[{value:"数据劫持",id:"数据劫持",children:[]},{value:"监听数据变化",id:"监听数据变化",children:[]},{value:"Object.defineProperty 与 Proxy 对比",id:"objectdefineproperty-与-proxy-对比",children:[]},{value:"模版编译原理",id:"模版编译原理",children:[]},{value:"双向绑定实现",id:"双向绑定实现",children:[]}]},{value:"发布订阅模式",id:"发布订阅模式",children:[]},{value:"MVVM",id:"mvvm",children:[]},{value:"虚拟 DOM",id:"虚拟-dom",children:[]},{value:"虚拟 DOM diff 算法",id:"虚拟-dom-diff-算法",children:[]},{value:"应用最小差异",id:"应用最小差异",children:[]}],l={rightToc:c},p="wrapper";function d(e){var n=e.components,t=a(e,["components"]);return Object(r.b)(p,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"响应式框架的基本原理"},"响应式框架的基本原理"),Object(r.b)("p",null,"如何实现响应式，即数据变化，视图随着变化。"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"依赖收集。收集视图依赖了哪些数据。"),Object(r.b)("li",{parentName:"ol"},"数据劫持/代理。被依赖数据发生变化时需要知道。"),Object(r.b)("li",{parentName:"ol"},"发布订阅模式。数据变化时，通知视图更新。")),Object(r.b)("h3",{id:"数据劫持"},"数据劫持"),Object(r.b)("p",null,"要知道数据变化的直接方法就是数据劫持。往往通过",Object(r.b)("inlineCode",{parentName:"p"},"Object.definedProperty()"),"或",Object(r.b)("inlineCode",{parentName:"p"},"Proxy"),"来实现。"),Object(r.b)("h3",{id:"监听数据变化"},"监听数据变化"),Object(r.b)("p",null,"对于数组来说，",Object(r.b)("inlineCode",{parentName:"p"},"a.x.push()"),"并不能触发",Object(r.b)("inlineCode",{parentName:"p"},"a.x"),"的 setter。为了解决这个问题，Vue 重写了原生 Array.prototype 上的方法。"),Object(r.b)("h3",{id:"objectdefineproperty-与-proxy-对比"},"Object.defineProperty 与 Proxy 对比"),Object(r.b)("h3",{id:"模版编译原理"},"模版编译原理"),Object(r.b)("p",null,"正则 + 遍历 替换字符串"),Object(r.b)("h3",{id:"双向绑定实现"},"双向绑定实现"),Object(r.b)("p",null,"上面介绍了数据的变化会更新视图，这是单向的。反过来，视图的改变导致数据的变化。实现方法是给元素绑定事件处理函数。"),Object(r.b)("h2",{id:"发布订阅模式"},"发布订阅模式"),Object(r.b)("h2",{id:"mvvm"},"MVVM"),Object(r.b)("h2",{id:"虚拟-dom"},"虚拟 DOM"),Object(r.b)("p",null,"操作数据结构是指改变对象（虚拟 DOM），这个过程比修改真实 DOM 快很多。但虚拟 DOM 也最终是要挂载到浏览器上成为真实 DOM 节点，因此使用虚拟 DOM 并不能使得操作 DOM 的数量减少，但能够精确地获取最小的、最必要的操作 DOM 的集合。"),Object(r.b)("h2",{id:"虚拟-dom-diff-算法"},"虚拟 DOM diff 算法"),Object(r.b)("h2",{id:"应用最小差异"},"应用最小差异"))}d.isMDXComponent=!0},301:function(e,n,t){"use strict";t.d(n,"a",function(){return c}),t.d(n,"b",function(){return b});var r=t(0),i=t.n(r),a=i.a.createContext({}),o=function(e){var n=i.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=o(e.components);return i.a.createElement(a.Provider,{value:n},e.children)};var l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=function(e){var n=e.components,t=e.mdxType,r=e.originalType,a=e.parentName,c=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),l=o(n),d=t,b=l[a+"."+d]||l[d]||p[d]||r;return n?i.a.createElement(b,Object.assign({},c,{components:n})):i.a.createElement(b,c)};function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[l]="string"==typeof e?e:r,o[1]=c;for(var b=2;b<a;b++)o[b]=t[b];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);