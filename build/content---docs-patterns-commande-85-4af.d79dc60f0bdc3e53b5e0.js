(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{119:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",function(){return c}),t.d(e,"rightToc",function(){return l}),t.d(e,"default",function(){return p});t(0);var o=t(301);function r(){return(r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function a(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c={title:"javascript 命令模式",sidebar_label:"命令模式"},l=[],m={rightToc:l},u="wrapper";function p(n){var e=n.components,t=a(n,["components"]);return Object(o.b)(u,r({},m,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"命令模式可以降低发起者和执行者的耦合度，还可以进行撤销、排队等操作。"),Object(o.b)("p",null,"命令模式的关键要素： 发起者，执行者，命令(发起者,执行者.doSomething)。发起者不关心执行者，调用时，直接通过命令层来绑定发起者，来让执行者执行某个操作。"),Object(o.b)("p",null,"比如点击一个按钮让遮罩隐藏。"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"const mingling = (obj, fn) => obj.onclick = fn\nmingling(btn, mask.hide)\nmingling(btn, menu.refresh)\n")),Object(o.b)("p",null,"这种方式将绑定事件的逻辑抽出来了, 看起来要更加精简。"),Object(o.b)("p",null,"关于撤销操作，是需要记录某对象的原始信息，然后某个操作时，进行还原。通常的做法是定义一个变量，或者在执行者对象上新增一个属性，但是会在很多地方进行记录，恢复。 如果使用命令模式，命令就是这么一个缓存对象。可以在执行某个操作前就绑定原始信息。集中化管理"),Object(o.b)("p",null,"比如游戏的录制，可以通过命令模式将按键记录保存在对象中，然后对这个对象进行shift()重现。"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-html"}),'<html> \n<body>\n<button id="replay">播放录像</button> </body>\n<script>\nvar Ryu = {\n    attack: function(){ console.log( \'攻击\' ); },\n    defense: function(){ console.log( \'防御\' ); },\n    jump: function(){ console.log( \'跳跃\' );},\n    crouch: function(){ console.log( \'蹲下\' ); }\n}\n\nvar makeCommand = function( receiver, state ){\n    return function(){\n        receiver[ state ]();\n    } \n};\n\nvar commands = {\n    "119": "jump",\n    "115": "crouch", \n    "97": "defense", \n    "100": "attack"\n };\n\nvar commandStack = [];\ndocument.onkeypress = function( ev ){\n    var keyCode = ev.keyCode,\n    command = makeCommand( Ryu, commands[ keyCode ] );\n    if ( command ){\n        command(); // 执行命令 commandStack.push( command );\n    } \n};\n\n// 将刚刚执行过的命令保存进堆栈\ndocument.getElementById( \'replay\' ).onclick = function(){ // 点击播放录像 var command;\n    while( command = commandStack.shift() ){\n        command();\n    }\n};\n<\/script> \n</html>\n')),Object(o.b)("p",null,"命令队列就是有时候一个任务不能及时完成，我们需要将所有任务进行排队处理。比如动画队列。一个动画结束后该如何通知队列。通常可以使用回调函数来通知队 列，除了回调函数之外，还可以选择发布订阅模式。"),Object(o.b)("p",null,"宏命令是批量执行命令。"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"const openQQ = ()=>{\n    console.log('打开qq')\n}\n\nconst openChrome = ()=>{\n    console.log('打开谷歌浏览器')\n}\n\nconst openPS = ()=>{\n    console.log('打开PS')\n}\n\nconst command = {\n    tasks: [],\n    add(command){\n        this.tasks.push( command );\n    },\n    execute(){\n        this.tasks.forEach((command)=>{\n            command()\n        })\n    }\n}\ncommand.add(openQQ)\ncommand.add(openChrome)\ncommand.add(openPS)\n\ncommand.execute()\n")),Object(o.b)("p",null,"一般来说，命令模式都会在 command 对象中保存一个接收者来负责真正执行客户的请求，这种情况下命令对象是“傻瓜式”的，它只负责把客户的请求转交给接收者来执行，这种模式的好处是请求发起者和请求接收者之间尽可能地得到了解耦。"),Object(o.b)("p",null,"但是我们也可以定义一些更“聪明”的命令对象，“聪明”的命令对象可以直接实现请求， 这样一来就不再需要接收者的存在，这种“聪明”的命令对象也叫作智能命令。"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{}),"document.execCommand('bold')\ndocument.execCommand('undo')\n")))}p.isMDXComponent=!0},301:function(n,e,t){"use strict";t.d(e,"a",function(){return l}),t.d(e,"b",function(){return i});var o=t(0),r=t.n(o),a=r.a.createContext({}),c=function(n){var e=r.a.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):Object.assign({},e,n)),t},l=function(n){var e=c(n.components);return r.a.createElement(a.Provider,{value:e},n.children)};var m="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.a.createElement(r.a.Fragment,{},e)}},p=function(n){var e=n.components,t=n.mdxType,o=n.originalType,a=n.parentName,l=function(n,e){var t={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&-1===e.indexOf(o)&&(t[o]=n[o]);return t}(n,["components","mdxType","originalType","parentName"]),m=c(e),p=t,i=m[a+"."+p]||m[p]||u[p]||o;return e?r.a.createElement(i,Object.assign({},l,{components:e})):r.a.createElement(i,l)};function i(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=p;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l[m]="string"==typeof n?n:o,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);