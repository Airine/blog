(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{148:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",function(){return r}),a.d(t,"rightToc",function(){return i}),a.d(t,"default",function(){return o});a(0);var n=a(251);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var r={title:"网络请求",sidebar_label:"网络请求与表单"},i=[{value:"简介",id:"简介",children:[]},{value:"XMLHttpRequest 对象",id:"xmlhttprequest-对象",children:[]},{value:"表单提交",id:"表单提交",children:[]},{value:"同源政策",id:"同源政策",children:[]},{value:"跨域的解决方案",id:"跨域的解决方案",children:[{value:"jsonp",id:"jsonp",children:[]},{value:"CORS",id:"cors",children:[]},{value:"postMessage",id:"postmessage",children:[]},{value:"window.name",id:"windowname",children:[]},{value:"hash",id:"hash",children:[]},{value:"document.domain",id:"documentdomain",children:[]},{value:"websocket",id:"websocket",children:[]}]},{value:"图片上传",id:"图片上传",children:[{value:"传统的file input",id:"传统的file-input",children:[]},{value:"ajax + ReadFile()",id:"ajax--readfile",children:[]},{value:"ajax + FormData()",id:"ajax--formdata",children:[]}]},{value:"遇到的一些坑",id:"遇到的一些坑",children:[]},{value:"mime 类型",id:"mime-类型",children:[{value:"application/octet-stream",id:"applicationoctet-stream",children:[]},{value:"text/plain",id:"textplain",children:[]},{value:"text/css",id:"textcss",children:[]},{value:"text/html",id:"texthtml",children:[]},{value:"图片类型",id:"图片类型",children:[]},{value:"音频和视频类型",id:"音频和视频类型",children:[]},{value:"multipart/form-data",id:"multipartform-data",children:[]},{value:"MIME 嗅探",id:"mime-嗅探",children:[]},{value:"其他检查文件类型的方法",id:"其他检查文件类型的方法",children:[]}]},{value:"面试题",id:"面试题",children:[]},{value:"参考资料",id:"参考资料",children:[]},{value:"使用ajax",id:"使用ajax",children:[]},{value:"FormData",id:"formdata",children:[{value:"FormData API",id:"formdata-api",children:[]},{value:"jQuery里使用FormData",id:"jquery里使用formdata",children:[]}]},{value:"参考资料",id:"参考资料-1",children:[]},{value:"Blob",id:"blob",children:[]},{value:"File",id:"file",children:[]},{value:"FileReader",id:"filereader",children:[]},{value:"URL.createObjectURL()",id:"urlcreateobjecturl",children:[]},{value:"createImageBitmap",id:"createimagebitmap",children:[]},{value:"参考资料",id:"参考资料-2",children:[]}],p={rightToc:i},c="wrapper";function o(e){var t=e.components,a=b(e,["components"]);return Object(n.b)(c,l({},p,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"简介"},"简介"),Object(n.b)("h2",{id:"xmlhttprequest-对象"},"XMLHttpRequest 对象"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"简述ajax，及其代码流程？\najax就是利用XMLHttpRequest对象向后端发送请求，返回数据并处理的技术，整个过程无需刷新页面。\n代码流程如下：创建ajax对象 -> open() -> 监听事件，readyState为4，且响应码是2开头或304 -> send() 发送请求。")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"ajax对象的属性"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"说说readyState的几种状态，分别是什么意思?\n0: 请求还没有初始化，open之前\n1: 建立连接，open后\n2: 请求已接受,send后\n3: 正在处理请求\n4: 请求已完成，且响应已准备好"),Object(n.b)("li",{parentName:"ul"},"response是什么，类型可以是哪些，怎么设置类型？"),Object(n.b)("li",{parentName:"ul"},"responseType的作用？"),Object(n.b)("li",{parentName:"ul"},"responseText属性是什么？服务器以文本字符的形式返回"),Object(n.b)("li",{parentName:"ul"},"responseXML属性是什么？以 XMLDocument 对象方式返回"),Object(n.b)("li",{parentName:"ul"},"常用的status有哪些，分别是什么意思?"),Object(n.b)("li",{parentName:"ul"},"statusText和status的区别？"),Object(n.b)("li",{parentName:"ul"},"timeout的作用?"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"ajax对象的方法"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"open()：说说它的参数?\nopen的第一个参数是请求方法，注意要大写，否则有些浏览器无法处理请求。如果是同步，不必使用函数，不过不推荐，体验不好，而且Firefox 30.0已经废弃同步请求。最好在回调里使用try...catch，因为通信错误（如果服务器宕机）会抛出错误。"),Object(n.b)("li",{parentName:"ul"},"overrideMimeType()和responseType"),Object(n.b)("li",{parentName:"ul"},"发送和接收二进制数据"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"ajax的事件有哪些？(8个)")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"withCredentials是什么，怎么用?")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"怎么获取服务器所有响应头信息和某字段头信息？所有头信息的格式？如果头信息字段重名会怎么样？")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"http请求方式有哪些，get和post的区别?")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"send()的参数类型有哪些?")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"setRequestHeader() 什么时候用?如果多次设置同一字段这个字段的值是什么?怎么解决post乱码问题?")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"怎么通过overrideMimeType()接受二进制数据？接受二进制数据更好的方式是什么？")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"form表单提交的四种格式，以及数据在浏览器面板里的样子?")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"什么是同源策略")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"跨域的不同窗口通信解决方案有哪些，分别的原理，实战？优缺点？")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"什么是同源？非同源什么会限制？每种限制分别的解决方法？（考虑完全不同源的情况）")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"window.postMessage怎么用？通过它读写其它窗口的localStorage。")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"ajax跨域的解决方案和原理？各种方案的优点和缺点？"))),Object(n.b)("h2",{id:"表单提交"},"表单提交"),Object(n.b)("h2",{id:"同源政策"},"同源政策"),Object(n.b)("p",null,"同源是指协议、端口、域名都相同。如果有一个不同，浏览器将会在某些方法做一些限制。具体限制的地方有："),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"本地数据无法获取：cookie、localStorage、indexedDB。"),Object(n.b)("li",{parentName:"ol"},"dom无法获取。"),Object(n.b)("li",{parentName:"ol"},"ajax请求无效，可以发送，但是浏览器拒绝响应。")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"为什么浏览器要使用同源策略呢？")),Object(n.b)("p",null,"同源策略的目的，是为了保证用户信息的安全，防止恶意网站窃取数据。"),Object(n.b)("p",null,"比如如果没有同源限制，恶意网站 B 网站可以嵌套 iframe 来获取 A 网站的 Cookie，得到 Cookie 后，攻击者往往就可以直接登录了。"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"为什么表单提交没有同源策略限制呢？")),Object(n.b)("p",null,"因为同源策略是为了阻止攻击者获取用户信息，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单提交并不会获取内容，所以可以跨域发起。同时这也说明跨域并不能阻止 CSRF 攻击，因为请求已经发出了。"),Object(n.b)("h2",{id:"跨域的解决方案"},"跨域的解决方案"),Object(n.b)("p",null,"跨域的解决方法有很多: "),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"jsonp"),Object(n.b)("li",{parentName:"ul"},"cors"),Object(n.b)("li",{parentName:"ul"},"postMessage"),Object(n.b)("li",{parentName:"ul"},"document.domain"),Object(n.b)("li",{parentName:"ul"},"window.name"),Object(n.b)("li",{parentName:"ul"},"location.hash"),Object(n.b)("li",{parentName:"ul"},"http-proxy"),Object(n.b)("li",{parentName:"ul"},"nginx"),Object(n.b)("li",{parentName:"ul"},"websocket")),Object(n.b)("p",null,"虽然有这么多方法，但是线上项目一般使用",Object(n.b)("inlineCode",{parentName:"p"},"jsonp"),"和",Object(n.b)("inlineCode",{parentName:"p"},"cors"),"来解决跨域。"),Object(n.b)("h3",{id:"jsonp"},"jsonp"),Object(n.b)("p",null,"html 文档中的",Object(n.b)("inlineCode",{parentName:"p"},"<img>"),"和",Object(n.b)("inlineCode",{parentName:"p"},"<script>"),"标签不受同源策略限制，通过它们可以获取其它网站的资源。通过这个特点，可以实现跨域，具体如下："),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-html"}),"// 1. 先定义一个全局jsonp() 函数\n<script>\n    function jsonp(data){\n        // do... \n    }\n<\/script>\n\n// 2. 获取跨域js脚本，接口返回 jsonp({name:'zs'})，会执行上面的 jsonp 函数\n<script src='b.com/getUser?callback=jsonp'><\/script>\n")),Object(n.b)("p",null,"上面代码中，我们先定义好一个",Object(n.b)("inlineCode",{parentName:"p"},"jsonp()"),"方法(随便什么名字，要和后端约定好，或者通过 get 参数",Object(n.b)("inlineCode",{parentName:"p"},"callback=jsonp"),"传给后端)，然后请求其它网站的接口如 getUser(script标签会默认解析为js)。getUser接口会返回代码",Object(n.b)("inlineCode",{parentName:"p"},"jsonp({name:'zs'})"),"会被执行。所以也就执行了我们预先定义好的 jsonp 方法里的逻辑。"),Object(n.b)("p",null,"简单实现一个 jsonp 方法。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"async function jsonp(opt){\n    let {url, params, callback} = opt\n    let script = document.createElementS\n    return callback()\n}\n\njsonp({\n    url: 'b.com/b.js',\n    params: {},\n    callback: 'show'\n}).then(data=>{})\n")),Object(n.b)("p",null,"采用jsonp的方法实现跨域，它的优点是："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"浏览器都兼容"),Object(n.b)("li",{parentName:"ul"},"数据直接是对象，不需要解析")),Object(n.b)("p",null,"缺点是："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"只能发 get 请求，不支持 post。"),Object(n.b)("li",{parentName:"ul"},"url 有长度限制。"),Object(n.b)("li",{parentName:"ul"},"不安全，可能别人的 js 文件里可能有攻击代码 xss。")),Object(n.b)("h3",{id:"cors"},"CORS"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"CORS"),"全称是",Object(n.b)("inlineCode",{parentName:"p"},"cross-origin resource sharing"),"，目的是解决跨域的问题。它需要前后端都支持，IE 8 和 9 需要通过 XDomainRequest 来实现。"),Object(n.b)("p",null,"对于服务端来说，需要设置 header 的",Object(n.b)("inlineCode",{parentName:"p"},"Access-Control-Allow-Origin"),"。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"// 写*不能携带cookie\nres.setHeader('Access-Control-Allow-Origin', 'http://localhost:63342')\n\n// 如果是非简单请求，则会先发 OPTIONS 预检，看服务器是否支持这个方法、是否支持自定义的头\nres.setHeader('Access-Control-Allow-Methods', 'PUT')\nres.setHeader('Access-Control-Allow-Headers', 'a') // 前端a必须要有，否则报错\n\n// 跨域默认情况下，前端 xhr 对象只能拿到一些最基本的响应头，如果要访问其它头，需要设置\nres.setHeader('Access-Control-Expose-Headers', 'a')\n\n// 预检请求的有效期，在这么多秒内，不再发预检\nres.setHeader('Access-Control-Max-Age', '1')\nif (req.method === 'OPTIONS') {\n    res.statusCode = 200\n    return res.end('ok')\n}\n")),Object(n.b)("p",null,"CORS 将根据简单请求和非简单请求，会增加一些设置。"),Object(n.b)("p",null,"简单请求的要求是："),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"请求方法是 GET、HEAD、POST 中的一个。"),Object(n.b)("li",{parentName:"ol"},"Content-Type 的值是",Object(n.b)("inlineCode",{parentName:"li"},"text/plain"),"、",Object(n.b)("inlineCode",{parentName:"li"},"multipart/form-data"),"、",Object(n.b)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded"),"中的一个。"),Object(n.b)("li",{parentName:"ol"},"XMLHttpRequestUpload 对象没有注册任何事件监听器，XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。"),Object(n.b)("li",{parentName:"ol"},"请求中没有使用 ReadableStream 对象。"),Object(n.b)("li",{parentName:"ol"},"不能人为设置 Accept、Accept-Language、Content-Language 、Content-Type。")),Object(n.b)("p",null,"与简单请求相反的就是非简单请求。非简单请求将首先发送预检 OPTIONS 请求，来查看服务器是否支持跨域请求。"),Object(n.b)("p",null,"默认情况下，跨域是不发送 Cookie 的，可以设置",Object(n.b)("inlineCode",{parentName:"p"},"xhr.withCredentials = true"),"以支持。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"document.cookie = 'name=zs'\nxhr.withCredentials= true\n\nres.setHeader('Access-Control-Allow-Credentials', true)\n\n// unsafe headers 允许前端获取哪个头\nres.setHeader('Access-Control-Expose-Headers', 'name')\n")),Object(n.b)("h3",{id:"postmessage"},"postMessage"),Object(n.b)("p",null,"html5 引入了",Object(n.b)("inlineCode",{parentName:"p"},"window.postMessage"),"。允许跨窗口通信，不论这两个窗口是否同源。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"postMessage(msg, origin)\n")),Object(n.b)("p",null,"postMessage方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即“协议 + 域名 + 端口”。也可以设为*，表示不限制域名，向所有窗口发送。"),Object(n.b)("p",null,"父窗口和子窗口都可以通过message事件，监听对方的消息。"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"a.html")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-js"}),"// a.html\n<iframe src=\"http://localhost:4000/b.html\" id='frame' frameborder=\"0\" onload=\"load()\"></iframe>\n<script>\n    function load() {\n        const frame = document.getElementById('frame')\n        frame.contentWindow.postMessage('hello', 'http://localhost:4000')\n        // window.onmessage = (e) => {\n        //     console.log(e.data)\n        // }\n    }\n<\/script>\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"localhost:4000/b.html")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-js"}),"window.onmessage = function (e) {\n    console.log('b', e.data)\n    // e.source.postMessage('收到了')\n}\n")),Object(n.b)("p",null,"事件对象的常用属性如下："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"event.source"),"：发送消息的窗口"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"event.origin"),": 消息发向的网址，可以通过它过滤不是发给本窗口的消息。"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"event.data"),": 消息内容")),Object(n.b)("h3",{id:"windowname"},"window.name"),Object(n.b)("h3",{id:"hash"},"hash"),Object(n.b)("p",null,"就是通过父窗口改变子窗口的hash，然后子窗口监听到hash变化，拿到数据。同理子窗口也可以改变父窗口hash。主要用于 iframe。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-js"}),"// a.com\n<button class=\"btn\">点击</button>\n<iframe src=\"http://www.b.com/index.html\"></iframe>\n<script>\n    document.querySelector('.btn').onclick = function(){\n        document.querySelector('iframe').src += '#' + 'hello=1'\n    }\n<\/script>\n\n// b.com\nwindow.onhashchange = function(e){\n    console.log('hash change', location.hash)\n}\n")),Object(n.b)("h3",{id:"documentdomain"},"document.domain"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"document.domain"),"方法只适合 iframe 下子窗口读取父窗口的 cookie。"),Object(n.b)("h3",{id:"websocket"},"websocket"),Object(n.b)("p",null,"http缺陷：只能客户端发请求。 如果要更新，需要轮询。效率低，浪费资源。"),Object(n.b)("p",null,"websocket 是 tcp协议，没有跨域问题"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/htmlapi/websocket.html"}),"http://javascript.ruanyifeng.com/htmlapi/websocket.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://www.zhihu.com/question/20215561"}),"https://www.zhihu.com/question/20215561"))),Object(n.b)("h2",{id:"图片上传"},"图片上传"),Object(n.b)("p",null,"图片上传是一个很常见的需求，常见的处理方法有下面几种："),Object(n.b)("p",null,"1、传统的表单提交\n2、ajax + ReadFile() 将图片转成 base64 格式数据\n3、ajax + FormData() 还是通过原始图片格式上传\n4、百度 webUploader 图片上传插件 "),Object(n.b)("h3",{id:"传统的file-input"},"传统的file input"),Object(n.b)("p",null,"通过 form type=file 的方法提交。"),Object(n.b)("h3",{id:"ajax--readfile"},"ajax + ReadFile()"),Object(n.b)("p",null,"将图片转成 base64 格式数据"),Object(n.b)("h3",{id:"ajax--formdata"},"ajax + FormData()"),Object(n.b)("p",null,"html5 提供了一个 FormData类，它可以将表单数据序列化（包括图片），和ajax联合使用，这样页面就不会跳转，用户体验也很好。这个和传统表单提交时发送的图片格式是一样的。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'<form id="uploadForm">\n    <input class="weui-uploader__input" type="file" accept="image/*"\n           multiple=""\n           name="file"\n           @change="uploadImage"\n    >\n</form>\n\n$.ajax({\n    type: \'post\',\n    url: this.state_api.common.uploadImg,\n    data: new FormData(document.getElementById(\'uploadForm\')),\n    contentType: false,   // 必须\n    processData: false,   // 必须\n    async: false,\n    cache: false,\n    dataType: "json",\n    success: function (data) {\n        _this.images.push(data.data)\n    }\n});\n')),Object(n.b)("h2",{id:"遇到的一些坑"},"遇到的一些坑"),Object(n.b)("p",null,'1、使用 thinkphp 做为后台，在移动端上传图片时，提示"文件类型不符合要求"。'),Object(n.b)("p",null,"这是由于 thinkphp 后端判断图片类型时是判断的文件后缀，而不是根据文件的前几个字节来判断类型的。需要修改。"),Object(n.b)("p",null,"2、移动端有的手机点击 input type='file'按钮没反应。此问题还没有解决。"),Object(n.b)("p",null,"需要安卓修改 webview。"),Object(n.b)("h2",{id:"mime-类型"},"mime 类型"),Object(n.b)("p",null,"浏览器通常使用mime类型(而不是文件扩展名)来确定如何处理文件，对于未知的类型，浏览器会以附件的形式(下载)处理。因此服务器设置正确 mime 类型很重要。"),Object(n.b)("p",null,"比如",Object(n.b)("inlineCode",{parentName:"p"},"<link type=\"text/plain\" href='1.css' />"),"，浏览器并不能解析 1.css。"),Object(n.b)("p",null,"mime类型的语法是",Object(n.b)("inlineCode",{parentName:"p"},"type/subtype"),"。由类型和子类型组成。大小写不敏感，通常小写。它分为独立类型和 multipart 类型。"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"独立类型")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"text/plain   // 未知的文本类型\ntext/html\nimage/jpeg\nimage/png\naudio/mpeg\naudio/ogg\naudio/*\nvideo/mp4\napplication/octet-stream  // 未知的二进制类型\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"multipart 类型")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"multipart/form-data\nmultipart/byteranges\n")),Object(n.b)("h3",{id:"applicationoctet-stream"},"application/octet-stream"),Object(n.b)("p",null,"这是应用程序文件的默认值。意思是 未知的应用程序文件 ，浏览器一般不会自动执行或询问执行。浏览器会像对待 设置了HTTP头Content-Disposition 值为“附件”的文件一样来对待这类文件。"),Object(n.b)("h3",{id:"textplain"},"text/plain"),Object(n.b)("p",null,"文本文件默认值。意思是 未知的文本文件 ，浏览器认为是可以直接展示的。但是比如",Object(n.b)("inlineCode",{parentName:"p"},"<link>"),"里类型如果是",Object(n.b)("inlineCode",{parentName:"p"},"text/plain"),"，浏览器不会将它解析成css文件，除非是",Object(n.b)("inlineCode",{parentName:"p"},"text/css"),"。"),Object(n.b)("h3",{id:"textcss"},"text/css"),Object(n.b)("p",null,"注意服务器经常不会分辨使用.css后缀的css文件，并将其mime类型设置为text/plain 或 application/octet-stream 发送。这样浏览器就不能解析了。"),Object(n.b)("h3",{id:"texthtml"},"text/html"),Object(n.b)("p",null,"所有的html文件都需要使用这种类型。"),Object(n.b)("h3",{id:"图片类型"},"图片类型"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"image/gif"),"， ",Object(n.b)("inlineCode",{parentName:"p"},"image/jpeg"),"， ",Object(n.b)("inlineCode",{parentName:"p"},"image/png"),", ",Object(n.b)("inlineCode",{parentName:"p"},"image/svg+xml"),"。有最新的",Object(n.b)("inlineCode",{parentName:"p"},"image/webp"),"类型，但是增加新类型不但会增加代码，而且可能带来安全问题。所以浏览器供应商十分小心。另外还有",Object(n.b)("inlineCode",{parentName:"p"},"image/x-icon"),"类型，比如favicons。"),Object(n.b)("h3",{id:"音频和视频类型"},"音频和视频类型"),Object(n.b)("h3",{id:"multipartform-data"},"multipart/form-data"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"multipart/form-data"),"可以用于html表单从浏览器发送数据给服务器。它由边界线(--开头的字符串)划分不同部分组成。每个部分都有自己的实体、http请求头、Content-Disposition和 Content-Type 用于文件上传领域，最常用的 (Content-Length 因为边界线作为分隔符而被忽略）。"),Object(n.b)("h3",{id:"mime-嗅探"},"MIME 嗅探"),Object(n.b)("p",null,"可以使用浏览器可以通过请求头 Content-Type 来设置 X-Content-Type-Options 以阻止 MIME 嗅探。"),Object(n.b)("h3",{id:"其他检查文件类型的方法"},"其他检查文件类型的方法"),Object(n.b)("p",null,"除了mime类型，还有其它绝对文件类型的方法：如后缀和文件标志，比如47 49 46 38十六进制值","[GIF89]","或89 50 4E 47 ","[.PNG]","的PNG文件开头。但是都不可靠。"),Object(n.b)("h2",{id:"面试题"},"面试题"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"对跨域的了解?"),Object(n.b)("li",{parentName:"ol"},"跨域怎么解决，有没有使用过Apache等方案?"),Object(n.b)("li",{parentName:"ol"},"文件上传如何做断点续传?"),Object(n.b)("li",{parentName:"ol"},"表单可以跨域吗?"),Object(n.b)("li",{parentName:"ol"},"通过什么做到并发请求?"),Object(n.b)("li",{parentName:"ol"},"介绍service worker?"),Object(n.b)("li",{parentName:"ol"},"前后端通信使用什么方案?"),Object(n.b)("li",{parentName:"ol"},"RESTful常用的Method?"),Object(n.b)("li",{parentName:"ol"},"介绍下跨域?"),Object(n.b)("li",{parentName:"ol"},"如何解决跨域问题?"),Object(n.b)("li",{parentName:"ol"},"ajax如何处理跨域?"),Object(n.b)("li",{parentName:"ol"},"CORS如何设置?"),Object(n.b)("li",{parentName:"ol"},"jsonp为什么不支持post方法?"),Object(n.b)("li",{parentName:"ol"},"介绍同源策略?"),Object(n.b)("li",{parentName:"ol"},"Access-Control-Allow-Origin在服务端哪里配置?"),Object(n.b)("li",{parentName:"ol"},"Ajax发生跨域要设置什么（前端）?"),Object(n.b)("li",{parentName:"ol"},"加上CORS之后从发起到请求正式成功的过程?"),Object(n.b)("li",{parentName:"ol"},"异步请求，低版本fetch如何低版本适配?"),Object(n.b)("li",{parentName:"ol"},"get 和 post 有什么区别?"),Object(n.b)("li",{parentName:"ol"},"jsonp方案需要服务端怎么配合?"),Object(n.b)("li",{parentName:"ol"},"formData和原生的ajax有什么区别?"),Object(n.b)("li",{parentName:"ol"},"介绍下表单提交，和formData有什么关系?"),Object(n.b)("li",{parentName:"ol"},"服务端怎么做统一的状态处理?")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"写一个简单的",Object(n.b)("inlineCode",{parentName:"li"},"ajax"),"库。"),Object(n.b)("li",{parentName:"ul"},"学习",Object(n.b)("inlineCode",{parentName:"li"},"zepto"),"的",Object(n.b)("inlineCode",{parentName:"li"},"ajax"),"源代码。"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"$.Deferred"),"的实现，再看看Promise。"),Object(n.b)("li",{parentName:"ul"},"通过两种方式",Object(n.b)("inlineCode",{parentName:"li"},"FormData"),"和",Object(n.b)("inlineCode",{parentName:"li"},"file api"),"分别实战文件上传？")),Object(n.b)("h2",{id:"参考资料"},"参考资料"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"极客时间：趣谈网络协议"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/bom/ajax.html"}),"http://javascript.ruanyifeng.com/bom/ajax.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/bom/same-origin.html"}),"http://javascript.ruanyifeng.com/bom/same-origin.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/bom/cors.html"}),"http://javascript.ruanyifeng.com/bom/cors.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/htmlapi/websocket.html"}),"http://javascript.ruanyifeng.com/htmlapi/websocket.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX"}),"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"}),"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html"}),"浏览器同源政策及其规避方法")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html"}),"跨域资源共享 CORS 详解")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types"}),"MIME类型")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition"}),"Content-Disposition")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"}),"Content-Type")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://github.com/madrobby/zepto"}),"zepto源码")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/bom/cors.html"}),"CORS通信")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#"}),"HTTP访问控制（CORS）")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"http://javascript.ruanyifeng.com/bom/same-origin.html"}),"http://javascript.ruanyifeng.com/bom/same-origin.html")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy"}),"浏览器的同源策略")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image"}),"启用了 CORS 的图片")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage"}),"window.postMessage"))),Object(n.b)("p",null,"XMLHttpRequest有2种方式提交表单："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"使用ajax：复杂但是灵活"),Object(n.b)("li",{parentName:"ul"},"使用FormData：简单但是无法将数据用JSON.stringify()转成json字符串。")),Object(n.b)("h2",{id:"使用ajax"},"使用ajax"),Object(n.b)("p",null,"一般的表单，如果不用FormData，也不会用其它的API，除非要上传文件，需要使用FileReader。"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"<form>"),"可以用下面四种方式发送：\n1. post，且enctype是application/x-www-form-urlencoded（默认）\n1. post，且enctype是text/plain\n1. post，且enctype是multipart/form-data\n1. get"),Object(n.b)("p",null,"如果一个表单有2个字段foo和baz，那么上面对应的编码数据分别是："),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'// Content-Type: application/x-www-form-urlencoded\nfoo=bar&baz=The+first+line.&#37;0D%0AThe+second+line.%0D%0A\n\n// Content-Type: text/plain\nfoo=bar\nbaz=The first line.\nThe second line.\n\n// Content-Type: multipart/form-data; boundary=---------------------------314911788813839\n-----------------------------314911788813839\nContent-Disposition: form-data; name="foo"\nbar\n-----------------------------314911788813839\nContent-Disposition: form-data; name="baz"\nThe first line.\nThe second line.\n-----------------------------314911788813839--\n\n// get\n?foo=bar&baz=The%20first%20line.%0AThe%20second%20line.\n')),Object(n.b)("p",null,"上面的转码都是在提交form时浏览器自动完成。但是如果要用ajax来实现，就需要自己实现。具体实现代码如下："),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("inlineCode",{parentName:"li"},"input=button"),"不会提交表单"),Object(n.b)("li",{parentName:"ol"},"input没有name属性，这个字段不会提交")),Object(n.b)("h2",{id:"formdata"},"FormData"),Object(n.b)("p",null,"使用FormData提交表单十分简单，它和",Object(n.b)("inlineCode",{parentName:"p"},'<form enctype="multipart/form-data">'),"提交的数据格式是一样的，而且可以上传文件。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'<form enctype="multipart/form-data" method="post" name="fileinfo">\n  <label>Your email address:</label>\n  <input type="email" autocomplete="on" autofocus name="userid" placeholder="email" required size="32" maxlength="64" /><br />\n  <label>Custom file label:</label>\n  <input type="text" name="filelabel" size="12" maxlength="32" /><br />\n  <label>File to stash:</label>\n  <input type="file" name="file" required />\n  <input type="submit" value="Stash the file!" />\n</form>\n<div></div>\n\nvar form = document.forms.namedItem("fileinfo");\nform.addEventListener(\'submit\', function(ev) {\n\n  var oOutput = document.querySelector("div"),\n      oData = new FormData(form);\n\n  oData.append("CustomField", "This is some extra data");\n\n  var oReq = new XMLHttpRequest();\n  oReq.open("POST", "stash.php", true);\n  oReq.onload = function(oEvent) {\n    if (oReq.status == 200) {\n      oOutput.innerHTML = "Uploaded!";\n    } else {\n      oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \\/>";\n    }\n  };\n\n  oReq.send(oData);\n  ev.preventDefault();\n}, false);\n')),Object(n.b)("p",null,"上面的代码会自动将form表单的数据生成FormData，然后发送。"),Object(n.b)("p",null,"下面是FormData API的详细介绍。"),Object(n.b)("h3",{id:"formdata-api"},"FormData API"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"append()")),Object(n.b)("p",null,"append()方法可以追加要传给后台的表单字段。语法是："),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"append(name, value)\nappend(name, value, filename)\n")),Object(n.b)("p",null,"name是表单的字段名。value是值，还可以是File或Blob类型。如果是File或Blob类型，则可以指定其文件名。Blob的默认文件名是'blob'。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"formData.append('name', '张三')\nformData.append('age', 12) // 12会转为'12',非file或blob类型会转成字符串\nformData.append('pic[]', f.files[0], '1.jpg')\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"delete()")),Object(n.b)("p",null,"可以删除指定的键值对，参数是要删除的 Key 的名字。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"formData.delete('age')\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"entries()")),Object(n.b)("p",null,"返回iterator对象，可以遍历FormData中的键值对。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"var formData = new FormData();\nformData.append('key1', 'value1');\nformData.append('key2', 'value2');\n\nfor(var pair of formData.entries()) {\n   console.log(pair[0]+ ', '+ pair[1]); \n}\n\n// 执行结果\nkey1, value1\nkey2, value2\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"get()")),Object(n.b)("p",null,"用于获取某个键的第一个值。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"formData.append('name', '李四')\nformData.get('name'); // \"张三\"\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"getAll()")),Object(n.b)("p",null,"获取某个键的所有的值。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"formData.getAll('name') // ['张三','李四']\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"has()"),"\n",Object(n.b)("strong",{parentName:"p"},"keys()"),"\n",Object(n.b)("strong",{parentName:"p"},"set()")),Object(n.b)("p",null,"用于修改值，如果不存在，则添加。而append()是在该key最后追加一个值。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"formData.set('username', 'Chris');\nformData.set('userpic', myFileInput.files[0], 'chris.jpg');\n")),Object(n.b)("h3",{id:"jquery里使用formdata"},"jQuery里使用FormData"),Object(n.b)("p",null,"在",Object(n.b)("inlineCode",{parentName:"p"},"jquery"),"里使用",Object(n.b)("inlineCode",{parentName:"p"},"FormData"),"需要注意设置",Object(n.b)("inlineCode",{parentName:"p"},"processData"),"和",Object(n.b)("inlineCode",{parentName:"p"},"contentType"),"为",Object(n.b)("inlineCode",{parentName:"p"},"false"),"。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'var fd = new FormData(document.querySelector("form"));\nfd.append("CustomField", "This is some extra data");\n$.ajax({\n  url: "stash.php",\n  type: "POST",\n  data: fd,\n  processData: false,  // 不处理数据\n  contentType: false   // 不设置内容类型\n});\n')),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"values()")),Object(n.b)("p",null,"和entries()类似。"),Object(n.b)("h2",{id:"参考资料-1"},"参考资料"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects"}),"FormData 对象的使用")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData"}),"FormData API"))),Object(n.b)("h1",{id:"提交表单和上传文件---总结"},"提交表单和上传文件 - 总结"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},Object(n.b)("inlineCode",{parentName:"p"},"html <form>"),"提交表单的四种方式？")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"根据上面的方式写一个ajax提交表单库。包含文件上传。")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"描述FormData")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"描述文件API，File和FileReader。")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"上传进度。"))),Object(n.b)("p",null,"html5为我们提供了读取文件内容的接口，这样为我们的开发提供了一些遍历，比如文件上传时可以轻松的显示缩略图。获取上传文件的大小等等。"),Object(n.b)("p",null,"和文件相关的API有Blob、File、FileReader。"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"目录：")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"#Blob"}),"Blob")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"#File"}),"File")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"#FileReader"}),"FileReader"))),Object(n.b)("h2",{id:"blob"},"Blob"),Object(n.b)("p",null,"Blob全称是",Object(n.b)("inlineCode",{parentName:"p"},"binary large object"),"，即二进制大型文件，可以存二进制的容器。Blob通常是视频、声音或多媒体文件。js里的Blob是一个底层API，文件就是基于它的。"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"创建Blob对象")),Object(n.b)("p",null,"要从其它非Blob对象和数据创建一个Blob，需要使用Blob()构造函数。 语法是："),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"var blob = new Blob(array, options)\n")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"array"),"是一个由",Object(n.b)("inlineCode",{parentName:"p"},"ArrayBuffer"),", ",Object(n.b)("inlineCode",{parentName:"p"},"ArrayBufferView"),", ",Object(n.b)("inlineCode",{parentName:"p"},"Blob"),", ",Object(n.b)("inlineCode",{parentName:"p"},"DOMString")," 等对象构成的 ",Object(n.b)("inlineCode",{parentName:"p"},"Array"),"，或者其他类似对象的混合体，它将会被放进 Blob。DOMStrings会被编码为UTF-8。"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"options"),"有两个属性，",Object(n.b)("inlineCode",{parentName:"p"},"type"),"默认是",Object(n.b)("inlineCode",{parentName:"p"},'""'),"，表示放入",Object(n.b)("inlineCode",{parentName:"p"},"blob"),"中的数组内容的mime类型。",Object(n.b)("inlineCode",{parentName:"p"},"endings"),"，表示结束符\\n如何被写入。默认是",Object(n.b)("inlineCode",{parentName:"p"},"transparent"),"，表示结束符不变，",Object(n.b)("inlineCode",{parentName:"p"},"native"),"表示更改为适合操作系统的换行符。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"var debug = {hello: \"world\"};\nvar blob = new Blob([JSON.stringify(debug, null, 2)],\n  {type : 'application/json'});\n  \nconsole.log(blob.size)\nconsole.log(blob.type)  // 'application/json'\n")),Object(n.b)("p",null,"获取blob的尺寸，使用size属性。获取mime类型，使用type属性，如果类型未知，则为空字符串。"),Object(n.b)("p",null,"2.要创建一个包含子Blob对象的Blob，可以使用slice()"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"var blob = instanceOfBlob.slice([start [, end [, contentType]]]};\n")),Object(n.b)("p",null,"start表示Blob里的开始下标。end如果是负数，则是倒数第几个字节。contentType默认是空字符串，表示给新Blob设置的文档类型。"),Object(n.b)("ol",{start:3},Object(n.b)("li",{parentName:"ol"},"读取blob信息")),Object(n.b)("p",null,"获取用户系统上的文件Blob对象，要使用File API。从Blob中读取内容的唯一方式是使用FileReader。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'var reader = new FileReader();\nreader.addEventListener("loadend", function() {\n   // reader.result 包含转化为类型数组的blob\n});\nreader.readAsText(blob);\n')),Object(n.b)("h2",{id:"file"},"File"),Object(n.b)("p",null,"元素",Object(n.b)("inlineCode",{parentName:"p"},"<input type='file'>"),"在选择图片后，它的files属性会返回选择图片的相关信息。"),Object(n.b)("p",null,Object(n.b)("img",l({parentName:"p"},{src:"./_img/files.png",alt:"files"}))),Object(n.b)("p",null,"可以看到，它是一个FileList对象，是一个类数组，由多个File对象组成。File对象是一种特殊的Blob，可以通过FileReader，URL.createObjectURL()，createImageBitmap()及XMLHttpRequest.send()处理Blob和File。"),Object(n.b)("p",null,"从上图可以知道，file对象的一些属性："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"File.lastModified：只读，返回文件最后修改时间，自1970年1月1日0:00的毫秒数"),Object(n.b)("li",{parentName:"ul"},"File.lastModifiedDate：只读，返回最后修改的Date对象"),Object(n.b)("li",{parentName:"ul"},"File.name：返回文件的名字"),Object(n.b)("li",{parentName:"ul"},"File.size：返回文件的大小，单位是Byte"),Object(n.b)("li",{parentName:"ul"},"File.type：返回文件的mime类型"),Object(n.b)("li",{parentName:"ul"},"File.webkitRelativePath：这是个chrome下私有属性，结合下面代码了解。")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'<input type="file" id="filepicker" name="fileList" webkitdirectory multiple/>\n<ul id="listing"></ul>\n<script>\n    document.getElementById("filepicker").addEventListener("change", function (event) {\n        let output = document.getElementById("listing");\n        let files = event.target.files;\n\n        for (let i = 0; i < files.length; i++) {\n            let item = document.createElement("li");\n            item.innerHTML = files[i].webkitRelativePath;\n            output.appendChild(item);\n        }\n    }, false);\n<\/script>\n')),Object(n.b)("p",null,"当input没有设置webkitdirectory（上传目录里所有文件）时，选择单文件，或多文件。webkitRelativePath都是空字符串。当加上webkitdirectory 后，选择一个目录点击上传，webkitRelativePath显示所有文件相对于选择目录的路径。比如选择style目录，点击上传，显示结果如下图。"),Object(n.b)("p",null,Object(n.b)("img",l({parentName:"p"},{src:"./_img/relativepath.png",alt:"relativePath"}))),Object(n.b)("p",null,"File接口没有定义任何方法，但是继承了Blob接口的方法。"),Object(n.b)("h2",{id:"filereader"},"FileReader"),Object(n.b)("p",null,"FileReader可以用来异步读取File对象的信息。比如我们需要在文件上传时显示上传的图片。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),'<input type="file" class="file">\n<img src="" alt="" class="preview">\n<button type="button" class="btn">点击</button>\n<script>\n    var file = document.querySelector(\'.file\')\n    var preview = document.querySelector(\'.preview\')\n    var btn = document.querySelector(\'.btn\')\n\n    btn.onclick = function (e) {\n        var f = file.files[0]\n        var reader = new FileReader()\n        reader.onload = function (e) {\n            console.log(e.target === this) // true\n            preview.src = e.target.result\n        }\n        reader.readAsDataURL(f)\n    }\n<\/script>\n')),Object(n.b)("p",null,Object(n.b)("img",l({parentName:"p"},{src:"./_img/readasurl.png",alt:"files"}))),Object(n.b)("p",null,"接着来详细了解FileReader的属性和方法。"),Object(n.b)("p",null,"通过new FileReader()创建一个FileReader对象。它读取文件相关的方法如下："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"readAsArrayBuffer()：以buffer形式读。"),Object(n.b)("li",{parentName:"ul"},"readAsBinaryString()：以二进制形式读。"),Object(n.b)("li",{parentName:"ul"},"readAsDateURL()：以data:URL格式读，比如图片读出来就是base64格式。"),Object(n.b)("li",{parentName:"ul"},"readAsText()：以文本形式读。"),Object(n.b)("li",{parentName:"ul"},"abort()：中止读取操作，在返回时，readyState属性为DONE。")),Object(n.b)("p",null,"在开始读之前，我们需要先监听FileReader.readyState的变化，这点和ajax类型。可用事件如下："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"onabort：读取中止时触发。"),Object(n.b)("li",{parentName:"ul"},"onerror：读取发生错误时触发。"),Object(n.b)("li",{parentName:"ul"},"onload：读取完成时触发。"),Object(n.b)("li",{parentName:"ul"},"onloadstart：开始读取时触发。"),Object(n.b)("li",{parentName:"ul"},"onloadend：读取结束时触发，不管成功还是失败。"),Object(n.b)("li",{parentName:"ul"},"onprogress：读取时触发。")),Object(n.b)("p",null,"FileReader.readyState可能值如下："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"0，EMPTY  还没有加载任何数据"),Object(n.b)("li",{parentName:"ul"},"1，LOADING 数据正在加载"),Object(n.b)("li",{parentName:"ul"},"2，DONE  完成全部请求")),Object(n.b)("p",null,"最后的读取结果是",Object(n.b)("inlineCode",{parentName:"p"},"FileReader.result"),"。如果发生错误，会抛出一个",Object(n.b)("inlineCode",{parentName:"p"},"DOMException"),"，信息储存在",Object(n.b)("inlineCode",{parentName:"p"},"FileReader.error"),"中。"),Object(n.b)("h2",{id:"urlcreateobjecturl"},"URL.createObjectURL()"),Object(n.b)("p",null,"URL.createObjectURL(blob)接受一个blob或file对象，创建一个对象的本地url。"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{}),"var src = URL.createObjectURL(file.files[0])\npreview.src = src\n        \n// 结果\nblob:http://localhost:63342/35e2dba0-b306-4a6f-a755-5339f398eff9\n")),Object(n.b)("h2",{id:"createimagebitmap"},"createImageBitmap"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"window.createImageBitmap"),"是一个全局属性。待研究。"),Object(n.b)("h2",{id:"参考资料-2"},"参考资料"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File"}),"MDN file api")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader"}),"FileReader")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types"}),"MIME 类型")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"}),"Blob")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap"}),"self.createImageBitmap()"))))}o.isMDXComponent=!0},251:function(e,t,a){"use strict";a.d(t,"a",function(){return i}),a.d(t,"b",function(){return m});var n=a(0),l=a.n(n),b=l.a.createContext({}),r=function(e){var t=l.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},i=function(e){var t=r(e.components);return l.a.createElement(b.Provider,{value:t},e.children)};var p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},o=function(e){var t=e.components,a=e.mdxType,n=e.originalType,b=e.parentName,i=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),p=r(t),o=a,m=p[b+"."+o]||p[o]||c[o]||n;return t?l.a.createElement(m,Object.assign({},i,{components:t})):l.a.createElement(m,i)};function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,r=new Array(b);r[0]=o;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,r[1]=i;for(var m=2;m<b;m++)r[m]=a[m];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);