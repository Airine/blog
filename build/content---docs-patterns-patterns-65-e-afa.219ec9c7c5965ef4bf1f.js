(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{77:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",function(){return r}),a.d(n,"rightToc",function(){return b}),a.d(n,"default",function(){return o});a(0);var t=a(88);function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var r={title:"js设计模式",date:new Date("2017-06-17T14:36:48.000Z"),tags:null},b=[{value:"面向对象和UML类图",id:"面向对象和uml类图",children:[{value:"面向对象的意义",id:"面向对象的意义",children:[]},{value:"UML类图",id:"uml类图",children:[]}]},{value:"设计原则与编程技巧",id:"设计原则与编程技巧",children:[{value:"什么是设计",id:"什么是设计",children:[]},{value:"SOLID五大设计原则",id:"solid五大设计原则",children:[]},{value:"第二题",id:"第二题",children:[]}]},{value:"创建型模式",id:"创建型模式",children:[{value:"工厂模式",id:"工厂模式",children:[]},{value:"单例模式",id:"单例模式",children:[]},{value:"建造者模式",id:"建造者模式",children:[]},{value:"原型模式",id:"原型模式",children:[]}]},{value:"结构型模式",id:"结构型模式",children:[{value:"适配器模式",id:"适配器模式",children:[]},{value:"桥接模式",id:"桥接模式",children:[]},{value:"组合模式",id:"组合模式",children:[]},{value:"装饰者模式",id:"装饰者模式",children:[]},{value:"外观模式",id:"外观模式",children:[]},{value:"享元模式",id:"享元模式",children:[]},{value:"代理模式",id:"代理模式",children:[]}]},{value:"行为型模式",id:"行为型模式",children:[{value:"策略模式",id:"策略模式",children:[]},{value:"模板方法模式",id:"模板方法模式",children:[]},{value:"观察者模式",id:"观察者模式",children:[]}]},{value:"发布订阅模式",id:"发布订阅模式",children:[{value:"简介",id:"简介",children:[]},{value:"实现",id:"实现",children:[]}]},{value:"观察者模式",id:"观察者模式-1",children:[{value:"迭代器模式",id:"迭代器模式",children:[]}]},{value:"es6 Iterator",id:"es6-iterator",children:[{value:"职责链模式",id:"职责链模式",children:[]},{value:"命令模式",id:"命令模式",children:[]},{value:"备忘录模式",id:"备忘录模式",children:[]},{value:"状态模式",id:"状态模式",children:[]},{value:"访问者模式",id:"访问者模式",children:[]},{value:"中介者模式",id:"中介者模式",children:[]},{value:"解释器模式",id:"解释器模式",children:[]},{value:"生产消费模式",id:"生产消费模式",children:[]}]},{value:"参考资料",id:"参考资料",children:[]}],i={rightToc:b},s="wrapper";function o(e){var n=e.components,a=c(e,["components"]);return Object(t.b)(s,l({},i,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("p",null,"设计模式是一套让代码可重用，可读，可靠的经验总结。它可以分为三类："),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。"),Object(t.b)("li",{parentName:"ul"},"结构型模式：把类或对象结合在一起形成一个更大的结构。"),Object(t.b)("li",{parentName:"ul"},"行为型模式：类和对象如何交互，及划分责任和算法。")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"面向对象和uml类图"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#面向对象和uml类图"}),"#"),"面向对象和UML类图"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"面向对象的意义"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#面向对象的意义"}),"#"),"面向对象的意义"),Object(t.b)("p",null,"面向对象的本质实际是对数据进行结构化，即归类，这是为了更加方便的管理代码。对于计算机来说，结构化的才是最简单的。"),Object(t.b)("p",null,"面向对象的三要素: 继承、封装、多态"),Object(t.b)("p",null,"继承"),Object(t.b)("p",null,"js 里通过 extends 来继承类。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Person{\n    constructor(name){\n        this.name = name\n    }\n}\n\nclass Student extends Person{\n    constructor(name, classroom){\n        super(name)\n        this.classroom = classroom \n    }\n    study(){\n        //...\n    }\n}\n")),Object(t.b)("p",null,"封装"),Object(t.b)("p",null,"面向对象语言中的封装是通过下面三个关键词来限定属性、方法的访问权限。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"public"),": 公开的，父类、子类、实例都可以访问。"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"protected"),": 保护的，父类、子类可以访问。"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"private"),": 私有的，只有当前类可以访问。")),Object(t.b)("p",null,"在 js 中没有这种语法，可以使用 typescript 来规范。"),Object(t.b)("p",null,"多态"),Object(t.b)("p",null,"多态是子类可以重写父类的方法，或者同名方法可以根据参数个数或类型的不同表示不同功能。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"uml类图"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#uml类图"}),"#"),"UML类图"),Object(t.b)("p",null,"UML类图用来描述类和类之间的关系。"),Object(t.b)("p",null,"每个类有类名，属性和方法。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"public"),"使用 + 号"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"protected"),"使用 # 号"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"private"),"使用 - 号")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"关系")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"泛化：表示继承，使用空心箭头。"),Object(t.b)("li",{parentName:"ul"},"关联：表示引用，使用实心箭头")),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"./oop/a.png",alt:null}))),Object(t.b)("p",null,"上面的这张图表示 A,B 类继承自 Person类，Person中引用了 House类。"),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"设计原则与编程技巧"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#设计原则与编程技巧"}),"#"),"设计原则与编程技巧"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"什么是设计"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#什么是设计"}),"#"),"什么是设计"),Object(t.b)("p",null,"unix/linux设计哲学一书的总结："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"小即是美。"),Object(t.b)("li",{parentName:"ol"},"让每个程序只做好一件事。"),Object(t.b)("li",{parentName:"ol"},"快速建立原型，给用户用，使用过程中根据反馈和自己的规划继续完成。"),Object(t.b)("li",{parentName:"ol"},"舍弃高效率而取可移植性，可移植性>高效率，因为计算机配置是不断升高的。"),Object(t.b)("li",{parentName:"ol"},"采用纯文本来存储数据，即可读性，让适合人阅读，不要用二进制之类。"),Object(t.b)("li",{parentName:"ol"},"充分利用软件的杠杆效应(软件复用)。"),Object(t.b)("li",{parentName:"ol"},"使用 shell 脚本来提高杠杆效应和可移植性。"),Object(t.b)("li",{parentName:"ol"},"避免强制性的用户界面。"),Object(t.b)("li",{parentName:"ol"},"让每个程序都称为过滤器。")),Object(t.b)("p",null,"小准则："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"允许用户定制环境。"),Object(t.b)("li",{parentName:"ol"},"尽量使操作系统内核小而轻量化。"),Object(t.b)("li",{parentName:"ol"},"使用小写字母并尽量简短。"),Object(t.b)("li",{parentName:"ol"},"沉默是金。"),Object(t.b)("li",{parentName:"ol"},"各部分之和大于整体。"),Object(t.b)("li",{parentName:"ol"},"寻求 90% 的解决方案。不要什么都做到完美，因为会耗费很大精力。")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"solid五大设计原则"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#solid五大设计原则"}),"#"),"SOLID五大设计原则"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"S: 单一职责原则：一个程序只做好一件事，如果功能复杂就拆分开"),Object(t.b)("li",{parentName:"ul"},"O: 开放封闭原则：对扩展开放，对修改封闭。增加需求时，扩展新代码，而非修改已有代码。"),Object(t.b)("li",{parentName:"ul"},"L: 李氏置换原则：子类能覆盖父类，父类能出现的地方子类就能出现，js使用较少（继承使用较少）。"),Object(t.b)("li",{parentName:"ul"},"I: 接口独立原则：保持接口的单一独立，避免出现胖接口。js没有接口，使用较少。"),Object(t.b)("li",{parentName:"ul"},"D: 依赖倒置原则：面向接口编程，依赖于抽象而不依赖于具体，使用方只关注接口而不关注具体类的实现。js中使用较少(没有接口&弱类型)。")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"第二题"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#第二题"}),"#"),"第二题"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"某停车场，分3层，每层100车位 "),Object(t.b)("li",{parentName:"ol"},"每个车位能监控到车辆的驶入和离开"),Object(t.b)("li",{parentName:"ol"},"车辆进入前，显示每层的空余车位数量"),Object(t.b)("li",{parentName:"ol"},"车辆进入时，摄像头可识别车辆号和时间"),Object(t.b)("li",{parentName:"ol"},"车辆出来时，出口显示器显示车牌号和停车时长")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"创建型模式"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#创建型模式"}),"#"),"创建型模式"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"工厂模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#工厂模式"}),"#"),"工厂模式"),Object(t.b)("p",null,"工厂模式是一个创建型模式，它将创建者和构造函数分离，把创建对象的操作(new)封装在工厂类中，让上层只需要使用工厂的方法来创建对象，不用关心工厂中产品的实现。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"代码示例")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Product{\n    constructor(name){\n        this.name = name\n    }\n    init(){}\n}\n\nclass Creator{\n    create(name){\n        return new Product(name)\n    }\n}\n\nlet creator = new Creator()\nlet p = creator.create('p1')\np.init()\n")),Object(t.b)("p",null,"上面的代码可以看到，我们调用工厂creator的create方法就可以创建产品，如果产品有变化，比如产品停产或换产品了，只需要在工厂类内部处理，无需修改上层代码。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"场景")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"1、jquery实例的创建就是工厂模式")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"window.$ = function(selector) {\n  return new jQuery(selector)\n}\n")),Object(t.b)("p",null,"这样我们只需要使用",Object(t.b)("inlineCode",{parentName:"p"},"$()"),"即可，如果使用",Object(t.b)("inlineCode",{parentName:"p"},"new $()"),"书写起来麻烦，而且链式调用会很繁杂(以为都需要写 new)。另外如果jQuery名称修改为了zQuery，那么上层代码都需要修改。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"2、React.createElement也是工厂模式")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'React.createElement("div", null, {})\n\nReact.createElement = function(tag, attrs, children) {\n   return new Vnode(tag, attrs, children)\n}\n')),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"[javascript设计模式(2): 抽象工厂模式]")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"单例模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#单例模式"}),"#"),"单例模式"),Object(t.b)("p",null,"单例模式就是一个类只有一个实例。比如整个网站的登陆弹出框，系统window对象等。"),Object(t.b)("p",null,"实现"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class SingleObject{\n\n}\n\nSingleObject.getInstance = (function(){\n    let instance\n    return function(){\n        if(!instance){\n            instance = new SingleObject()\n        }\n        return instance\n    }\n})()\n\nlet o1 = SingleObject.getInstance()\nlet o2 = SingleObject.getInstance()\no1 == o2  // true\n\n// 但是还是可以new SingleObject\nlet o3 = new SingleObject()\n")),Object(t.b)("p",null,"实例"),Object(t.b)("p",null,"比如现在需要实现一个登陆弹出框。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class LoginForm{\n    show(){}\n    hide(){}\n}\n\nLoginForm.getInstance = (function(){\n    let instance = null\n    return function(){\n        if(!instance){\n            instance = new LoginForm()\n        }\n        return instance\n    }\n})()\n")),Object(t.b)("p",null,"显然，可以将 getInstance 抽出来，因为其他组件也可能是单例，比如遮罩。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class LoginForm {\n    show() { }\n    hide() { }\n}\n\nclass Singleton { }\nSingleton.getInstance = function (fn) {\n    let instance = null\n    return function () {\n        return instance || (instance = fn.apply(this, arguments))\n    }\n}\n\nlet createLogin = Singleton.getInstance(function () {\n    return new LoginForm()\n})\n\nlet login1 = createLogin()\nlet login2 = createLogin()\n\nclass Mask { }\nlet createMask = Singleton.getInstance(function () {\n    return new Mask()\n})\n\nlet mask1 = createMask()\nlet mask2 = createMask()\n\nconsole.log(login1 === login2)  // true\nconsole.log(mask1 === mask2)    // true\nconsole.log(login1 === mask1)   // false\n")),Object(t.b)("p",null,"看上面代码，单例就是获取实例的时候总是那个实例。"),Object(t.b)("p",null,"总结"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"符合单一职责原则，只实例化唯一的对象。"),Object(t.b)("li",{parentName:"ul"},"没法具体开放封闭原则，但是不违反开发封闭原则。")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"建造者模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#建造者模式"}),"#"),"建造者模式"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"原型模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#原型模式"}),"#"),"原型模式"),Object(t.b)("p",null,"原型模式是创建型模式的一种，其特点在于通过「复制」一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的「原型」，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"Object.create(prototype)\n")),Object(t.b)("p",null,"对比js中的原型prototype: js里的prototype是es6 class的一种底层实现，是面向对象的基础，而不是某个模式。多年后，es6全面普及后，js 里的 prototype 可以被改变，但是Object.create()会保留，因为它是原型设计模式的基础。"),Object(t.b)("p",null,"原型模式在前端用的不多。"),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"结构型模式"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#结构型模式"}),"#"),"结构型模式"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"适配器模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#适配器模式"}),"#"),"适配器模式"),Object(t.b)("p",null,"适配器模式的主要用途是兼容旧接口。"),Object(t.b)("p",null,"代码1"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Adaptee {\n    oldFn(){}\n}\n\nclass Target {\n    constructor(){\n        this.a = new Adaptee()\n    }\n    newFn(){\n        // 修改 this.a.oldFn\n    }\n}\n\nconst t = new Target()\nt.newFn()\n")),Object(t.b)("p",null,"代码2"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class A{\n    show(){}\n}\n\nclass B{\n    display(){}\n}\n\nclass AdapteB{\n    show(){\n        // 转换插头\n        return B.display()\n    }\n}\n\nfunction render(obj){\n    obj.show()\n}\n// 之前 render(new A)\n// 现在\nrender(new AdapteB)\n")),Object(t.b)("p",null,"场景"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"用于兼容旧接口。"),Object(t.b)("li",{parentName:"ul"},"vue computed")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"// 历史全是$.ajax，现在要用vue，自己封装一个 ajax()\nfunction ajax() {\n    \n}\n\nvar $ = {\n    ajax: function(options) {\n        return ajax(options)\n    }\n}\n")),Object(t.b)("p",null,"设计原则"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"将旧接口和使用者分离"),Object(t.b)("li",{parentName:"ul"},"符合开放封闭原则")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"桥接模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#桥接模式"}),"#"),"桥接模式"),Object(t.b)("p",null,"桥接模式(Bridge) 是将抽象部分与它的实现部分解耦，使它们独立变化。"),Object(t.b)("p",null,"它的一个典型应用场景是事件监听。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"li.addEventListener('click', getUserInfoBridge, false)\n\nfunction getUserInfoBridge(event){\n    getUserInfo(event.target.dataset.id, (data)=>{\n        console.log('得到用户信息', data)\n    })\n}\n\nfunction getUserInfo(id, callback){\n    ajax.get(`/user/${id}`, (data)=>{\n        callback && callback(data)\n    })\n}\n")),Object(t.b)("p",null,"上面",Object(t.b)("inlineCode",{parentName:"p"},"getUserInfoBridge()"),"方法作为桥将监听和处理函数解耦，让",Object(t.b)("inlineCode",{parentName:"p"},"getUserInfo()"),"方法更加通用。"),Object(t.b)("p",null,"桥接模式和适配器模式的区别"),Object(t.b)("p",null,"适配器模式是 A 不能使用 B，所以用适配器模式将 B 包装后给 A 使用。桥接模式是 A、B 能正常使用，但是为了让 A、B 解耦，所以用 C 将 A、B 分开。让 A、B 更加通用。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"组合模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#组合模式"}),"#"),"组合模式"),Object(t.b)("p",null,"组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。"),Object(t.b)("p",null,"比如vnode节点的遍历，因为对象和其子对象数据结构是一样的，可以用一样的操作。它将对整体和单个节点的操作抽取出来。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"装饰者模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#装饰者模式"}),"#"),"装饰者模式"),Object(t.b)("p",null,"装饰器模式是不改变原来的结构和功能，给对象添加新功能。"),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"./decorator/uml.png",alt:null}))),Object(t.b)("p",null,"下面是实现的代码："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class A{\n    plus(){}\n}\n\nclass Decorator{\n    constructor(target){\n        this.target = target\n    }\n    plus(){this.target.plus()}\n    subtract(){}\n}\n\nclass Client{\n    constructor(a, decorator){\n        this.a = a\n        this.decorator = decorator\n    }\n}\n\nlet a = new A()\nlet d = new Decorator(a)\nd.plus()\nd.substract()\n\nlet c = new Client(a, decorator)\nc.a.plus()\nc.decorator.substract()\n")),Object(t.b)("p",null,"上面的代码可以看到，装饰器实际是对原来的对象进行了一层包装，它具有原来对象的方法，并且能新增一些方法。可以个人认为有些问题："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"如果A里面有很多个方法。Decorator里岂不是都需要写一遍？可以使用克隆原型属性的方法解决。"),Object(t.b)("li",{parentName:"ol"},"如何给A添加新的属性呢？可以在装饰器里定义一个方法给target设置新属性解决。"),Object(t.b)("li",{parentName:"ol"},"为什么不使用继承呢？")),Object(t.b)("p",null,"《javascript设计模式与开发实践》里解释了为什么不使用继承。原因如下："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"继承使父类和子类强耦合，父类改变后，子类实际也改变了。"),Object(t.b)("li",{parentName:"ol"},"父类对子类是可见的，也就是通过子类，知道父类的实现，这破坏了封装性。")),Object(t.b)("p",null,"上面的装饰器模式确实没有这2个问题。实际上上面的Decorator完全可以用一个函数来实现："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function decorator(target){\n    target.num = 13\n    target.prototype.substract = function(){}\n}\n")),Object(t.b)("p",null,"使用函数可以很方便的增加属性和方法，个人觉得这种用法要比上面用Decorator类更好些。"),Object(t.b)("p",null,"实际应用场景"),Object(t.b)("p",null,"AOP切面"),Object(t.b)("p",null,"装饰器的目的就是新增一些功能。比如需要在函数执行前后执行一些方法，可以写下面2个方法："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function before(fn, beforeFn) {\n    return function () {\n        beforeFn.apply(this, arguments)\n        return fn.apply(this, arguments)\n    }\n}\n\nfunction after(fn, afterFn) {\n    return function () {\n        let ret = fn.apply(this, arguments)\n        afterFn.apply(this, arguments)\n        return ret\n    }\n}\n")),Object(t.b)("p",null,"因为before方法里的fn,beforeFn都使用了arguments，所以可以在beforeFn里对arguments进行修改。"),Object(t.b)("p",null,"比如希望在点击按钮后上报一些数据："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function clickHandler(){}\nfunction log(){\n    // 上报数据\n}\nel.onclick = after(clickHandler, log)\n")),Object(t.b)("p",null,"或者在当前项目请求数据需要添加token，但是其它项目不需要。为了不修改基础的ajax方法。我们可以像下面这样："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function ajax(options){}\najax = ajax.before(function(options){\n    options.params.token = 'xxx'\n})\n")),Object(t.b)("p",null,"表单提交时验证也可以用过装饰器模式来实现。通过我们表单校验的代码如下："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function submit(){\n    if(!validate()) return \n    // 验证通过...\n}\n")),Object(t.b)("p",null,"但是如果我们不想将表单提交的submit()方法和表单校验validate()方法混合在一起。可以使用下面的方法："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function submit() {\n    console.log('submit')\n}\n\nfunction validate(params) {\n    console.log('validate')\n    if (params) return\n}\n\nfunction before(fn, beforeFn) {\n    return function () {\n        if (beforeFn.apply(this, arguments) === false) return\n        return fn.apply(this, arguments)\n    }\n}\n\nsubmit = before(submit, validate)\nsubmit(false))\n")),Object(t.b)("p",null," 总结"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"装饰器模式最好使用函数来实现，在这个函数里直接对对象进行处理。"),Object(t.b)("li",{parentName:"ul"},"有时候我们不想让一个对象太复杂，这时可以使用装饰器模式动态来添加方法。"),Object(t.b)("li",{parentName:"ul"},"如果嵌套多个装饰器，函数作用域会很长，性能会有影响。")),Object(t.b)("p",null,"装饰器模式和代理模式"),Object(t.b)("p",null,"装饰器模式和代理模式都使用了另一个对象进行操作。它们的区别是设计目的。装饰器模式是增加功能，是一开始不能确定对象的全部功能，可以形成很长的装饰链。而代理模式是做一些拦截，提供访问权限，只有一级。"),Object(t.b)("p",null,"es7装饰器"),Object(t.b)("p",null,"es7已经有了装饰器，生产中使用需要安装插件",Object(t.b)("inlineCode",{parentName:"p"},"babel-plugin-transform-decorators-legacy"),"。"),Object(t.b)("p",null,"core-decorators"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",l({parentName:"li"},{href:"https://github.com/jayphelps/core-decorators"}),"core-decorators"))),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"外观模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#外观模式"}),"#"),"外观模式"),Object(t.b)("p",null,"外观模式(Facade)也叫做门面模式，它是为子系统（一组类的集合，这些类可以相互协助组成系统中一个相对独立的部分）中的一组接口提供一个统一的高层接口，使得子系统更容易使用。"),Object(t.b)("p",null,"比如启动电脑的时候。我们不关心CPU，内存，硬盘的启动和加载，只需要按一个启动键就可以了。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class CPU{\n    freeze(){}\n    jump(){}\n    execute(){}\n}\nclass Memory{\n    load(){}\n}\nclass HardDrive{\n    read(){}\n}\n\n// Facade 门面\nclass Computer{\n    start(){\n        cpu.freeze()\n        memory.load()\n        cpu.jump()\n        cpu.execute()\n    }\n}\n\nlet c = new Computer()\nc.start()\n")),Object(t.b)("p",null,"可以看到外观模式屏蔽了客户操作子系统的复杂性，提供了一个简单的高层接口。请求外观不是强制的，也可以绕过外观直接操作子系统。"),Object(t.b)("p",null,"场景"),Object(t.b)("p",null,"1、比如将阻止事件冒泡和默认事件封装在一起。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var stopEvent = function( e ){   //同时阻止事件默认行为和冒泡\n    e.stopPropagation();\n    e.preventDefault();\n}\n")),Object(t.b)("p",null,"2、比如传几种参数。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function bindEvent(elem, type, selector, fn){\n    if(fn == null){\n        fn = selector\n        selector = null\n    }\n}\n\n// 调用\nbindEvent(elem, 'click', '#div1', fn)\nbindEvent(elem, 'click', fn)\n")),Object(t.b)("ol",{start:3},Object(t.b)("li",{parentName:"ol"},"设置css")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function setStyles( id, styles ){\n    var element = document.getElementById( id );\n    for( var key in styles ){\n        if( styles.hasOwnProperty( key ) ){\n            element.style[ key ] = styles[ key ];\n        }\n    }\n}\n\nsetStyles( 'content', {\n    color : 'red'，\n    height : '200px'\n} ); \n")),Object(t.b)("p",null,"如果要批量操作元素，还可以再次包装。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function setCSS( ids, styles ){\n    for( var i = 0,len = ids.length; i<len; i++ ){\n         setStyles( ids[i], styles );\n    }\n} \n")),Object(t.b)("p",null,"总结"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"不符合单一职责原则和开发封闭原则，胖接口。因此谨慎使用，不可滥用。"),Object(t.b)("li",{parentName:"ul"},"符合最少知识原则。"),Object(t.b)("li",{parentName:"ul"},"子系统的内部变化了，只要外观不变就不会对客户造成影响。"),Object(t.b)("li",{parentName:"ul"},"外观模式是封装的子系统，而普通的封装是都可以封装。")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"享元模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#享元模式"}),"#"),"享元模式"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"书籍《javascript设计模式与开发实践》 ",Object(t.b)("a",l({parentName:"li"},{href:"https://www.cnblogs.com/xiaohuochai/p/8039957.html"}),"网文"))),Object(t.b)("p",null,"享元模式就是将大量重复的对象根据内部状态抽象成少量的对象，从而解决大量重复对象产生的性能问题。"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"共享内存，主要考虑内存，而不是效率。"),Object(t.b)("li",{parentName:"ul"},"相同的数据，共享使用。")),Object(t.b)("p",null,"js中使用场景很少，因为浏览器端基本不需要考虑内存问题。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"代理模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#代理模式"}),"#"),"代理模式"),Object(t.b)("p",null,"代理模式(proxy pattern)是通过代理去访问对象，代理提供了一些拦截操作。操作者操作的是代理。"),Object(t.b)("p",null,"比如送花，X 需要给 A 送花，但是不好意思，于是委托好朋友 B 给 A 送花。"),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"./proxy/uml.png",alt:null}))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const Flower = function(){}\nconst X = {\n    sendFlower: function(){\n        B.receiveFlower()\n    }\n}\nconst B = {\n    receiveFlower: function(){\n        if(A.happy){  // 当A开心时\n            var f = new Flower()\n            A.receiveFlower(f)\n        }\n    }\n}\nconst A = {\n    happy: false,\n    receiveFlower: function(flower){\n        console.log('A收到花了')\n    }\n}\n\nX.sendFlower()\n")),Object(t.b)("p",null,"上面代码可以看出："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"代理和目标对象提供了相同的接口，使得操作者仿佛是操作目标对象一样。"),Object(t.b)("li",{parentName:"ol"},"代理保护：可以拒绝一些对目标对象访问，比如A不开心的时候就不送花。"),Object(t.b)("li",{parentName:"ol"},"虚拟代理：可以延迟Flower对象在需要的时候才创建，不需要在",Object(t.b)("inlineCode",{parentName:"li"},"X.sendFlower"),"中创建，这样节省了内存。")),Object(t.b)("p",null,"图片预加载"),Object(t.b)("p",null,"图片预加载常用的方法是先用一张loading图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到img节点里，这种场景就很适合使用虚拟代理（等准备好后再执行本体）。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var myImage = (function(){\n    var imgNode = document.createElement( 'img' );\n    document.body.appendChild( imgNode );\n    return {\n        setSrc: function( src ){\n            imgNode.src = src;\n        }\n    }\n})();\nvar proxyImage = (function(){\n    var img = new Image;\n    img.onload = function(){\n        myImage.setSrc( this.src );\n    }\n    return {\n        setSrc: function( src ){\n            myImage.setSrc( 'loading.gif' );\n            img.src = src;\n        }\n    }\n})();\nproxyImage.setSrc( 'https://static.xiaohuochai.site/icon/icon_200.png' );\n")),Object(t.b)("p",null,"这样做的好处是符合单一职责原则。本来是只需要给img节点设置src。预加载只是让效果更好的功能。于是代理的作用在这里就体现出来了，代理负责预加载图片，预加载的操作完成之后，把请求重新交给本体MyImage。即使有一天不需要代理了，只需要修改成请求本体即可。"),Object(t.b)("p",null,"代理对象和本体都对外提供了setSrc方法，在客户看来，代理对象和本体是一致的， 代理接手请求的过程对于用户来说是透明的，用户并不清楚代理和本体的区别，这样做有两个好处："),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"用户可以放心地请求代理，只关心是否能得到想要的结果；"),Object(t.b)("li",{parentName:"ol"},"在任何使用本体的地方都可以替换成使用代理。")),Object(t.b)("p",null,"合并http请求"),Object(t.b)("p",null,"频繁的http请求会造成巨大的开销，有时我们可以在代理中通过延迟来合并http请求。比如："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var synchronousFile = function( id ){\n    console.log( '开始同步文件，id 为: ' + id );\n};\n\nvar proxySynchronousFile = (function(){\n    var cache = [], // 保存一段时间内需要同步的ID\n    timer; // 定时器\n    return function( id ){\n        cache.push( id );\n        if ( timer ){ // 保证不会覆盖已经启动的定时器\n            return;\n        }\n        timer = setTimeout(function(){\n        synchronousFile( cache.join( ',' ) ); // 2 秒后向本体发送需要同步的ID 集合\n        clearTimeout( timer ); // 清空定时器\n        timer = null;\n        cache.length = 0; // 清空ID 集合\n    }, 2000 );\n    }\n})();\n\nvar checkbox = document.getElementsByTagName( 'input' );\nfor ( var i = 0, c; c = checkbox[ i++ ]; ){\n    c.onclick = function(){\n        if ( this.checked === true ){\n            proxySynchronousFile( this.id );\n        }\n    }\n};\n")),Object(t.b)("p",null,"虚拟代理在惰性加载中的应用"),Object(t.b)("p",null,"比如调试打印内容，可以先把打印内容收集起来，当用户通过f2打开控制台的时候才加载js并执行打印操作。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var miniConsole = (function(){\n    var cache = [];\n    var handler = function( ev ){\n        // 按下f2时踩加载miniConsole.js\n        if ( ev.keyCode === 113 ){\n            var script = document.createElement( 'script' );\n            script.onload = function(){\n                for ( var i = 0, fn; fn = cache[ i++ ]; ){\n                    fn();\n                }\n            };\n            script.src = 'miniConsole.js';\n            document.getElementsByTagName( 'head' )[0].appendChild( script );\n            document.body.removeEventListener( 'keydown', handler );// 只加载一次miniConsole.js\n        }\n    };\n    document.body.addEventListener( 'keydown', handler, false );\n    return {\n        log: function(){\n            var args = arguments;\n            cache.push( function(){\n                return miniConsole.log.apply( miniConsole, args );\n            });\n        }\n    }\n})();\n\nminiConsole.log( 11 ); // 开始打印log\n// miniConsole.js 代码\nminiConsole = {\n    log: function(){\n        // 真正代码略\n        console.log( Array.prototype.join.call( arguments ) );\n    }\n}\n")),Object(t.b)("p",null,"缓存代理"),Object(t.b)("p",null,"有时我们可以将结果缓存到缓存代理中，下次又计算相同内容时，将结果直接从缓存中取出来。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"/**************** 计算乘积 *****************/\nvar mult = function(){\n    var a = 1;\n    for ( var i = 0, l = arguments.length; i < l; i++ ){\n        a = a * arguments[i];\n    }\n    return a;\n};\n/**************** 计算加和 *****************/\nvar plus = function(){\n    var a = 0;\n    for ( var i = 0, l = arguments.length; i < l; i++ ){\n        a = a + arguments[i];\n    }\n    return a;\n};\n/**************** 创建缓存代理的工厂 *****************/\nvar createProxyFactory = function( fn ){\n    var cache = {};\n    return function(){\n        var args = Array.prototype.join.call( arguments, ',' );\n        if ( args in cache ){\n            return cache[ args ];\n        }\n        return cache[ args ] = fn.apply( this, arguments );\n    }\n};\n\nvar proxyMult = createProxyFactory( mult ),\nproxyPlus = createProxyFactory( plus );\nalert ( proxyMult( 1, 2, 3, 4 ) ); // 输出：24\nalert ( proxyMult( 1, 2, 3, 4 ) ); // 输出：24\nalert ( proxyPlus( 1, 2, 3, 4 ) ); // 输出：10\nalert ( proxyPlus( 1, 2, 3, 4 ) ); // 输出：10\n")),Object(t.b)("p",null,"在 JavaScript 开发中最常用的是虚拟代理和缓存代理。虽然代理 模式非常有用，但我们在编写业务代码的时候，往往不需要去预先猜测是否需要使用代理模式。 当真正发现不方便直接访问某个对象的时候，再编写代理也不迟。"),Object(t.b)("p",null," $.proxy"),Object(t.b)("p",null,"jQuery 里的 $.proxy(fn, this) 可以将函数里的 this 进行代理。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"el.onclick = function(){\n    $.proxy(setTimeout(function(){\n        console.log(this)\n    }), this)\n}\n")),Object(t.b)("p",null," es6 Proxy代理"),Object(t.b)("p",null,"请明星做广告时，不能直接访问明星，而是要通过经纪人。如果报价低了，经纪人直接拒绝。通过es6的 Proxy 来实现。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const star = {\n    name: '孙悟空',\n    price: 10000\n}\n\nconst agent = new Proxy(star, {\n    get(target, key) {\n        if (key === 'price') {\n            console.log('访问了price')\n        }\n        return target[key]\n    },\n    set(target, key, val) {\n        if (key === 'customPrice') {\n            if (val < target.price) {\n                throw new Error('价格太低了')\n            } else {\n                target[key] = val\n            }\n        }\n    }\n})\n\nconsole.log(agent.price)\nagent.customPrice = 100000\n")),Object(t.b)("p",null,"代理模式和命令模式的区别"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"代理模式目的主要是做拦截，拦截时可以延迟创建对象(虚拟代理)或缓存数据(缓存代理)。"),Object(t.b)("li",{parentName:"ol"},"命令模式主要是将命令发出者和接受者解耦。使得发出者不需要关心接受者代码的具体实现。"),Object(t.b)("li",{parentName:"ol"},"代理模式主要操作的对象是代理，命令模式主要操作对象是命令发出者。")),Object(t.b)("p",null,"代理模式和适配器模式，装饰者模式的区别"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"代理模式主要用于访问权限的控制，提供一模一样的接口，仿佛有权限访问原对象，功能是经过限制的。"),Object(t.b)("li",{parentName:"ul"},"适配器模式是提供不同的接口，处理不兼容，比如插头的转换。"),Object(t.b)("li",{parentName:"ul"},"装饰器模式目的是新增功能，原功能不变。")),Object(t.b)("p",null,"总结"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"送花的故事"),Object(t.b)("li",{parentName:"ol"},"jQuery的$.proxy"),Object(t.b)("li",{parentName:"ol"},"es6 Proxy明星拍广告的故事"),Object(t.b)("li",{parentName:"ol"},"虚拟代理的作用，保护代理的作用"),Object(t.b)("li",{parentName:"ol"},"什么是单一职责原则：一个类应该只有一个发生变化的原因"),Object(t.b)("li",{parentName:"ol"},"http合并请求"),Object(t.b)("li",{parentName:"ol"},"图片预加载，将预加载和插图片分开"),Object(t.b)("li",{parentName:"ol"},"虚拟代理在惰性加载中的应用，将延迟到需要的时候再创建，先收集打印内容，再加载miniConsole.js后执行。"),Object(t.b)("li",{parentName:"ol"},"缓存代理")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"行为型模式"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#行为型模式"}),"#"),"行为型模式"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"策略模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#策略模式"}),"#"),"策略模式"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"书籍《javascript设计模式与开发实际》")),Object(t.b)("p",null,"策略模式是定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。"),Object(t.b)("p",null,"比如下面的代码："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function do(x){\n    if(x == 'A'){\n        //...\n    }\n    if(x == 'B'){\n        //...\n    }\n    if(x == 'C'){\n        //...\n    }\n    ....\n}\n")),Object(t.b)("p",null,"上面的代码if分支太多，而且如果执行Z，上面的if分支都需要判断一遍。可以用策略模式来改写它。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class A{\n    do(x){}\n}\nclass B{\n    do(x){}\n}\nclass C{\n    do(x){}\n}\n....\n\nfunction do(o, x){\n    o.do()\n}\n\nlet a = new A()\ndo(a, x)\n")),Object(t.b)("p",null,"可以看到，只需要传入对应的策略，执行方法即可。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"模板方法模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#模板方法模式"}),"#"),"模板方法模式"),Object(t.b)("p",null,"模板方法模式(template method pattern)用于子类具有相同方法和步骤，但是具体方法的实现不同。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Drink{\n    constructor(){\n    }\n}\n")),Object(t.b)("p",null," 应用场景"),Object(t.b)("p",null,"比如模块的渲染：\n1. ajax发请求\n2. 获取到数据，渲染模板并显示"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class RenderHtml {\n    \n}\n\nvar a = RenderHtml()\n")),Object(t.b)("p",null,"js里直接用高阶函数替换继承"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var Drink = function(params) {\n    var boilWater = function() {\n        console.log('boil water')\n    }\n    var a = params.a || function (props) {}\n    return {\n        init:function() {\n           boilWater() \n        }\n    }\n}\n\nvar tea = Drink({\n    a: function() {\n      console.log('加茶叶')\n    }\n});\ntea.init();\n")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"观察者模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#观察者模式"}),"#"),"观察者模式"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",l({parentName:"li"},{href:"http://www.cnblogs.com/lovesong/p/5272752.html"}),"设计模式（三）：观察者模式与发布/订阅模式区别")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("a",l({parentName:"li"},{href:"https://www.zhihu.com/question/23486749"}),"观察者模式和发布订阅模式有什么不同？"))),Object(t.b)("p",null,"有些人经常将发布订阅模式和观察者模式弄混淆，实际它们是有区别的，下面来详细介绍。"),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"发布订阅模式"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#发布订阅模式"}),"#"),"发布订阅模式"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"简介"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#简介"}),"#"),"简介"),Object(t.b)("p",null,"发布订阅模式是一种消息范式，消息发布者和订阅者是解耦无关的，它们之间通过消息中心来管理。消息可以分为多个类别，不关注订阅者。订阅者可以订阅一个或多个类别感兴趣的消息，也不关心发布者。(它实际是去除了发布者和订阅者，只关注消息的发布和订阅)。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"实现"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#实现"}),"#"),"实现"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function Event() {\n    this.callbacks = []\n}\n\nEvent.prototype.on = function (fn) {\n    this.callbacks.push(fn)\n}\n\nEvent.prototype.emit = function () {\n    var _this = this\n    var _args = arguments\n    this.callbacks.forEach(function (callback) {\n        callback.apply(_this, _args)\n    })\n}\n\nvar e = new Event()\ne.on(function (a) {\n    console.log(1, a)\n})\ne.on(function (a, b) {\n    console.log(2, a, b)\n})\ne.emit('hi', 'xx')\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"观察者模式-1"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#观察者模式-1"}),"#"),"观察者模式"),Object(t.b)("p",null,"观察者模式是软件设计模式的一种，是一个目标对象管理所有依于它的观察者对象，并且在它本身的状态改变时主动发出通知。目标被观察者观察，目标变化时观察者执行某些操作。它们是紧耦合的。"),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"被观察者Subject实例的方法")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"attach(observer)"),": 让观察者绑定被观察者"),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"notifyAllObserver()"),": 状态变化时，通知观察者(即调用观察者的update()方法)")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"观察者Observer实例的方法")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"update()"),": 目标变化时，观察者执行的操作")),Object(t.b)("p",null,"注意被观察者和观察者时紧耦合的"),Object(t.b)("p",null,"实现"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"// 目标\nclass Subject {\n    constructor() {\n        this.state = 0\n        this.observers = []\n    }\n\n    getState() {\n        return this.state\n    }\n\n    setState(state) {\n        this.state = state\n        this.notifyAllObserver()\n    }\n\n    notifyAllObserver() {\n        this.observers.forEach(observe => {\n            observe.update()\n        })\n    }\n\n    attach(observer) {\n        this.observers.push(observer)\n    }\n}\n\n// 观察者\nclass Observer {\n    constructor(name, subject) {\n        this.name = name\n        this.subject = subject\n        this.subject.attach(this)  // 目标绑定观察者\n    }\n\n    update() {\n        console.log(`my name is ${this.name},subject state is ${this.subject.getState()}`)\n    }\n}\n\nconst s = new Subject()\nconst o1 = new Observer('o1', s)\nconst o2 = new Observer('o2', s)\n\ns.setState(1)\ns.setState(2)\n")),Object(t.b)("p",null,"当目标变化时，即调用",Object(t.b)("inlineCode",{parentName:"p"},"s.setState()"),"时，观察者会收到消息。"),Object(t.b)("p",null," 发布订阅模式和观察者模式的区别"),Object(t.b)("p",null,"发布订阅模式是最常用的一种观察者模式的实现。观察者模式是耦合的，它强调目标和观察者，当目标变化通知观察者。但是大多数场景中我们并不关心目标和观察者，而是只关心目标的变化。所以发布订阅模式只通过消息中心来调度，它去除了发布者和订阅者(解耦)，只管消息的订阅和发布。"),Object(t.b)("p",null,"优缺点也很明显，紧密耦合的方式简单直接，扩展性差，而且要求两端同时存在。松散耦合不直接产生依赖，更容易扩展，想在哪里用就在哪里用。"),Object(t.b)("p",null,Object(t.b)("img",l({parentName:"p"},{src:"./imgs/observer.png",alt:null}))),Object(t.b)("p",null,"应用场景"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"网页事件绑定：点击按钮的时候触发绑定的事件"),Object(t.b)("li",{parentName:"ul"},"Promise")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"result.then(()=>{\n    // then这里是绑定，等到promise pending状态变化时触发\n}).then()\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"jQuery callbacks")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"var callbacks = $.Callbacks()\ncallbacks.add(function(info){console.log(info)})  // fire\ncallbacks.fire('fire')\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"自定义事件")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const EventEmitter = require('events').EventEmitter\nconst emitter = new EventEmitter()\nemitter.on('end', function(){\n    console.log('hi')\n})\nemitter.emit('end')\n\n// 2\nclass Person extends EventEmitter{\n\n}\nlet p = new Person()\np.on('talk', ()=>{})\np.emit('talk')\n\n// 3、坏处是可能不是一行一行的读\nvar fs = require('fs')\nvar readStream = fs.createReadStream('./1.txt')\nvar length = 0\nreadStream.on('data', function(chunk){\n    length += chunk.toString().length\n})\nreadStream.on('end',function(){\n    console.log(length)\n})\n\n// 4、一行行的读，利用readline\nvar readline = require('readline')\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"nodejs中：处理 http 请求，多进程通讯"),Object(t.b)("li",{parentName:"ul"},"vue 和 react 组件生命周期触发"),Object(t.b)("li",{parentName:"ul"},"vue watch")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"迭代器模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#迭代器模式"}),"#"),"迭代器模式"),Object(t.b)("p",null,"迭代器模式是将数组、类数组等数据格式的遍历封装在一个方法中。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Iterator {\n    constructor(container) {\n        this.list = container.list\n        this.index = 0\n    }\n    next() {\n        if (this.hasNext()) {\n            return this.list[this.index++]\n        }\n        return null\n    }\n    hasNext() {\n        return this.index < this.list.length\n    }\n}\n\nclass Container {\n    constructor(list) {\n        this.list = list\n    }\n    getInterator() {\n        return new Iterator(this)\n    }\n}\nlet container = new Container([1, 4, 2, 19, 22])\nlet it = container.getInterator()\n\nwhile (it.hasNext()) {\n    let n = it.next()\n    console.log(n)\n}\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"es6-iterator"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#es6-iterator"}),"#"),"es6 Iterator"),Object(t.b)("p",null,"es6中，有序集合的数据类型已经有很多了，如Array,Map,Set,String,TypedArray,arguments,NodeList等。"),Object(t.b)("p",null,"它们都内置了","[Symbol.iterator]","方法，这个方法会返回迭代器，执行",Object(t.b)("inlineCode",{parentName:"p"},"for...of"),"方法时会自动执行这个迭代器。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function each(data, callback) {\n    let it = data[Symbol.iterator]()\n\n    let isDone = false\n    while (!isDone) {\n        let { value, done } = it.next()\n        !done && callback.call(data, value)\n        isDone = done\n    }\n}\n\neach([1, 3, 4, 9], function (item) {\n    console.log(item)\n})\n")),Object(t.b)("p",null,"因为语法糖",Object(t.b)("inlineCode",{parentName:"p"},"for...of"),"就会执行对象的迭代器方法，所以可以将上面的方法简化为："),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function each(data, callback) {\n    for(let item of data){\n        callback.call(data, item)\n    }\n}\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"迭代器对象和目标对象分离。"),Object(t.b)("li",{parentName:"ul"},"迭代器将使用者与目标对象分离，不关心对象类型。"),Object(t.b)("li",{parentName:"ul"},"符合开放封闭原则。")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"职责链模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#职责链模式"}),"#"),"职责链模式"),Object(t.b)("p",null,"在职责链模式(chain-of-responsibility)里，有很多函数节点组成了一条链，数据传递给第一个函数处理，如果失败则抛给第二个函数，直到某个函数节点成功处理该数据为止。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"function processType(type){\n    if(type == 1){\n        //...大量代码\n        return \n    }\n    if(type == 2){\n        //...大量代码\n        return \n    }\n    if(type == 3){\n        //...大量代码\n        return \n    }\n    // 兜底\n}\n")),Object(t.b)("p",null,"上面这段代码会造成函数太长难以维护，当然其中的大量代码可以使用一些函数抽取出来，但是当需要新增了",Object(t.b)("inlineCode",{parentName:"p"},"type == 4"),"，就需要去修改 processType 函数，违反了开闭原则。"),Object(t.b)("p",null,"职责链模式就可以来优化这段代码。我们可以在",Object(t.b)("inlineCode",{parentName:"p"},"type==1"),"处理完成后，再对",Object(t.b)("inlineCode",{parentName:"p"},"type==2"),"处理，再对",Object(t.b)("inlineCode",{parentName:"p"},"type==3"),"处理。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class Action {\n    constructor(name) {\n        this.name = name\n        this.nextAction = null\n    }\n\n    setNextAction(action) {\n        this.nextAction = action\n    }\n\n    handle() {\n        console.log(`${this.name}审批`)\n        if(this.nextAction != null){\n            this.nextAction.handle()\n        }\n    }\n}\nlet a = new Action('组长')\nlet b = new Action('总监')\nlet c = new Action('老总')\na.setNextAction(b)\nb.setNextAction(c)\na.handle()\n")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"命令模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#命令模式"}),"#"),"命令模式"),Object(t.b)("p",null,"命令模式可以降低发起者和执行者的耦合度，还可以进行撤销、排队等操作。"),Object(t.b)("p",null,"命令模式的关键要素： 发起者，执行者，命令(发起者,执行者.doSomething)。发起者不关心执行者，调用时，直接通过命令层来绑定发起者，来让执行者执行某个操作。"),Object(t.b)("p",null,"比如点击一个按钮让遮罩隐藏。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const mingling = (obj, fn) => obj.onclick = fn\nmingling(btn, mask.hide)\nmingling(btn, menu.refresh)\n")),Object(t.b)("p",null,"这种方式将绑定事件的逻辑抽出来了, 看起来要更加精简。"),Object(t.b)("p",null,"关于撤销操作，是需要记录某对象的原始信息，然后某个操作时，进行还原。通常的做法是定义一个变量，或者在执行者对象上新增一个属性，但是会在很多地方进行记录，恢复。 如果使用命令模式，命令就是这么一个缓存对象。可以在执行某个操作前就绑定原始信息。集中化管理"),Object(t.b)("p",null,"比如游戏的录制，可以通过命令模式将按键记录保存在对象中，然后对这个对象进行shift()重现。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-html"}),'<html> \n<body>\n<button id="replay">播放录像</button> </body>\n<script>\nvar Ryu = {\n    attack: function(){ console.log( \'攻击\' ); },\n    defense: function(){ console.log( \'防御\' ); },\n    jump: function(){ console.log( \'跳跃\' );},\n    crouch: function(){ console.log( \'蹲下\' ); }\n}\n\nvar makeCommand = function( receiver, state ){\n    return function(){\n        receiver[ state ]();\n    } \n};\n\nvar commands = {\n    "119": "jump",\n    "115": "crouch", \n    "97": "defense", \n    "100": "attack"\n };\n\nvar commandStack = [];\ndocument.onkeypress = function( ev ){\n    var keyCode = ev.keyCode,\n    command = makeCommand( Ryu, commands[ keyCode ] );\n    if ( command ){\n        command(); // 执行命令 commandStack.push( command );\n    } \n};\n\n// 将刚刚执行过的命令保存进堆栈\ndocument.getElementById( \'replay\' ).onclick = function(){ // 点击播放录像 var command;\n    while( command = commandStack.shift() ){\n        command();\n    }\n};\n<\/script> \n</html>\n')),Object(t.b)("p",null,"命令队列就是有时候一个任务不能及时完成，我们需要将所有任务进行排队处理。比如动画队列。一个动画结束后该如何通知队列。通常可以使用回调函数来通知队 列，除了回调函数之外，还可以选择发布订阅模式。"),Object(t.b)("p",null,"宏命令是批量执行命令。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const openQQ = ()=>{\n    console.log('打开qq')\n}\n\nconst openChrome = ()=>{\n    console.log('打开谷歌浏览器')\n}\n\nconst openPS = ()=>{\n    console.log('打开PS')\n}\n\nconst command = {\n    tasks: [],\n    add(command){\n        this.tasks.push( command );\n    },\n    execute(){\n        this.tasks.forEach((command)=>{\n            command()\n        })\n    }\n}\ncommand.add(openQQ)\ncommand.add(openChrome)\ncommand.add(openPS)\n\ncommand.execute()\n")),Object(t.b)("p",null,"一般来说，命令模式都会在 command 对象中保存一个接收者来负责真正执行客户的请求，这种情况下命令对象是“傻瓜式”的，它只负责把客户的请求转交给接收者来执行，这种模式的好处是请求发起者和请求接收者之间尽可能地得到了解耦。"),Object(t.b)("p",null,"但是我们也可以定义一些更“聪明”的命令对象，“聪明”的命令对象可以直接实现请求， 这样一来就不再需要接收者的存在，这种“聪明”的命令对象也叫作智能命令。"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{}),"document.execCommand('bold')\ndocument.execCommand('undo')\n")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"备忘录模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#备忘录模式"}),"#"),"备忘录模式"),Object(t.b)("p",null,"所谓备忘录模式(memento pattern)就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"状态模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#状态模式"}),"#"),"状态模式"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"一个对象有状态变化，比如交通灯、收藏按钮。"),Object(t.b)("li",{parentName:"ul"},"每个状态变化都会触发一个逻辑"),Object(t.b)("li",{parentName:"ul"},"不能总是用if...else来控制")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"class State {\n    constructor(color) {\n        this.color = color\n    }\n    // 状态改变时调用\n    handler(context) {\n        context.setState(this)\n    }\n}\n\nclass Context {\n    constructor() {\n        this.state = null\n    }\n\n    getState() {\n        return this.state\n    }\n\n    setState(state) {\n        this.state = state\n    }\n}\n\nlet yellow = new State('yellow')\nlet red = new State('red')\nlet green = new State('green')\nlet context = new Context()  // 实体\n\nyellow.handler(context)\nconsole.log(context.getState())\n\nred.handler(context)\nconsole.log(context.getState())\n\ngreen.handler(context)\nconsole.log(context.getState())\n")),Object(t.b)("p",null,"有限状态机(收藏和取消收藏)"),Object(t.b)("p",null,"javascript-state-machine"),Object(t.b)("p",null," 设计原则验证"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"将状态对象和主题对象分离，状态变化逻辑单独处理"),Object(t.b)("li",{parentName:"ul"},"符合开发封闭原则")),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"访问者模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#访问者模式"}),"#"),"访问者模式"),Object(t.b)("p",null,"访问者模式(vistor pattern)是一种将算法与对象结构分离的软件设计模式。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"中介者模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#中介者模式"}),"#"),"中介者模式"),Object(t.b)("p",null,"中介者模式(mediator mode)就是通过中介者让两个类解耦。"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"解释器模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#解释器模式"}),"#"),"解释器模式"),Object(t.b)("p",null,"interpreter patter"),Object(t.b)("h3",null,Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"生产消费模式"})),Object(t.b)("a",l({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#生产消费模式"}),"#"),"生产消费模式"),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"参考资料"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#参考资料"}),"#"),"参考资料"),Object(t.b)("p",null,Object(t.b)("a",l({parentName:"p"},{href:"https://www.kancloud.cn/kancloud/learn-js-design-patterns/56451"}),"https://www.kancloud.cn/kancloud/learn-js-design-patterns/56451")))}o.isMDXComponent=!0},88:function(e,n,a){"use strict";a.d(n,"a",function(){return b}),a.d(n,"b",function(){return p});var t=a(0),l=a.n(t),c=l.a.createContext({}),r=function(e){var n=l.a.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},b=function(e){var n=r(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},i="mdxType",s={inlineCode:"code",wrapper:function(e){return l.a.createElement(l.a.Fragment,{},e.children)}},o=function(e){var n=e.components,a=e.mdxType,t=e.originalType,c=e.parentName,b=function(e,n){var a={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(a[t]=e[t]);return a}(e,["components","mdxType","originalType","parentName"]),i=r(n);return l.a.createElement(i[c+"."+a]||i[a]||s[a]||t,n?Object.assign({},b,{components:n}):b)};function p(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=a.length,r=new Array(c);r[0]=o;var b={};for(var s in n)hasOwnProperty.call(n,s)&&(b[s]=n[s]);b.originalType=e,b[i]="string"==typeof e?e:t,r[1]=b;for(var p=2;p<c;p++)r[p]=a[p];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);