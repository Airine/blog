(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{156:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return c}),n.d(t,"default",function(){return p});n(0);var l=n(245);function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function a(e,t){if(null==e)return{};var n,l,b=function(e,t){if(null==e)return{};var n,l,b={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(b[n]=e[n]);return b}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(b[n]=e[n])}return b}var i={id:"index",title:"css基础"},c=[{value:"css语法",id:"css语法",children:[]},{value:"css 选择器",id:"css-选择器",children:[]},{value:"background",id:"background",children:[{value:"background-color",id:"background-color",children:[]},{value:"background-image",id:"background-image",children:[]},{value:"background-attachment",id:"background-attachment",children:[]},{value:"background-position",id:"background-position",children:[]},{value:"background-clip",id:"background-clip",children:[]},{value:"background-origin",id:"background-origin",children:[]},{value:"background-size",id:"background-size",children:[]},{value:"线性渐变",id:"线性渐变",children:[]},{value:"径向渐变",id:"径向渐变",children:[]}]},{value:"应用值",id:"应用值",children:[]},{value:"继承值",id:"继承值",children:[]},{value:"初始值",id:"初始值",children:[]},{value:"其余值",id:"其余值",children:[]},{value:"css计数器",id:"css计数器",children:[{value:"counter-reset",id:"counter-reset",children:[]},{value:"counter-increment",id:"counter-increment",children:[]},{value:"counter()",id:"counter",children:[]},{value:"counters()",id:"counters",children:[]},{value:"注意事项",id:"注意事项",children:[]},{value:"资料",id:"资料",children:[]}]},{value:"css 盒模型",id:"css-盒模型",children:[{value:"box-sizing",id:"box-sizing",children:[]}]},{value:"元素的显示隐藏",id:"元素的显示隐藏",children:[]},{value:"css 语法",id:"css-语法",children:[]},{value:"css注释",id:"css注释",children:[]},{value:"css引入的四种形式",id:"css引入的四种形式",children:[]},{value:"单位",id:"单位",children:[]},{value:"calc",id:"calc",children:[]},{value:"颜色",id:"颜色",children:[]},{value:"列表属性list-style",id:"列表属性list-style",children:[]},{value:"参考资料",id:"参考资料",children:[]},{value:"float",id:"float",children:[]},{value:"display",id:"display",children:[]},{value:"对齐问题  vertical-align 行内元素",id:"对齐问题--vertical-align-行内元素",children:[]},{value:"十六进制和rgb的换算关系",id:"十六进制和rgb的换算关系",children:[]},{value:"自定义字体@font-face",id:"自定义字体font-face",children:[]},{value:"字体格式",id:"字体格式",children:[]},{value:"如何兼容",id:"如何兼容",children:[]},{value:"自定义图标字体 (iconfont)",id:"自定义图标字体-iconfont",children:[]},{value:"字体资源与字体图标库",id:"字体资源与字体图标库",children:[]},{value:"基本值",id:"基本值",children:[]},{value:"table系列",id:"table系列",children:[]},{value:"实战",id:"实战",children:[]},{value:"参考文章",id:"参考文章",children:[]},{value:"border",id:"border",children:[]},{value:"filter",id:"filter",children:[]},{value:"选择器效率",id:"选择器效率",children:[]},{value:"优化方法",id:"优化方法",children:[]},{value:"三角形",id:"三角形",children:[{value:"朝上三角形",id:"朝上三角形",children:[]},{value:"朝下三角形",id:"朝下三角形",children:[]},{value:"朝左三角形",id:"朝左三角形",children:[]},{value:"朝右三角形",id:"朝右三角形",children:[]},{value:"上左",id:"上左",children:[]}]},{value:"参考资料",id:"参考资料-1",children:[]},{value:"修改 placeholder 的颜色",id:"修改-placeholder-的颜色",children:[]},{value:"样式的继承",id:"样式的继承",children:[]},{value:"一些概念",id:"一些概念",children:[]},{value:"样式的层叠",id:"样式的层叠",children:[]},{value:"样式优先级",id:"样式优先级",children:[]},{value:"css reset",id:"css-reset",children:[]},{value:"浏览器兼容",id:"浏览器兼容",children:[]},{value:"继承和非继承属性",id:"继承和非继承属性",children:[]},{value:"自定义chrome滚动条样式",id:"自定义chrome滚动条样式",children:[]},{value:"参考资料",id:"参考资料-2",children:[]}],r={rightToc:c},o="wrapper";function p(e){var t=e.components,n=a(e,["components"]);return Object(l.b)(o,b({},r,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"css语法"},"css语法"),Object(l.b)("p",null,"CSS的顶层样式表由两种规则组成的规则列表构成，一种被称为 at-rule，也就是at 规则，另一种是 qualified rule，也就是普通规则。"),Object(l.b)("p",null,"at 规则由 @关键字和后续的一个区块组成，如果没有区块，则以分号结束。普通规则就是选择器和属性指定结构的规则。"),Object(l.b)("h2",{id:"css-选择器"},"css 选择器"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'*\ndiv\n.box\n#box\n.box div : 后代选择器\n\n// 新增选择器\nfather > child： 子元素选择器\nsibling + sibling：相邻兄弟选择器\nsibling ~ sibling: 后面兄弟选择器\n,        : 群组选择器\n\n// 属性选择器\na[href]    : 有属性的\na[href="#"]: 完全匹配#\na[href~="#"]: 包含#的\na[href^="#"]: 以#开头的\na[href$="#"]: 以#结尾的\na[href*="#"]: 包含#的\na[href|="#"]: 以 # 开头或以 #- 开头\n\n// 伪类选择器，相当于是自身的属性\n// 动态伪类，用户交互时触发\n:link, :visited  锚点伪类,a自带的效果\n:hover, :active, :fouces 用户行为伪类\n\n// ui元素状态伪类\n:enabled, :disabled, :checked\n\ndiv:first-child 如果是父级的第一个子元素，且是div，则选中 \ndiv:last-child\n\ndiv:nth-child()  odd=2n+1,even=2n\ndiv:nth-last-child(n)  倒着数第n个，且是div\n\ndiv:nth-of-type(2)  父级的第二个 div 子元素\ndiv:nth-last-of-type(n)\n\ndiv:first-of-type\ndiv:last-of-type\ndiv:only-child  只有一个子元素，且是唯一的\ndiv:only-of-child  只有一个div子元素\n\n:empty  没有子元素(包括文本节点)\n\na:not(:last-of-type)\n\n// 伪元素选择器，元素::伪元素\n:first-line  只用于块级元素\n:first-letter\n')),Object(l.b)("h2",{id:"background"},"background"),Object(l.b)("p",null,"背景有下面8个属性："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"background-color\t"),Object(l.b)("li",{parentName:"ul"},"background-image"),Object(l.b)("li",{parentName:"ul"},"background-repeat"),Object(l.b)("li",{parentName:"ul"},"background-attachment"),Object(l.b)("li",{parentName:"ul"},"background-position"),Object(l.b)("li",{parentName:"ul"},"background-origin"),Object(l.b)("li",{parentName:"ul"},"background-clip"),Object(l.b)("li",{parentName:"ul"},"background-size")),Object(l.b)("h3",{id:"background-color"},"background-color"),Object(l.b)("p",null,"用于设置背景颜色，当同时定义了背景图片时，图片覆盖在颜色之上。"),Object(l.b)("h3",{id:"background-image"},"background-image"),Object(l.b)("p",null,"元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。"),Object(l.b)("p",null,"多个背景图片的写法："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"background: url(1.jpg) 0 0 no-repeat;\n            url(2.jpg) 100px 0 no-repeat;\n")),Object(l.b)("h3",{id:"background-attachment"},"background-attachment"),Object(l.b)("p",null,"背景依附，背景是否跟着页面滚动，默认是scroll，可以设置为fixed。"),Object(l.b)("h3",{id:"background-position"},"background-position"),Object(l.b)("p",null,"设置背景图像的起始位置，可以设置3种类型的值："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"top left形式"),Object(l.b)("li",{parentName:"ul"},"x% y%，如果只设置了一个值，另一个会是50%。100% 100%是最右下角"),Object(l.b)("li",{parentName:"ul"},"xpos ypos")),Object(l.b)("h3",{id:"background-clip"},"background-clip"),Object(l.b)("p",null,"规定背景的绘制区域，可选值如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"border-box，表示从border开始绘制"),Object(l.b)("li",{parentName:"ul"},"padding-box，表示从padding开始绘制"),Object(l.b)("li",{parentName:"ul"},"content-box，表示从content开始绘制")),Object(l.b)("h3",{id:"background-origin"},"background-origin"),Object(l.b)("p",null,"规定background-position属性相对于什么位置来定位。如果设置了background-attachment为fixed，则该属性没效果。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"padding-box，默认值"),Object(l.b)("li",{parentName:"ul"},"border-box"),Object(l.b)("li",{parentName:"ul"},"content-box")),Object(l.b)("h3",{id:"background-size"},"background-size"),Object(l.b)("p",null,"背景图像的尺寸，可以设置为下面这些值："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"100px 100px ，如果只设置一个值，另一个是auto"),Object(l.b)("li",{parentName:"ul"},"50%"),Object(l.b)("li",{parentName:"ul"},"cover"),Object(l.b)("li",{parentName:"ul"},"contain")),Object(l.b)("h3",{id:"线性渐变"},"线性渐变"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"语法： linear-gradient([角度 | 方向词], color, ...,color)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"角度：0是从下到上，90deg是从左到右"),Object(l.b)("li",{parentName:"ul"},"方向词：top、right、bottom、left、left top、top right、bottom right 或 left bottom。默认是",Object(l.b)("inlineCode",{parentName:"li"},"to botton"),"。"),Object(l.b)("li",{parentName:"ul"},"color：表示渐变的色标，每个色标包括一个颜色和一个位置，位置可以是百分比或者绝对长度。")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"background: #fff url() no-repeat top left / 100px 100px;\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"渐变背景  background-image",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"linear-gradient"),Object(l.b)("li",{parentName:"ul"},"radius-gradient")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"linear-gradient")),Object(l.b)("p",null,"线性渐变的语法如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"<linear-gradient> = linear-gradient([ [ <angle> | to <side-or-corner> ] ,]? <color-stop>[, <color-stop>]+)\n<side-or-corner> = [left | right] || [top | bottom]\n<color-stop> = <color> [ <length> | <percentage> ]?\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"angle")," 默认是向上，也就是 ",Object(l.b)("inlineCode",{parentName:"p"},"0deg"),"(to top)，比如 ",Object(l.b)("inlineCode",{parentName:"p"},"90deg")," 是顺时针旋转。"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"repeating-linear-gradient")," 是重复线性渐变。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"radial-gradient")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"-webkit-radial-gradient([<position> || <angle>,]?[<shape> || <size>,]?<color-stop>,<color-stop>[,<color-stop>]*);\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"position 表示圆心的位置，默认是以盒子中心为圆心"),Object(l.b)("li",{parentName:"ul"},"angle 是角度"),Object(l.b)("li",{parentName:"ul"},"shape 可以指定 circle 和 ellipse（默认）"),Object(l.b)("li",{parentName:"ul"},"size 定义渐变的大小，closest-side，farthest-side，closest-corner，farthest-corner"),Object(l.b)("li",{parentName:"ul"},"color stop的百分比是以圆心到四边的长度来计算的")),Object(l.b)("p",null,"repeating-radial-gradient"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"雪碧图的原理和使用")),Object(l.b)("h3",{id:"径向渐变"},"径向渐变"),Object(l.b)("p",null,"css值的来源有："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"继承父级的"),Object(l.b)("li",{parentName:"ol"},"浏览器默认的"),Object(l.b)("li",{parentName:"ol"},"我们自己写的")),Object(l.b)("h2",{id:"应用值"},"应用值"),Object(l.b)("p",null,"应用值是最终应用的样式。"),Object(l.b)("p",null,"如果元素本身声明了样式，则它是应用值；如果没有声明，如果该属性是默认继承，则取父元素同属性的应用值，通过该方式获得的值叫做继承值，如果属性默认不继承，则取该属性的初始值。"),Object(l.b)("h2",{id:"继承值"},"继承值"),Object(l.b)("h2",{id:"初始值"},"初始值"),Object(l.b)("p",null,"每个属性都有一个默认的初始值，如width: auto，font-size: medium。"),Object(l.b)("h2",{id:"其余值"},"其余值"),Object(l.b)("p",null,"常见继承属性"),Object(l.b)("p",null,"文本相关属性都可以继承"),Object(l.b)("p",null,"color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、letter-spacing、word-spacing、white-space、word-break、overflow-wrap、line-height、direction、text-indent、text-align、text-shadow"),Object(l.b)("p",null,"列表相关属性"),Object(l.b)("p",null,"list-style-image、list-style-position、list-style-type、list-style"),Object(l.b)("p",null,"表格相关属性"),Object(l.b)("p",null,"border-collapse、border-spacing"),Object(l.b)("p",null,"visibility 和 cursor"),Object(l.b)("p",null,"常见非继承属性"),Object(l.b)("p",null,"盒模型相关属性"),Object(l.b)("p",null,"margin、border、padding、height、min-height、max-height、width、min-width、max-width、box-sizing"),Object(l.b)("p",null,"布局类属性"),Object(l.b)("p",null,"display、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align"),Object(l.b)("p",null,"系列类"),Object(l.b)("p",null,"background 系列、transform 系列、transtion 系列、animation 系列、flexbox 系列、grid 系列"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://www.w3.org/html/ig/zh/wiki/CSS2/cascade"}),"https://www.w3.org/html/ig/zh/wiki/CSS2/cascade"))),Object(l.b)("h2",{id:"css计数器"},"css计数器"),Object(l.b)("p",null,"今天想将网站左侧导航实现下面这个效果，于是想到了采用css计数器。但是又不太会，特地专门学习一下。"),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"/static/img/css/css-counter.png",alt:"css计数器"}))),Object(l.b)("p",null,"css 计数器必须和伪元素的 content 属性一起使用才生效。主要属性如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"counter-reset"),Object(l.b)("li",{parentName:"ul"},"counter-increment"),Object(l.b)("li",{parentName:"ul"},"counter()/counters()")),Object(l.b)("h3",{id:"counter-reset"},"counter-reset"),Object(l.b)("p",null,"counter-reset 用于指定计数器的名字，还可以设置从哪个数字开始计数(默认是0)。"),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"/static/img/css/css-counter-reset1.png",alt:null}))),Object(l.b)("p",null,"counter-reset 还可以是负数或小数，但是浏览器都不支持，会当做 0 处理(经测试 chrome 也是当做 0)。"),Object(l.b)("p",null,"counter-reset 还可以同时命名多个计数器。"),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"/static/img/css/css-counter-reset2.png",alt:null}))),Object(l.b)("h3",{id:"counter-increment"},"counter-increment"),Object(l.b)("p",null,"counter-increment 用于定义计数器的递增规则，默认是增加 1。每个元素调用一次，计数器就会增加一次。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"counter-increment: charpter 3;\n")),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"/static/img/css/css-increment.png",alt:null}))),Object(l.b)("p",null,"上图可以看到，计数器是根据 html 从上到下累加计数的。"),Object(l.b)("p",null,"另外，counter-increment 也可以设置多个计数器的递增规则，可以是负数，表示递减。还可以是 ",Object(l.b)("inlineCode",{parentName:"p"},"none")," 或 ",Object(l.b)("inlineCode",{parentName:"p"},"inherit"),"："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"counter-increment: charpter 3 charpter1 -1;\n")),Object(l.b)("h3",{id:"counter"},"counter()"),Object(l.b)("p",null,"counter() 方法可以用于显示某个计数器当前的值，最简单的用法就是 ",Object(l.b)("inlineCode",{parentName:"p"},"counter(name)"),"。它还可以传第二个参数，表示 ",Object(l.b)("inlineCode",{parentName:"p"},"list-style-type"),"。"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"list-style-type：disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none | armenian | cjk-ideographic | georgian | lower-greek | hebrew | hiragana | hiragana-iroha | katakana | katakana-iroha | lower-latin | upper-latin")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"counter(name, style)\n")),Object(l.b)("p",null,"counter还支持拼接(级联)。比如："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"body {\n    counter-reset: chapter subChapter;\n}\n\nh2:before {\n    content: counter(chapter);\n    counter-increment: chapter 1\n}\n\nh3:before {\n    content: counter(chapter) '.' counter(subChapter);  // 级联\n    counter-increment: subChapter 1\n}\n")),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"/static/img/css/css-counter1.png",alt:null}))),Object(l.b)("p",null,"上面的代码已经可以显示章节效果了。 "),Object(l.b)("h3",{id:"counters"},"counters()"),Object(l.b)("p",null,"counters() 方法主要用来做嵌套效果。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"counters(name, string, style)\n")),Object(l.b)("p",null,"string 表示子序号的连接符，style 表示 list-style-type。"),Object(l.b)("p",null,"嵌套是根据 counter-reset 来算的，它碰到 counter-reset 就生成一级，如果没有用 counter-reset 的元素嵌套，该元素依然和上一个元素属于同一级。(具体看上面张鑫旭的学习资料)。"),Object(l.b)("h3",{id:"注意事项"},"注意事项"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"一个元素如果设置了 counter-increment，但是它 display: none/hidden，则计数器不会增加。visibility:hidden 不会有此现象。")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"应用举例：可以方便用于幻灯片的slide小圆点上。"))),Object(l.b)("h3",{id:"资料"},"资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"http://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/"}),"CSS counter计数器(content目录序号自动递增)详解"),"(都自己动手实践一遍)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://www.w3.org/TR/CSS2/generate.html#scope"}),"w3.org counter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Counters"}),"mdn Counters")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://dev.opera.com/articles/automatic-numbering-with-css-counters/"}),"Automatic Numbering With CSS Counters"))),Object(l.b)("h2",{id:"css-盒模型"},"css 盒模型"),Object(l.b)("p",null,"每个元素都是一个盒子，由 width，height，padding，border，margin组成。"),Object(l.b)("p",null,"块级元素上面属性都是生效的。行内元素，宽高，上下margin无效。"),Object(l.b)("h3",{id:"box-sizing"},"box-sizing"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"box-sizing"),"属性可以用来控制盒子的",Object(l.b)("inlineCode",{parentName:"p"},"padding"),"、",Object(l.b)("inlineCode",{parentName:"p"},"border"),"是内减模式，还是外扩模式。"),Object(l.b)("h2",{id:"元素的显示隐藏"},"元素的显示隐藏"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"display:none")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"元素都隐藏了，包括子元素"),Object(l.b)("li",{parentName:"ul"},"在页面不占空间")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"visibility:hidden")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"只是当前元素隐藏，子元素还可以通过设置",Object(l.b)("inlineCode",{parentName:"li"},"visibility: visible"),"来显示"),Object(l.b)("li",{parentName:"ul"},"在页面还占空间，可以理解为透明度成0了")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"overflow:hidden")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"默认情况下，子元素溢出会显示出来"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"overflow: hidden")," 直接将超过子元素截掉"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"overflow: auto")," 超出会有滚动条。")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"overflow:hidden")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"都是标准文档流，则可以隐藏掉超出部分"),Object(l.b)("li",{parentName:"ul"},"子元素",Object(l.b)("inlineCode",{parentName:"li"},"position:'absolute'"),",父元素不设置",Object(l.b)("inlineCode",{parentName:"li"},"position:'relative'或'absolute'"),"，子元素始终显示，如果设置了，则隐藏超出部分。"),Object(l.b)("li",{parentName:"ul"},"子元素",Object(l.b)("inlineCode",{parentName:"li"},"position:'fixed'"),"始终会显示")),Object(l.b)("p",null,"display:none"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"元素相当于直接不显示了"),Object(l.b)("li",{parentName:"ul"},"子元素也隐藏")),Object(l.b)("p",null,"visibility: hidden"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"只是隐藏，位置还在，相当于",Object(l.b)("inlineCode",{parentName:"li"},"opacity:0")),Object(l.b)("li",{parentName:"ul"},"子元素不管有没有定位，都会隐藏掉")),Object(l.b)("p",null,"子元素的padding 设置为 100%时，是以父元素的宽度来计算的。"),Object(l.b)("h1",{id:"css基础"},"css基础"),Object(l.b)("h2",{id:"css-语法"},"css 语法"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"选择器 {\n    属性: 值;\n    属性: 值;\n}\n")),Object(l.b)("h2",{id:"css注释"},"css注释"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"/* 单行注释 */\n\n/* 多行\n   注释 */\n")),Object(l.b)("h2",{id:"css引入的四种形式"},"css引入的四种形式"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"行内样式"),Object(l.b)("li",{parentName:"ul"},"内嵌式"),Object(l.b)("li",{parentName:"ul"},"外链式"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"@import url(cssurl)"),"：可以放在",Object(l.b)("inlineCode",{parentName:"li"},"html"),"的",Object(l.b)("inlineCode",{parentName:"li"},"<style></style>"),"里面，也可以在css文件中使用。")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"外链式和@import的区别在于")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"@import 在 ",Object(l.b)("inlineCode",{parentName:"li"},"<ie5.5")," 下不支持（现在不考虑）"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("inlineCode",{parentName:"li"},"link"),"属于",Object(l.b)("inlineCode",{parentName:"li"},"html"),"，",Object(l.b)("inlineCode",{parentName:"li"},"@import"),"属于",Object(l.b)("inlineCode",{parentName:"li"},"css")),Object(l.b)("li",{parentName:"ol"},"有些人说 ",Object(l.b)("inlineCode",{parentName:"li"},"link")," 方便用 ",Object(l.b)("inlineCode",{parentName:"li"},"js")," 进行 ",Object(l.b)("inlineCode",{parentName:"li"},"dom")," 操作，",Object(l.b)("inlineCode",{parentName:"li"},"@import")," 也可以操作，而且不麻烦。")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"不使用@import的原因")),Object(l.b)("p",null,"这样做会导致css无法并行下载，因为使用@import引用的文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"## 属性和值\n")),Object(l.b)("p",null,"css的属性分为字体、文本、背景和空间，与之对应的值分为关键词、数字、数字加单位、多个值。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"字体属性")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"font-family: '微软雅黑','宋体';\nfont-size: 14px\nfont-style: italic;\nfont-weight: bold;\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"文本属性")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"color\ntext-indent\ntext-align\nline-height: 2;\ntext-decoration\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"背景属性")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"background-color\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"空间属性")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"width\nmargin\n")),Object(l.b)("h2",{id:"单位"},"单位"),Object(l.b)("p",null,"相对单位 em rem % vw vh\n绝对单位  px in pt cm mm"),Object(l.b)("p",null,"font-size设置为em，是根据父元素的font-size来计算的，盒模型的em是根据当前元素的font-size来计算的。"),Object(l.b)("p",null,"rem是根据html的font-size来计算的"),Object(l.b)("p",null,"line-height: 2; 是根据当前元素的font-size来计算的。"),Object(l.b)("p",null,"1px 在不同设备上，根据dpr来对应不同的点数。但是显示大小是一致的。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"vmin: 根据视口小的方向计算"),Object(l.b)("li",{parentName:"ul"},"vmax: 根据视口大的方向计算")),Object(l.b)("h2",{id:"calc"},"calc"),Object(l.b)("h2",{id:"颜色"},"颜色"),Object(l.b)("p",null,"rgb 和 十六进制的转换"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"// 16进制转成10进制\nff -> 15*16 + 15\n00 -> 0*16 + 0\n")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),".parent {\n    color: green;\n    border-color: currentColor;\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"currentColor 会找自己的color，如果没有，找父元素的color。"),Object(l.b)("li",{parentName:"ul"},"transparent"),Object(l.b)("li",{parentName:"ul"},"rgba() , ",Object(l.b)("inlineCode",{parentName:"li"},"alpha-channel"),"透明度通道。")),Object(l.b)("h2",{id:"列表属性list-style"},"列表属性list-style"),Object(l.b)("p",null,"list-style 是三个属性的简写"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"list-style-type: none、disc、circle、square、decimal、low-alpha等"),Object(l.b)("li",{parentName:"ul"},"list-style-position: inside 、outside"),Object(l.b)("li",{parentName:"ul"},"list-style-image: 可以设置小图标为一个图片")),Object(l.b)("p",null,"不过一般都是设置 ",Object(l.b)("inlineCode",{parentName:"p"},"list-style: none"),"，小图标直接用 ",Object(l.b)("inlineCode",{parentName:"p"},"background")," 来实现。"),Object(l.b)("h2",{id:"参考资料"},"参考资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"http://www.w3school.com.cn/cssref/pr_list-style-type.asp"}),"http://www.w3school.com.cn/cssref/pr_list-style-type.asp"))),Object(l.b)("p",null,"table -> div + css"),Object(l.b)("p",null,"table布局的缺点："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"加载慢，必须table加载完成后才显示给用户"),Object(l.b)("li",{parentName:"ol"},"table是表格，语义是展示数据，不应用于布局")),Object(l.b)("p",null,"zen garden是table->div+css的重要标志。但是后来div又被滥用了。"),Object(l.b)("p",null,"以前只能看class的命名才知道块是代表什么，但是现在可以直接用header,footer之类。"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"方便团队开发和维护（看标签就知道是什么）"),Object(l.b)("li",{parentName:"ol"},"有利于seo，不仅是人看的，还是蜘蛛看的"),Object(l.b)("li",{parentName:"ol"},"屏幕阅读软件(盲人)，有助于正确读屏幕")),Object(l.b)("h2",{id:"float"},"float"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"浮动最初是为了做文字环绕效果"),Object(l.b)("li",{parentName:"ul"},"浮动会造成父元素的塌陷问题")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),".clearfix::after{\n    content: '';\n    display: table;\n    clear: both;\n}\n")),Object(l.b)("p",null,"解决塌陷的方法"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"清除浮动：将后面的元素设置 clear:both，css2.0原理是给后面元素设置一个margintop，css2.1引入了一个清除区域的概念。只能设置浮动元素的margin-bottom，而不能设置后面元素的margin-top"),Object(l.b)("li",{parentName:"ul"},"闭合子元素浮动，有2种方法",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"刚开始是隔墙法(不优雅，冗余),后来是利用伪元素{content:'';display:table;clear:both}"),Object(l.b)("li",{parentName:"ul"},"新建bfc:父元素在新建一个 BFC 时，其高度计算时会把浮动子元素的包进来",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"根元素或其它包含它的元素\n浮动 (元素的 float 不是 none)\n绝对定位的元素 (元素具有 position 为 absolute 或 fixed)\n内联块 inline-blocks (元素具有 display: inline-block)\n表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)\n表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)\n块元素具有overflow ，且值不是 visible\ndisplay: flow-root")))))),Object(l.b)("p",null,"常用的是overflow:hidden"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'<div class="container">\n    <div class="box"></div>\n</div\n.container {\n    overflow: hidden;\n}\n.box {\n    float: left;\n}\n')),Object(l.b)("h2",{id:"display"},"display"),Object(l.b)("p",null,"// 基本"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"none"),Object(l.b)("li",{parentName:"ul"},"block"),Object(l.b)("li",{parentName:"ul"},"inline: 上下margin,width,height无效"),Object(l.b)("li",{parentName:"ul"},"inline-block: 有空隙",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"font-size: 0"),Object(l.b)("li",{parentName:"ul"},"去掉空格")))),Object(l.b)("p",null,"// table"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"table,table-row, table-cell。可以直接用vertical-align")),Object(l.b)("p",null,"// flexbox"),Object(l.b)("p",null,"// grid"),Object(l.b)("h2",{id:"对齐问题--vertical-align-行内元素"},"对齐问题  vertical-align 行内元素"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"四条线"),Object(l.b)("li",{parentName:"ul"},"取值及效果")),Object(l.b)("p",null,Object(l.b)("a",b({parentName:"p"},{href:"http://web.jobbole.com/90844/"}),"http://web.jobbole.com/90844/"),"\n",Object(l.b)("a",b({parentName:"p"},{href:"http://blog.jobbole.com/46574/"}),"http://blog.jobbole.com/46574/"),"\n",Object(l.b)("a",b({parentName:"p"},{href:"https://www.tuicool.com/articles/q2a6Znn"}),"https://www.tuicool.com/articles/q2a6Znn")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"首先浮动元素，后面是块元素，浮动元素的起始位置带上块元素的margin-top")),Object(l.b)("p",null,"属性参考\nCSS 属性也是一个非常庞大的知识体系，这里先介绍下一些基本的属性，方便我们入门练习，后续将慢慢学习更多。如果你对某些属性不太了解，也可以直接参考文档："),Object(l.b)("p",null,"CSS 参考 - CSS | MDN\nCSS 参考手册 | W3school\n如何阅读 CSS 属性值定义语法。\n下面的前四个相关属性（字体，文本，列表，表格）需要自己多学习实践，如有不明白，可以在上面的参考手册中查阅对应的资料（如需快速查找，可以在网页中使用ctrl+f快捷键，打开搜索，输入下面的属性，点击搜索即可找到该属性）。之后的相关属性我们以后也会慢慢讲到，你也可以先提前了解下。"),Object(l.b)("p",null,"字体相关属性"),Object(l.b)("p",null,"font-family：定义文本的字体，如：font-family: arial;\nfont-size：字体尺寸，如：font-size: 18px;\nfont-style ：字体样式，如：font-style: italic;\nfont-weight：字体的粗细，如：font-weight: bold;\n文本相关属性"),Object(l.b)("p",null,"color：定义文字颜色，如：color: red;\nline-height：设置行高，如：line-height: 1.5;\ntext-align：文本的水平对齐方式，如：text-aligin: center;\ntext-decoration：文本的装饰效果，如：text-decoration: underline;\ntext-indent：首行的缩进，如：text-indent: 2em;\ntext-shadow：文本的阴影效果，如：text-shadow: 0 0 5px #ff0000;\n列表属性"),Object(l.b)("p",null,"list-style：在一个声明中设置所有的列表属性\nlist-style-image：将图象设置为列表项标记\nlist-style-position：设置列表项标记的放置位置\nlist-style-type：设置列表项标记的类型\n上面的几个属性一般只作用于ul/ol、li元素重置的时候（其他时候几乎从来不用），使用的时候也是使用第一个简写的形式（简写形式以后的课程将会详细介绍），如："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"ul, ol {\n /* 第一个none表示image，outside表示position，第二个none表示type */  \n list-style: none outside none; \n}\n")),Object(l.b)("p",null,"表格属性"),Object(l.b)("p",null,"border-collapse：是否合并表格边框\nborder-spacing：相邻单元格边框之间的距离\ntable-layout：设置表格的布局算法\n上面三个属性，只作用于 table 元素，其余元素都没有作用，如："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"table {\n border-collapse:collapse;\n border-spacing: 0;\n table-layout: fixed;\n}\n")),Object(l.b)("p",null,"盒子相关"),Object(l.b)("p",null,"盒子相关属性可以等到学完本章的“CSS 盒子”内容之后再来查阅。"),Object(l.b)("p",null,"盒子大小"),Object(l.b)("p",null,"主要是宽高及最小和最大宽高。"),Object(l.b)("p",null,"width\nmin-width\nmax-width\nheight\nmin-height\nmax-height\nbox-sizing\n简单示例如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"div {\n width: 200px;\n min-height: 400px;\n}\n")),Object(l.b)("p",null,"盒子边框"),Object(l.b)("p",null,"每个元素都有四条边，你可以给任何一条边设置边框，分别为上（top）、右（right）、下（bottom）、左（left）表示，而每个边框又包括宽度（width）、样式（style）及颜色（color）三个样式，这样组合起来就有很多属性了，不过我们一般使用简写的模式来写。"),Object(l.b)("p",null,"border：简写模式，四边边框\nborder-width：边框宽度\nborder-style：边框样式，常用的为solid和dashed\nborder-color：边框颜色\nborder-top：上边框\nborder-right：右边框\nborder-bottom：下边框\nborder-left：左边框\n这里来几个简单的例子，更详细的请参考各个属性文档。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"p {\n /* \n 四边样式 \n 1px为border-width\n solid为border-style\n #f00为border-color\n */ \n border: 1px solid #f00; \n}\ndiv {\n border-top: 2px dashed #f00; /* 单边样式 */\n}\nspan {\n border: 1px solid #ccc; /* 先定义四边样式 */\n border-top-color: #f00; /* 重新定义上边框的颜色 */\n}\nh1 {\n border: 1px dashed #999; /* 先定义四边样式 */\n border-width: 1px 2px; /* 重新边框的宽度 */\n}\n")),Object(l.b)("p",null,"盒子内外边距"),Object(l.b)("p",null,"内边距为 padding，外边距为 margin，和 border 一样，也有四边可以设置，分别为上（top）、右（right）、下（bottom）、左（left），同样我们一般也采用简写的形式。"),Object(l.b)("p",null,"margin\nmargin-top\nmargin-right\nmargin-bottom\nmargin-left\npadding\npadding-top\npadding-right\npadding-bottom\npadding-left\n简单示例如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"h1 {\n margin-top: 0; /* 外边距上 */\n margin-bottom: 20px; /* 外边距下 */\n}\np {\n margin: 0; /* 外边距 */\n}\ndiv {\n padding: 15px 20px; /* 内边距，15px为上下值，20px为左右值 */\n margin: 0 20px 30px; /* 外边距，0为上，20p为左右，30px为下 */\n}\n")),Object(l.b)("p",null,"盒子背景"),Object(l.b)("p",null,"设置背景图片，背景颜色，图片位置及是否平铺等，一般也采用简写形式。"),Object(l.b)("p",null,"background：总的简写形式，包括了下面各个单条属性\nbackground-color：背景色\nbackground-image：背景图片\nbackground-position：背景图片起始位置\nbackground-repeat：背景图片平铺方式\nbackground-size：背景图片大小\nbackground-clip：背景图片绘制区域\nbackground-origin：背景图片的定位区域\n简单示例如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"p {\n background: #f00;\n}\ndiv {\n background: url(logo.png) no-repeat #fff;\n}\n")),Object(l.b)("p",null,"盒子显示隐藏"),Object(l.b)("p",null,"overflow：指定当内容溢出其块级容器时,是否剪辑内容，渲染滚动条或显示内容\nvisibility：是否可见\n盒子其他"),Object(l.b)("p",null,"border-radius：圆角\nbox-shadow：阴影\n空间位置相关"),Object(l.b)("p",null,"这一块涉及元素定位布局，第三章会详细讲解。"),Object(l.b)("p",null,"display\nfloat\nclear\nposition\ntop\nright\nbottom\nleft\ntransform\nz-index\nopacity\n动画相关"),Object(l.b)("p",null,"同样这块我们也在第三章再具体介绍"),Object(l.b)("p",null,"transition\nanimation"),Object(l.b)("h1",{id:"css颜色"},"css颜色"),Object(l.b)("p",null,"颜色的值可以设置为关键词(如red)，16进制(#ff0000)或rgb(255,0,0)，除此之外，还有2个关键词：transparent 和 currentColor。currentColor表示当前元素的文字颜色，如果没有则继承父元素的color。"),Object(l.b)("p",null,"css颜色名"),Object(l.b)("p",null,Object(l.b)("a",b({parentName:"p"},{href:"http://www.w3school.com.cn/cssref/css_colornames.asp"}),"http://www.w3school.com.cn/cssref/css_colornames.asp")),Object(l.b)("p",null,"十六进制"),Object(l.b)("p",null,"rgb定义颜色："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"rgb(255, 0, 0)\nrgb(0%, 50%, 20%);\n")),Object(l.b)("p",null,"rgba()\nalpha透明度"),Object(l.b)("p",null,"hsl 是什么，回忆图片\nhue(色调), saturation(饱和度), lightness(亮度)"),Object(l.b)("p",null,"hsl(0, 100%, 50%)"),Object(l.b)("p",null,"hsla()"),Object(l.b)("h2",{id:"十六进制和rgb的换算关系"},"十六进制和rgb的换算关系"),Object(l.b)("p",null,"十六进制换成rgb值的公式为:"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"ff -> 15*16 + 15 = 255\n00 -> 0*16 + 0 = 0\n")),Object(l.b)("h2",{id:"自定义字体font-face"},"自定义字体@font-face"),Object(l.b)("p",null,"@font-face 的语法规则如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@font-face {\n    font-family: <fontFamily>; /* 自定义的字体名称; */\n    src: <source> [<format>][,<source> [<format>]]*;  /* 自定义的字体的存放路径、格式; */\n    [font-weight: <weight>]; /*  是否为粗体 */ \n    [font-style: <style>]; /*  定义字体样式，如斜体 */\n}\n")),Object(l.b)("p",null,"其取值说明如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"fontFamily 此值指的就是你自定义的字体名称，如“font-family: myFirstFont”。")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"source 此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝对路径。")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"format 此值表达自定义的字体的格式，用于帮助浏览器识别字体类型。")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"weight和style 这两个值大家一定很熟悉，weight 定义字体是否为粗体，style 主要定义字体样式，如斜体。")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",b({parentName:"p"},{href:"https://www.dafont.com/"}),"https://www.dafont.com/")))),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@font-face {\n    font-family: Quinzey;\n    src: url('./font/Quinzey.otf')\n}\n\ndiv {\n    font-family: Quinzey;\n    font-size: 30px;\n}\n")),Object(l.b)("h2",{id:"字体格式"},"字体格式"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"TrueType (.ttf)")),Object(l.b)("p",null,"Windows 和 Mac 系统最常用的字体格式，其最大的特点就是它是由一种数学模式来进行定义的基于轮廓技术的字体，这使得它们比基于矢量的字体更容易处理，保证了屏幕与打印输出的一致性。同时，这类字体和矢量字体一样可以随意缩放、旋转而不必担心会出现锯齿。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"OpenType (.otf)")),Object(l.b)("p",null,"OpenType 是一种可缩放字型（scalable font）电脑字体类型，采用 PostScript 格式，是美国微软公司与Adobe 公司联合开发，用来替代 TrueType 字型的新字型。这类字体的文件扩展名为.otf，类型代码是 OTTO。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Embedded Open Type (.eot)")),Object(l.b)("p",null,"嵌入字体格式（EOT）是微软开发的一种技术，允许 OpenType 字体嵌入到网页并可以下载至浏览器渲染。这些文件只在当前页活动的状态下，临时安装在用户的系统中。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Web Open Font Format (.woff)")),Object(l.b)("p",null,"相对于 TrueType 和 OpenType ，WOFF（Web开发字体格式）是一种专门为了 Web 而设计的字体格式标准，它并不复杂，实际上只是对于 TrueType / OpenType 等字体格式的封装，并针对网络使用加以优化：每个字体文件中含有字体以及针对字体的元数据（ Metadata ），字体文件被压缩，以便于网络传输，并且不包含任何加密或者 DRM 措施。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Scalable Vector Graphics Fonts (.svg)")),Object(l.b)("p",null,"顾名思义，就是使用SVG技术来呈现字体，还有一种 gzip 压缩格式的 SVG 字体 .svgz。"),Object(l.b)("p",null,"这么多字体带来的问题是浏览器的支持：目前现代浏览器基本都支持 .ttf、 .otf、 .woff 的字体格式。但需要注意的是 IE8以下仅支持 .eot 格式，而 .svg 目前只有 safari 支持。"),Object(l.b)("h2",{id:"如何兼容"},"如何兼容"),Object(l.b)("p",null,"通过上面我们可以了解到若在使用 @font-face 规则时仅仅考虑一种字体格式，则可能导致在某些浏览器中无法生效。因此为了兼容不同的浏览器，我们一般会使用多个格式，如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@font-face {\n    font-family: 'myFont';\n    src: url('myFont.eot'); /* IE9 Compat Modes */\n    src: url('myFont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n         url('myFont.woff') format('woff'), /* Modern Browsers */\n}\n")),Object(l.b)("p",null,"可以设置多个，粗体，细。"),Object(l.b)("h2",{id:"自定义图标字体-iconfont"},"自定义图标字体 (iconfont)"),Object(l.b)("p",null,"对于使用图片的图标来说，iconfont 图标有许多优点："),Object(l.b)("p",null,"灵活性：改变图标的颜色，背景色，大小都非常简单\n兼容性：基本没有兼容性问题，在IE6，Android2.3都能够兼容\n扩展性：替换图标很方便，新增图标也非常简单\n高效性：iconfont有矢量特性，不会失真\n轻便性：在使用上字体文件和普通的静态资源一样，既可以外链也可以内链，并且字体文件也可以使用gzip压缩"),Object(l.b)("h2",{id:"字体资源与字体图标库"},"字体资源与字体图标库"),Object(l.b)("p",null,"dafont\n有字库\nGoogleFont（需要翻墙）\n字蛛\nFontello\nicomoon\niconfont"),Object(l.b)("h1",{id:"css-display属性详解"},"css display属性详解"),Object(l.b)("p",null,"我们知道，div、p、ul这些元素是单独占用一行显示的，而 span、i、em等这些元素是在一行显示的，元素的显示样式是css的范畴，它是由元素的 ",Object(l.b)("inlineCode",{parentName:"p"},"display")," 属性来控制的。"),Object(l.b)("p",null,"display的取值大致分为四类："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"基本值：none、inline、block、inline-block"),Object(l.b)("li",{parentName:"ul"},"flexbox系列：flexbox"),Object(l.b)("li",{parentName:"ul"},"grid系列: grid"),Object(l.b)("li",{parentName:"ul"},"table系列: table、table-cell、table-row")),Object(l.b)("h2",{id:"基本值"},"基本值"),Object(l.b)("p",null,"设置为",Object(l.b)("inlineCode",{parentName:"p"},"none"),"时，元素隐藏。"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"inline"),"和",Object(l.b)("inlineCode",{parentName:"p"},"block"),"的区别除了显示效果之外，",Object(l.b)("inlineCode",{parentName:"p"},"inline"),"元素的行高、上下",Object(l.b)("inlineCode",{parentName:"p"},"margin")," 无效。"),Object(l.b)("p",null,"当元素设置了 ",Object(l.b)("inlineCode",{parentName:"p"},"inline-block")," 时，有一个问题，就是相邻元素会产生空隙，这是由于空白字符导致的，解决方法有2个："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"删除空格，不推荐"),Object(l.b)("li",{parentName:"ol"},"将父元素 ",Object(l.b)("inlineCode",{parentName:"li"},"font-size")," 设置为0，然后再给子元素设置 ",Object(l.b)("inlineCode",{parentName:"li"},"font-size")," 即可。")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"inline-block"),"属于行内级元素，所以可以使用 ",Object(l.b)("inlineCode",{parentName:"p"},"vertical-align")," 设置文本对齐方式。"),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"./img/inline-block-baseline.png",alt:null})),"。"),Object(l.b)("p",null,"文本有四条基本线，如上图所示。"),Object(l.b)("h2",{id:"table系列"},"table系列"),Object(l.b)("p",null,"当设置元素 ",Object(l.b)("inlineCode",{parentName:"p"},"display: table")," 时，它就具有了表格属性，里面的一行设置为 ",Object(l.b)("inlineCode",{parentName:"p"},"display: table-row"),"，单元格设置为 ",Object(l.b)("inlineCode",{parentName:"p"},"display: table-cell"),"。"),Object(l.b)("p",null,"而且如 ",Object(l.b)("inlineCode",{parentName:"p"},"vertical-align")," 这样的属性也是生效的。比如:"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'// css\n.box {\n    display: table;\n    border-collapse: collapse;\n}\n\n.row {\n    display: table-row\n}\n\n.box1 {\n    display: table-cell;\n    width: 100px;\n    height: 100px;\n    border: 1px solid red;\n}\n\n// html\n<div class="box">\n    <div class="row">\n        <div class="box1"></div>\n        <div class="box1"></div>\n        <div class="box1"></div>\n    </div>\n    <div class="row">\n        <div class="box1"></div>\n        <div class="box1"></div>\n        <div class="box1"></div>\n    </div>\n</div>\n')),Object(l.b)("p",null,"上面代码的显示效果如下图："),Object(l.b)("p",null,Object(l.b)("img",b({parentName:"p"},{src:"./img/display_table.png",alt:null}))),Object(l.b)("h1",{id:"flex布局"},"flex布局"),Object(l.b)("p",null,"flex布局刚开始学习的时候会感觉比较复杂，因为网上介绍它的很多文章都比较长。但是其实静下心来学习一遍后，会发现它很简单。"),Object(l.b)("p",null,"当给一个盒子设置了 ",Object(l.b)("inlineCode",{parentName:"p"},"display: flex")," 属性后，它的子元素就形成了 flex 布局模型。"),Object(l.b)("p",null,"关于父盒子有如下属性"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"flex-direction"),Object(l.b)("li",{parentName:"ul"},"flex-wrap"),Object(l.b)("li",{parentName:"ul"},"flex-flow: 上面2个属性的缩写"),Object(l.b)("li",{parentName:"ul"},"justify-content"),Object(l.b)("li",{parentName:"ul"},"align-items"),Object(l.b)("li",{parentName:"ul"},"align-content")),Object(l.b)("p",null,"下面是子盒子的属性："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"flex-grow: 父盒子空间有富余时，子元素怎么占用"),Object(l.b)("li",{parentName:"ul"},"flex-shrink: 子盒子空间超出父盒子空间时，子元素怎么收缩"),Object(l.b)("li",{parentName:"ul"},"flex-basis: 在主轴上的长度，会覆盖width或height属性"),Object(l.b)("li",{parentName:"ul"},"flex: 上面3个属性的缩写,默认是 0 1 auto。auto (1 1 auto) 和 none (0 0 auto)。"),Object(l.b)("li",{parentName:"ul"},"align-self: 子盒子自身在副轴上的分布，覆盖align-items"),Object(l.b)("li",{parentName:"ul"},"order")),Object(l.b)("p",null,"引入css有四种方式"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"行内式")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'<div style="color:red"></div>\n')),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"内嵌式")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'<style type="text/css">\n    div {color: red}\n</style>\n')),Object(l.b)("ol",{start:3},Object(l.b)("li",{parentName:"ol"},"外链式")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'<link rel="stylesheet" type="text/css" href="style.css">\n')),Object(l.b)("p",null,"优点是容易维护，能复用，因为浏览器有缓存。"),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"@import导入方式")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'<style>\n    @import url(style.css);\n</style>\n\n也可以在css文件中 @import url("style.css")或者 @import "style.css"\n')),Object(l.b)("p",null,"@import也是引入外部css文件，不过它和外链有如下区别："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"范畴不同： ",Object(l.b)("inlineCode",{parentName:"li"},"<link>")," 属于 HTML 元素，通过其href属性来引入外部文件；而 @import 属于 CSS，所以导入语句应写在 CSS 中，要注意的是导入语句应写在样式表的开头，否则无法正确导入外部文件"),Object(l.b)("li",{parentName:"ul"},"兼容性差别： ",Object(l.b)("inlineCode",{parentName:"li"},"@import")," 是 ",Object(l.b)("inlineCode",{parentName:"li"},"CSS2.1")," 才出现的概念，所以如果浏览器版本较低，无法正确导入外部样式文件；而",Object(l.b)("inlineCode",{parentName:"li"},"<link>"),"则没有任何兼容问题；"),Object(l.b)("li",{parentName:"ul"},"加载顺序不同：当 HTML 文件被加载时，",Object(l.b)("inlineCode",{parentName:"li"},"<link>"),"引用的文件会同时被加载，而 @import引用的文件则会等页面全部下载完毕再被加载"),Object(l.b)("li",{parentName:"ul"},"js 修改支持：",Object(l.b)("inlineCode",{parentName:"li"},"<link>"),"支持使用JavaScript控制DOM改变CSS样式，@import不支持")),Object(l.b)("h1",{id:"媒体查询media"},"媒体查询media"),Object(l.b)("p",null,"媒体查询可以使用",Object(l.b)("inlineCode",{parentName:"p"},"and"),"、",Object(l.b)("inlineCode",{parentName:"p"},"not"),"或",Object(l.b)("inlineCode",{parentName:"p"},"only"),"组合。它的2种引入方式如下"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),'// 1、外链，css始终会加载，只是不被应用\n<link rel="stylesheet" media="print and (max-width: 800px)" href="1.css">\n\n// 2、内嵌\n<style>\n    @media (max-width: 600px){\n        .box{\n            display: none;\n        }\n    }\n</style>\n')),Object(l.b)("p",null,"除非使用not或only操作符，否则媒体类型是可选的，默认值是all(全部)。若使用了not或only操作符，必须明确指定一个媒体类型。"),Object(l.b)("p",null,"你也可以将多个媒体查询以逗号分隔放在一起；只要其中任何一个为真，整个媒体语句就返回真。相当于or操作符。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@media (min-width: 700px) { ... }\n(min-width: 700px) and (orientation: landscape) { ... }\n@media tv and (min-width: 700px) and (orientation: landscape) { ... }\n\n@media (min-width: 700px), handheld and (orientation: landscape) { ... }\n")),Object(l.b)("p",null," not关键字仅能应用于整个查询，而不能单独应用于一个独立的查询。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@media not all and (monochrome) { ... }\n// 等价于\n@media not (all and (monochrome)) { ... }\n\n@media not screen and (color), print and (color)\n// 等价于\n@media (not (screen and (color))), print and (color)\n")),Object(l.b)("p",null,"color表示彩色显示设备, media/visual。指定输出设备每个像素单元的比特值。如果设备不支持输出颜色，则该值为0。\n注意：如果每个颜色单元具有不同数量的比特值，则使用最小的。例如，如果显示器为蓝色和红色提供5比特，而为绿色提供6比特，则认为每个颜色单元有5比特。如果设备使用索引颜色，则使用颜色表中颜色单元的最小比特数。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"@media all and (color) { ... }\n\n//向每个颜色单元至少有4个比特的设备应用样式表：\n@media all and (min-color: 4) { ... }\n")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"media_query_list: <media_query> [, <media_query> ]*\nmedia_query: [[only | not]? <media_type> [ and <expression> ]*]\n  | <expression> [ and <expression> ]*\nexpression: ( <media_feature> [: <value>]? )\nmedia_type: all | aural (阅读设备)| braille (盲文)| handheld | print |\n  projection (项目演示，比如幻灯)| screen (彩色电脑屏幕) | tty | tv | embossed (盲文打印)\nmedia_feature: width | min-width | max-width\n  | height | min-height | max-height\n  | device-width | min-device-width | max-device-width\n  | device-height | min-device-height | max-device-height\n  | aspect-ratio | min-aspect-ratio | max-aspect-ratio\n  | device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio\n  | color | min-color | max-color\n  | color-index | min-color-index | max-color-index\n  | monochrome | min-monochrome | max-monochrome\n  | resolution | min-resolution | max-resolution\n  | scan | grid | orientation protrait/landscape\n")),Object(l.b)("p",null,"媒体查询是大小写不敏感的，包含未知媒体类型的查询通常返回假。"),Object(l.b)("p",null,"大多数媒体属性可以带有“min-”或“max-”前缀，用于表达“最低...”或者“最高...”。例如，max-width:12450px表示应用其所包含样式的条件最高是宽度为12450px，大于12450px则不满足条件，不会应用此样式。这避免了使用与HTML和XML冲突的“<”和“>”字符。如果你未向媒体属性指定一个值，并且该特性的实际值不为零，则该表达式被解析为真。"),Object(l.b)("h2",{id:"实战"},"实战"),Object(l.b)("p",null,"当做响应式设计时，需要根据不同的屏幕尺寸来设置媒体查询。常用尺寸如下："),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"- 手机横屏 544px\n- 平板竖屏 768px\n- pc窄屏  992px\n- pc宽屏  1200px\n- pc超大屏1380px\n")),Object(l.b)("p",null,"写媒体查询还需要考虑移动优先，或者PC优先，如果移动优先，可以先写移动端样式，再逐渐增加屏幕适配。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"// 手机样式\n.box{}\n\n// 适配pc，大于或等于1200px。注意max 和 min 都是包含1200px\n@media screen and (min-width: 1200px){}\n")),Object(l.b)("p",null,"这样做的好处是移动端首先加载，另外移动端一般样式简单，pc端需要覆盖的样式会很少。"),Object(l.b)("h2",{id:"参考文章"},"参考文章"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#Media_features"}),"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#Media_features")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"http://www.cnblogs.com/august-8/p/4537685.html"}),"http://www.cnblogs.com/august-8/p/4537685.html"))),Object(l.b)("h2",{id:"border"},"border"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"border-width")," 不能是百分比，还可以设置为",Object(l.b)("inlineCode",{parentName:"li"},"thin"),"(1px),",Object(l.b)("inlineCode",{parentName:"li"},"normal"),"(3px),",Object(l.b)("inlineCode",{parentName:"li"},"thick"),"(5px)。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"border-style"),"的值可以是",Object(l.b)("inlineCode",{parentName:"li"},"solid"),"、",Object(l.b)("inlineCode",{parentName:"li"},"dashed"),"和",Object(l.b)("inlineCode",{parentName:"li"},"dotted"),"，",Object(l.b)("inlineCode",{parentName:"li"},"dashed"),"虚线在",Object(l.b)("inlineCode",{parentName:"li"},"ie"),"(长宽比2/1)和",Object(l.b)("inlineCode",{parentName:"li"},"chrome"),"(长宽比3/1)表现不一致。",Object(l.b)("inlineCode",{parentName:"li"},"dotted"),"在",Object(l.b)("inlineCode",{parentName:"li"},"chrome"),"为方点，而在",Object(l.b)("inlineCode",{parentName:"li"},"ie"),"为园点。另外还有些属性",Object(l.b)("inlineCode",{parentName:"li"},"double"),"(双线)、",Object(l.b)("inlineCode",{parentName:"li"},"groove"),"(凹槽)、",Object(l.b)("inlineCode",{parentName:"li"},"ridge"),"（垄状）、",Object(l.b)("inlineCode",{parentName:"li"},"inset"),"、",Object(l.b)("inlineCode",{parentName:"li"},"outset"),"。3d属性在各浏览器表现都不一致，另外现在流行扁平化，所以基本不用。"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"border-color"),"会继承",Object(l.b)("inlineCode",{parentName:"li"},"color"),"的颜色。")),Object(l.b)("h2",{id:"filter"},"filter"),Object(l.b)("p",null,"之前ie的",Object(l.b)("inlineCode",{parentName:"p"},"filter"),"已经废弃。最新的",Object(l.b)("inlineCode",{parentName:"p"},"filter"),"支持",Object(l.b)("inlineCode",{parentName:"p"},"edge"),"。"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"filter: url(resource.svg#c1)   \nblur()\n")),Object(l.b)("p",null,"css选择器的解析是从右往左的，比如",Object(l.b)("inlineCode",{parentName:"p"},"#div a"),"并不是先查找id为div的元素，然后再找里面的a元素。而是首先在页面中找所有的a，再看每一个a有没有一个id为div的祖先元素。"),Object(l.b)("p",null,"所以，为了优化页面，需要写出高效的css选择器。"),Object(l.b)("h2",{id:"选择器效率"},"选择器效率"),Object(l.b)("p",null,"各种 CSS 选择器的效率由高至低排序如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"id选择器（#myid）"),Object(l.b)("li",{parentName:"ul"},"类选择器（.myclassname）"),Object(l.b)("li",{parentName:"ul"},"标签选择器（div,h1,p）"),Object(l.b)("li",{parentName:"ul"},"相邻选择器（h1 + p）"),Object(l.b)("li",{parentName:"ul"},"子选择器（ul > li）"),Object(l.b)("li",{parentName:"ul"},"后代选择器（li a）"),Object(l.b)("li",{parentName:"ul"},"通配符选择器（*）"),Object(l.b)("li",{parentName:"ul"},"属性选择器（a",'[rel="external"]',"）"),Object(l.b)("li",{parentName:"ul"},"伪类选择器（a:hover,li:nth-child）")),Object(l.b)("h2",{id:"优化方法"},"优化方法"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"不要使用通用选择器"),Object(l.b)("li",{parentName:"ol"},"不要限制id，class选择器。比如不要写",Object(l.b)("inlineCode",{parentName:"li"},"div#box"),"这样的代码"),Object(l.b)("li",{parentName:"ol"},"层级尽量减短"),Object(l.b)("li",{parentName:"ol"},"避免使用子选择器"),Object(l.b)("li",{parentName:"ol"},"使用继承")),Object(l.b)("h1",{id:"css形状"},"css形状"),Object(l.b)("h2",{id:"三角形"},"三角形"),Object(l.b)("h3",{id:"朝上三角形"},"朝上三角形"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n")),Object(l.b)("h3",{id:"朝下三角形"},"朝下三角形"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"#triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n")),Object(l.b)("h3",{id:"朝左三角形"},"朝左三角形"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n")),Object(l.b)("h3",{id:"朝右三角形"},"朝右三角形"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n")),Object(l.b)("h3",{id:"上左"},"上左"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"#triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n")),Object(l.b)("h2",{id:"参考资料-1"},"参考资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://css-tricks.com/examples/ShapesOfCSS/"}),"https://css-tricks.com/examples/ShapesOfCSS/"))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{href:"http://apps.eky.hk/css-triangle-generator/zh-hant"},"css三角形生成器"))),Object(l.b)("h1",{id:"table表格样式"},"table表格样式"),Object(l.b)("p",null,"table css属性有下面几个："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"border-collapse"),Object(l.b)("li",{parentName:"ul"},"border-colspacing"),Object(l.b)("li",{parentName:"ul"},"caption-side"),Object(l.b)("li",{parentName:"ul"},"empty-cells"),Object(l.b)("li",{parentName:"ul"},"table-layout")),Object(l.b)("p",null,"css的单位主要有以下几个："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"px：px是绝对单位"),Object(l.b)("li",{parentName:"ul"},"em：1em 等于父元素设置的字体大小。如果父元素没有设置字体大小，则继续往父级元素查找，直到有设置大小的，如果都没有设置大小，则使用浏览器默认的字体大小。其它属性border, width, height, padding, margin, line-height是参照该元素的font-size计算的，如果没有设置，则往父级查找，都没有设置，则使用浏览器默认的字体大小。计算较复杂，不建议使用"),Object(l.b)("li",{parentName:"ul"},"rem：r表示root，是相对于根元素html的font-size来计算的。修改了html的font-size，则所有的尺寸都会变化。")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"html {\n font-size: 625%; /* 相当于100px = 625% * 16px */\n}\ndiv {\n font-size: 20px; \n width: 2rem; /* 2rem = 2 * 100px(根元素的font-size) */\n height: 4rem; /* 4rem = 4 * 100px(根元素的font-size) */\n padding: 0.1rem; /* 0.1rem = 0.1 * 100px(根元素的font-size) */\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"%：如果html font-size为62.5%，是以浏览器默认字体计算的，即（62.5% * 16px = 10px），所有浏览器默认字体大小为16px"),Object(l.b)("li",{parentName:"ul"},"vw,vh,vmin,vmax：是基于视窗大小来计算的。1vw是视窗宽度(html，不是body，因为body有margin:8px;)的的百分之一。vmin表示vw和vh中最小值。安卓4.3以下不兼容，以后再用。")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),".box {\n height: 50vh; /* 视窗高度的50% */\n width: 25vw; /* 视窗宽度的25% */\n background: red;\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"单位运算：")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),".box {\n height: calc(50vh - 20px); /* 50% 的视窗高度减掉20px */\n width: calc(100% - 10px);  /* 三分之一的父容器宽度 */\n background: red;\n}\n")),Object(l.b)("p",null,"兼容性不好，先不用。"),Object(l.b)("h1",{id:"常用-css-样式大全"},"常用 css 样式大全"),Object(l.b)("h2",{id:"修改-placeholder-的颜色"},"修改 placeholder 的颜色"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),"input::-webkit-input-placeholder, textarea::-webkit-input-placeholder { \n    color: #666; \n} \ninput:-moz-placeholder, textarea:-moz-placeholder { \n    color: #666; \n} \ninput::-moz-placeholder, textarea::-moz-placeholder { \n    color: #666; \n} \ninput:-ms-input-placeholder, textarea:-ms-input-placeholder { \n    color: #666; \n} \n")),Object(l.b)("h1",{id:"样式计算"},"样式计算"),Object(l.b)("h2",{id:"样式的继承"},"样式的继承"),Object(l.b)("p",null,"样式的来源有三种："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"浏览器默认样式"),Object(l.b)("li",{parentName:"ul"},"继承的样式"),Object(l.b)("li",{parentName:"ul"},"自定义样式")),Object(l.b)("p",null,"哪些样式会被继承，哪些不会被继承。"),Object(l.b)("p",null,"比如背景、border这些不会被继承，font-size可以被继承。是通用的属性。"),Object(l.b)("h2",{id:"一些概念"},"一些概念"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"应用值，如果有自定义，则使用自定义，如果没有，则看是否继承。",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"继承：则使用父元素的应用值，这种方式叫做继承值inherit"),Object(l.b)("li",{parentName:"ul"},"非继承，则使用初始值initial，比如width: auto。"))),Object(l.b)("li",{parentName:"ul"},"初始值"),Object(l.b)("li",{parentName:"ul"},"指定值"),Object(l.b)("li",{parentName:"ul"},"计算值")),Object(l.b)("h2",{id:"样式的层叠"},"样式的层叠"),Object(l.b)("p",null,"自定义样式 > 浏览器默认样式 > 继承"),Object(l.b)("h2",{id:"样式优先级"},"样式优先级"),Object(l.b)("p",null,"!import > style > id > class 伪类 属性选择器> tag 伪元素 > * > 浏览器默认 > 继承"),Object(l.b)("h2",{id:"css-reset"},"css reset"),Object(l.b)("p",null,"由于很多元素默认样式在不同浏览器上表现不一致，所以需要css reset，有2种不同的方式"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"normalize.css 设置为一致"),Object(l.b)("li",{parentName:"ul"},"reset.css 全部清零")),Object(l.b)("h2",{id:"浏览器兼容"},"浏览器兼容"),Object(l.b)("p",null,"解决浏览器兼容的步骤如下："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"看属性是否支持")),Object(l.b)("p",null,"有些属性在各个浏览器表现不一致，可以通过",Object(l.b)("a",b({parentName:"p"},{href:"https://caniuse.com/#index"}),"can i use")," 来查看。"),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"针对某个浏览器进行修复")),Object(l.b)("p",null,"如果要修复样式，可以使用hack， ",Object(l.b)("a",b({parentName:"p"},{href:"http://browserhacks.com/"}),"http://browserhacks.com/")),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{}),".inline-block {\n    display: inline-block;\n    *display: inline;  // ie6/7不兼容\n    *zoom: 1;\n}\n")),Object(l.b)("h2",{id:"继承和非继承属性"},"继承和非继承属性"),Object(l.b)("p",null,"常见继承属性"),Object(l.b)("p",null,"文本相关属性都可以继承"),Object(l.b)("p",null,"color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、letter-spacing、word-spacing、white-space、word-break、overflow-wrap、line-height、direction、text-indent、text-align、text-shadow"),Object(l.b)("p",null,"列表相关属性"),Object(l.b)("p",null,"list-style-image、list-style-position、list-style-type、list-style"),Object(l.b)("p",null,"表格相关属性"),Object(l.b)("p",null,"border-collapse、border-spacing"),Object(l.b)("p",null,"visibility 和 cursor"),Object(l.b)("p",null,"常见非继承属性"),Object(l.b)("p",null,"盒模型相关属性"),Object(l.b)("p",null,"margin、border、padding、height、min-height、max-height、width、min-width、max-width、box-sizing"),Object(l.b)("p",null,"布局类属性"),Object(l.b)("p",null,"display、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align"),Object(l.b)("p",null,"系列类"),Object(l.b)("p",null,"background 系列、transform 系列、transtion 系列、animation 系列、flexbox 系列、grid 系列"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference"}),"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://www.w3.org/TR/CSS22/"}),"https://www.w3.org/TR/CSS22/"))),Object(l.b)("h1",{id:"网格布局"},"网格布局"),Object(l.b)("h2",{id:"自定义chrome滚动条样式"},"自定义chrome滚动条样式"),Object(l.b)("pre",null,Object(l.b)("code",b({parentName:"pre"},{className:"language-css"}),"::-webkit-scrollbar {\n  width: 6px;\n  height: 4px;\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.15);\n}\n\n::-webkit-scrollbar-thumb:window-inactive {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n::-webkit-scrollbar-thumb:vertical {\n  height: 4px;\n  background: rgba(0, 0, 0, 0.15);\n}\n\n::-webkit-scrollbar-thumb:horizontal {\n  width: 4px;\n  background: rgba(0, 0, 0, 0.15);\n}\n\n::-webkit-scrollbar-thumb:vertical:hover {\n  background-color: rgba(0, 0, 0, 0.3);\n}\n\n::-webkit-scrollbar-thumb:vertical:active {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1);\n  box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1);\n}\n\n::-webkit-scrollbar-track-piece {\n  background: rgba(0, 0, 0, 0.15);\n}\n")),Object(l.b)("h2",{id:"参考资料-2"},"参考资料"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",b({parentName:"li"},{href:"https://github.com/ljianshu/Blog/issues/29"}),"如何居中一个元素（终结版）"))))}p.isMDXComponent=!0},245:function(e,t,n){"use strict";n.d(t,"a",function(){return c}),n.d(t,"b",function(){return d});var l=n(0),b=n.n(l),a=b.a.createContext({}),i=function(e){var t=b.a.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=i(e.components);return b.a.createElement(a.Provider,{value:t},e.children)},r="mdxType",o={inlineCode:"code",wrapper:function(e){return b.a.createElement(b.a.Fragment,{},e.children)}},p=function(e){var t=e.components,n=e.mdxType,l=e.originalType,a=e.parentName,c=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}(e,["components","mdxType","originalType","parentName"]),r=i(t);return b.a.createElement(r[a+"."+n]||r[n]||o[n]||l,t?Object.assign({},c,{components:t}):c)};function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[r]="string"==typeof e?e:l,i[1]=c;for(var d=2;d<a;d++)i[d]=n[d];return b.a.createElement.apply(null,i)}return b.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);