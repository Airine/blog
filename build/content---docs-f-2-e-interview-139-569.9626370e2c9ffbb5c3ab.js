(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{301:function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return o});var l=n(0),a=n.n(l),b=a.a.createContext({}),c=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=c(e.components);return a.a.createElement(b.Provider,{value:t},e.children)};var r="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=function(e){var t=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,i=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}(e,["components","mdxType","originalType","parentName"]),r=c(t),u=n,o=r[b+"."+u]||r[u]||p[u]||l;return t?a.a.createElement(o,Object.assign({},i,{components:t})):a.a.createElement(o,i)};function o(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var b=n.length,c=new Array(b);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[r]="string"==typeof e?e:l,c[1]=i;for(var o=2;o<b;o++)c[o]=n[o];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return c}),n.d(t,"rightToc",function(){return i}),n.d(t,"default",function(){return u});n(0);var l=n(301);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},b=Object.keys(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(l=0;l<b.length;l++)n=b[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c={title:"壹题面试题解答"},i=[{value:"2. '1','2','3'.map(parseInt)",id:"2-123mapparseint",children:[]},{value:"3. 防抖与节流区别与实现",id:"3-防抖与节流区别与实现",children:[]},{value:"4. Set、Map、WeakSet 和 WeakMap 的区别",id:"4-set、map、weakset-和-weakmap-的区别",children:[]},{value:"7. ES5 和 ES6 继承的区别",id:"7-es5-和-es6-继承的区别",children:[]},{value:"21. 判断数组的方法",id:"21-判断数组的方法",children:[]},{value:"26. 模块化发展历程",id:"26-模块化发展历程",children:[]},{value:"27.全局下 const 声明变量在哪？",id:"27全局下-const-声明变量在哪？",children:[]},{value:"33. 打印内容",id:"33-打印内容",children:[]},{value:"34. 改造上题，分别打印10和20",id:"34-改造上题，分别打印10和20",children:[]},{value:"39. 介绍下 BFC 及其应用?",id:"39-介绍下-bfc-及其应用",children:[]},{value:"41. 输出",id:"41-输出",children:[]},{value:"43. 输出结果",id:"43-输出结果",children:[]},{value:"46. 输出结果",id:"46-输出结果",children:[]},{value:"绝对定位是根据父元素的什么",id:"绝对定位是根据父元素的什么",children:[]},{value:"52. 怎么让一个 div 水平垂直居中",id:"52-怎么让一个-div-水平垂直居中",children:[]},{value:"53. 执行结果",id:"53-执行结果",children:[]},{value:"57. 三种透明方案的分析比较",id:"57-三种透明方案的分析比较",children:[]},{value:"58. 箭头函数和普通函数的区别",id:"58-箭头函数和普通函数的区别",children:[]},{value:"60. 覆盖 import 让图片宽度 300px",id:"60-覆盖-import-让图片宽度-300px",children:[]},{value:"65. a.b.c 和 a'b' 性能",id:"65-abc-和-ab-性能",children:[]},{value:"66. ES6 代码转 ES5 代码的思路",id:"66-es6-代码转-es5-代码的思路",children:[]},{value:"68.如何解决移动端 1px 像素问题？",id:"68如何解决移动端-1px-像素问题？",children:[]},{value:"73.介绍下 BFC、IFC、GFC 和 FFC?",id:"73介绍下-bfc、ifc、gfc-和-ffc",children:[]},{value:"75. 数组取值",id:"75-数组取值",children:[]},{value:"76. 输出结果",id:"76-输出结果",children:[]},{value:"79.input处理中文",id:"79input处理中文",children:[]},{value:"83.var let const 区别和实现原理",id:"83var-let-const-区别和实现原理",children:[]},{value:"96. 前端加密场景和方法",id:"96-前端加密场景和方法",children:[]},{value:"98. 打印结果",id:"98-打印结果",children:[]},{value:"100. 打印结果",id:"100-打印结果",children:[]},{value:"106. 返回值",id:"106-返回值",children:[]},{value:"108. 打印结果",id:"108-打印结果",children:[]},{value:"109. 打印结果",id:"109-打印结果",children:[]},{value:"116. 输出结果",id:"116-输出结果",children:[]},{value:"136. 实现骨架屏",id:"136-实现骨架屏",children:[]},{value:"koa2",id:"koa2",children:[]},{value:"pm2",id:"pm2",children:[]},{value:"网络",id:"网络",children:[{value:"首屏加载优化",id:"首屏加载优化",children:[]},{value:"Service Worker有哪些作用",id:"service-worker有哪些作用",children:[]},{value:"get 和 post 有什么区别",id:"get-和-post-有什么区别",children:[]},{value:"网络的五层模型",id:"网络的五层模型",children:[]},{value:"HTTP和HTTPS的区别",id:"http和https的区别",children:[]},{value:"介绍SSL和TLS，HTTPS加密过程",id:"介绍ssl和tls，https加密过程",children:[]},{value:"介绍http2.0",id:"介绍http20",children:[]},{value:"介绍DNS解析",id:"介绍dns解析",children:[]},{value:"常见Http请求头",id:"常见http请求头",children:[]},{value:"http 1.1 时如何复用tcp连接",id:"http-11-时如何复用tcp连接",children:[]},{value:"tcp3次握手，四次挥手",id:"tcp3次握手，四次挥手",children:[]},{value:"tcp",id:"tcp",children:[]},{value:"http缓存控制",id:"http缓存控制",children:[]},{value:"介绍下HTTP状态码",id:"介绍下http状态码",children:[]},{value:"403、301、302是什么",id:"403、301、302是什么",children:[]}]},{value:"从输入URL到页面加载全过程",id:"从输入url到页面加载全过程",children:[]},{value:"linux",id:"linux",children:[{value:"Linux 754 介绍",id:"linux-754-介绍",children:[]}]},{value:"js",id:"js",children:[{value:"介绍暂时性死区",id:"介绍暂时性死区",children:[]},{value:"1, 2, 3, 4, 5变成1, 2, 3, a, b, 5",id:"1-2-3-4-5变成1-2-3-a-b-5",children:[]},{value:"如何判断两个变量相等",id:"如何判断两个变量相等",children:[]},{value:"介绍class和ES5的类以及区别",id:"介绍class和es5的类以及区别",children:[]},{value:"介绍箭头函数和普通函数的区别",id:"介绍箭头函数和普通函数的区别",children:[]},{value:"介绍defineProperty方法，什么时候用?",id:"介绍defineproperty方法，什么时候用",children:[]},{value:"for..in 和 object.keys的区别",id:"forin-和-objectkeys的区别",children:[]},{value:"介绍闭包，使用闭包特权函数的使用场景",id:"介绍闭包，使用闭包特权函数的使用场景",children:[]},{value:"let、const以及var的区别",id:"let、const以及var的区别",children:[]},{value:"浅拷贝和深拷贝的区别与实现",id:"浅拷贝和深拷贝的区别与实现",children:[]},{value:"介绍 this 和原型",id:"介绍-this-和原型",children:[]},{value:"使用原型最大的好处",id:"使用原型最大的好处",children:[]},{value:"介绍localstorage的API",id:"介绍localstorage的api",children:[]},{value:"如何处理异常捕获",id:"如何处理异常捕获",children:[]},{value:"JS继承方案和区别",id:"js继承方案和区别",children:[]},{value:"如何判断一个变量是不是数组",id:"如何判断一个变量是不是数组",children:[]},{value:"变量a和b，如何交换",id:"变量a和b，如何交换",children:[]},{value:"多个标签生成的Dom结构",id:"多个标签生成的dom结构",children:[]},{value:"类数组和数组的区别，转换",id:"类数组和数组的区别，转换",children:[]},{value:"cookie 是为了解决什么问题",id:"cookie-是为了解决什么问题",children:[]},{value:"cookie和localStorage的区别",id:"cookie和localstorage的区别",children:[]},{value:"formData和原生的ajax有什么区别",id:"formdata和原生的ajax有什么区别",children:[]},{value:"介绍下表单提交，和 formData 有什么关系",id:"介绍下表单提交，和-formdata-有什么关系",children:[]},{value:"介绍this各种情况",id:"介绍this各种情况",children:[]},{value:"== 和 === 的区别，什么情况下用相等==",id:"-和--的区别，什么情况下用相等",children:[]},{value:"作用域链的理解",id:"作用域链的理解",children:[]},{value:"prototype和proto区别",id:"prototype和proto区别",children:[]}]},{value:"重绘和回流",id:"重绘和回流",children:[{value:"随机值存在一样的情况，如何避免?",id:"随机值存在一样的情况，如何避免",children:[]},{value:"如何找 0-5 的随机数，95-99呢",id:"如何找-0-5-的随机数，95-99呢",children:[]}]},{value:"事件",id:"事件",children:[{value:"浏览器事件流向",id:"浏览器事件流向",children:[]},{value:"事件代理和优缺点",id:"事件代理和优缺点",children:[]},{value:"如何判断是button",id:"如何判断是button",children:[]},{value:"生成一万个button，并且绑定事件，如何做",id:"生成一万个button，并且绑定事件，如何做",children:[]},{value:"事件委托的优点",id:"事件委托的优点",children:[]},{value:"改变 input 后 p 标签就跟着变",id:"改变-input-后-p-标签就跟着变",children:[]},{value:"React的事件机制（绑定一个事件到一个组件上）",id:"react的事件机制（绑定一个事件到一个组件上）",children:[]}]},{value:"性能优化",id:"性能优化",children:[]},{value:"异步",id:"异步",children:[{value:"Promise和setTimeout的区别（Event Loop）",id:"promise和settimeout的区别（event-loop）",children:[]},{value:"浏览器和 node 事件环的区别",id:"浏览器和-node-事件环的区别",children:[]}]},{value:"算法",id:"算法",children:[]},{value:"跨域",id:"跨域",children:[{value:"怎么去解决跨域问题",id:"怎么去解决跨域问题",children:[]},{value:"jsonp方案需要服务端怎么配合",id:"jsonp方案需要服务端怎么配合",children:[]},{value:"加上CORS之后从发起到请求正式成功的过程",id:"加上cors之后从发起到请求正式成功的过程",children:[]},{value:"跨域怎么解决，有没有使用过Apache等方案",id:"跨域怎么解决，有没有使用过apache等方案",children:[]},{value:"Access-Control-Allow-Origin 在服务端哪里配置",id:"access-control-allow-origin-在服务端哪里配置",children:[]},{value:"csrf 跨站攻击怎么解决",id:"csrf-跨站攻击怎么解决",children:[]},{value:"CORS如何设置",id:"cors如何设置",children:[]},{value:"介绍同源策略",id:"介绍同源策略",children:[]},{value:"jsonp 为什么不支持 post 方法",id:"jsonp-为什么不支持-post-方法",children:[]},{value:"jsonp 安全性",id:"jsonp-安全性",children:[]}]},{value:"小程序",id:"小程序",children:[]},{value:"设计模式",id:"设计模式",children:[]},{value:"内存泄露",id:"内存泄露",children:[]},{value:"项目",id:"项目",children:[]},{value:"webpack",id:"webpack",children:[{value:"webpack 打包流程和生命周期",id:"webpack-打包流程和生命周期",children:[]}]},{value:"vue",id:"vue",children:[]},{value:"css",id:"css",children:[{value:"介绍flex布局",id:"介绍flex布局",children:[]},{value:"介绍css3中position:sticky",id:"介绍css3中positionsticky",children:[]},{value:"清除浮动",id:"清除浮动",children:[]}]},{value:"浏览器",id:"浏览器",children:[{value:"居中为什么要使用transform（为什么不使用marginLeft/Top）",id:"居中为什么要使用transform（为什么不使用marginlefttop）",children:[]},{value:"css选择器优先级",id:"css选择器优先级",children:[]},{value:"伪类和伪元素的区别",id:"伪类和伪元素的区别",children:[]},{value:"盒子模型，以及标准情况和IE下的区别",id:"盒子模型，以及标准情况和ie下的区别",children:[]},{value:"盒模型",id:"盒模型",children:[]},{value:"如何实现左侧宽度固定，右侧宽度自适应的布局",id:"如何实现左侧宽度固定，右侧宽度自适应的布局",children:[]}]},{value:"安全",id:"安全",children:[{value:"项目中如何处理安全问题",id:"项目中如何处理安全问题",children:[]},{value:"介绍css，xsrf",id:"介绍css，xsrf",children:[]},{value:"xsrf跨域攻击的安全性问题怎么防范",id:"xsrf跨域攻击的安全性问题怎么防范",children:[]},{value:"对安全有什么了解",id:"对安全有什么了解",children:[]},{value:"介绍下数字签名的原理",id:"介绍下数字签名的原理",children:[]}]},{value:"ajax",id:"ajax",children:[{value:"文件上传的二进制具体是怎么处理的",id:"文件上传的二进制具体是怎么处理的",children:[]}]},{value:"cookie session",id:"cookie-session",children:[]},{value:"300.前端怎么做单元测试",id:"300前端怎么做单元测试",children:[]},{value:"html",id:"html",children:[]},{value:"防抖",id:"防抖",children:[]},{value:"虚拟DOM",id:"虚拟dom",children:[]},{value:"rn",id:"rn",children:[]},{value:"进程和线程",id:"进程和线程",children:[]},{value:"node",id:"node",children:[{value:"Node.js的加载机制",id:"nodejs的加载机制",children:[]},{value:"如何在Node端配置路径别名",id:"如何在node端配置路径别名",children:[]}]},{value:"npm2和npm3+有什么区别",id:"npm2和npm3有什么区别",children:[]},{value:"react",id:"react",children:[]},{value:"vue",id:"vue-1",children:[{value:"vue 运行机制",id:"vue-运行机制",children:[]},{value:"Vue响应式原理",id:"vue响应式原理",children:[]},{value:"说说Vue中$nextTick的实现原理",id:"说说vue中nexttick的实现原理",children:[]},{value:"React和Vue的区别",id:"react和vue的区别",children:[]},{value:"什么情况下会阻塞 DOM 渲染",id:"什么情况下会阻塞-dom-渲染",children:[]},{value:"computed的实现原理",id:"computed的实现原理",children:[]},{value:"Watch 的运行原理",id:"watch-的运行原理",children:[]},{value:"Vue 的数据为什么频繁变化但只会更新一次",id:"vue-的数据为什么频繁变化但只会更新一次",children:[]},{value:"Chrome插件如何屏蔽广告",id:"chrome插件如何屏蔽广告",children:[]},{value:"zindex",id:"zindex",children:[]},{value:"CSS3动画",id:"css3动画",children:[]},{value:"es678 新特性",id:"es678-新特性",children:[]},{value:"做过推动流程或者改善流程的事件",id:"做过推动流程或者改善流程的事件",children:[]},{value:"HTTP状态码206是干什么的",id:"http状态码206是干什么的",children:[]}]},{value:"项目",id:"项目-1",children:[]},{value:"leader",id:"leader",children:[]},{value:"进程和线程",id:"进程和线程-1",children:[]},{value:"自我介绍",id:"自我介绍",children:[]},{value:"哪个项目最满意，如何做的？",id:"哪个项目最满意，如何做的？",children:[]},{value:"印象最深的技术问题，最后怎么解决的，有什么心得？",id:"印象最深的技术问题，最后怎么解决的，有什么心得？",children:[]},{value:"做的最久的一个项目，项目有什么问题，你能做什么？",id:"做的最久的一个项目，项目有什么问题，你能做什么？",children:[]},{value:"能给我们团队和产品带来什么？",id:"能给我们团队和产品带来什么？",children:[]}],r={rightToc:i},p="wrapper";function u(e){var t=e.components,n=b(e,["components"]);return Object(l.b)(p,a({},r,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"回答壹题项目面试题。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"面试题地址：",Object(l.b)("a",a({parentName:"li"},{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question"}),"https://github.com/Advanced-Frontend/Daily-Interview-Question"))),Object(l.b)("h2",{id:"2-123mapparseint"},"2. ","['1','2','3']",".map(parseInt)"),Object(l.b)("p",null,"parseInt 可以接收2个参数，字符串和基数。进制为2-32有效，如果是 0 undefined 之类且string参数不以“0x”和“0”开头时会默认为10进制。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"1 0  -> 1\n2 1  -> NaN\n3 2  -> NaN\n")),Object(l.b)("h2",{id:"3-防抖与节流区别与实现"},"3. 防抖与节流区别与实现"),Object(l.b)("p",null,"防抖：n秒内函数只执行一次，如果事件再触发，则重新计算时间。\n节流：针对高频事件触发，n秒内函数只执行一次。"),Object(l.b)("h2",{id:"4-set、map、weakset-和-weakmap-的区别"},"4. Set、Map、WeakSet 和 WeakMap 的区别"),Object(l.b)("h2",{id:"7-es5-和-es6-继承的区别"},"7. ES5 和 ES6 继承的区别"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"写法上"),Object(l.b)("li",{parentName:"ol"},"class 声明提升，但是不能使用，暂时性死区"),Object(l.b)("li",{parentName:"ol"},"class 内部会启用严格模式"),Object(l.b)("li",{parentName:"ol"},"class 的所有方法(静态方法和实例方法)都是不可枚举的"),Object(l.b)("li",{parentName:"ol"},"class 的所有方法都没有原型对象 prototype，所以也没有",Object(l.b)("inlineCode",{parentName:"li"},"[[construct]]"),"，不能用 new 调用。"),Object(l.b)("li",{parentName:"ol"},"class 必须使用 new "),Object(l.b)("li",{parentName:"ol"},"class 内部无法重写类名， Foo='fol' 报错。"),Object(l.b)("li",{parentName:"ol"},"子类继承父类，Sub.",Object(l.b)("strong",{parentName:"li"},"proto")," === Super，Es5 Sub.",Object(l.b)("strong",{parentName:"li"},"proto")," === Function.prototype")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"function Super(){}\nlet Sub = Object.create(Super)\n\nSub.__proto__ === Super;//true\n")),Object(l.b)("ol",{start:9},Object(l.b)("li",{parentName:"ol"},"this生成顺序不同。ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例，ES6 的继承先生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。\nes6 子类的this必须先经过父类构造函数的处理，得到父类同样的实例属性和方法，然后再对其进行加工，加上自己的属性和方法，不调用 super() ，子类就得不到this")),Object(l.b)("h2",{id:"21-判断数组的方法"},"21. 判断数组的方法"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Object.prototype.toString.call() 、 instanceof 以及 Array.isArray() 的区别？")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"内置对象里都有一个",Object(l.b)("inlineCode",{parentName:"li"},"[[class]]"),"属性，可以通过",Object(l.b)("inlineCode",{parentName:"li"},"toString()"),"方法获得。所有数据类型都可以判断。通过Symbol.toStringTag 属性可以修改这个方法。"),Object(l.b)("li",{parentName:"ul"},"instanceof 只能判断实例和类之间的关系，原型链也可以。另外如果 iframe 有问题。"),Object(l.b)("li",{parentName:"ul"},"Array.isArray() 是 es5 新增的方法，判断数组很好。")),Object(l.b)("h2",{id:"26-模块化发展历程"},"26. 模块化发展历程"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"IIFE 自执行函数"),Object(l.b)("li",{parentName:"ul"},"AMD 依赖前置 requirejs CMD 支持动态引入 seajs"),Object(l.b)("li",{parentName:"ul"},"COMMONjs  node"),Object(l.b)("li",{parentName:"ul"},"UMD 兼容 AMD 和 commonjs"),Object(l.b)("li",{parentName:"ul"},"es6")),Object(l.b)("p",null,"commonjs 和 es6 模块的区别？"),Object(l.b)("h2",{id:"27全局下-const-声明变量在哪？"},"27.全局下 const 声明变量在哪？"),Object(l.b)("p",null,"const、let、class 的变量会生成进入块级作用域。直接通过变量名获取。"),Object(l.b)("h2",{id:"33-打印内容"},"33. 打印内容"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var b = 10;\n(function b(){  // 这里是对b重新赋值\n    b = 20;\n    console.log(b); \n})();\n")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"函数表达式和函数声明不同，函数名只在该函数内部有效，并且是常量绑定。"),Object(l.b)("li",{parentName:"ol"},"对常量赋值，strict 模式下报错，非strict 模式下会静默失败。"),Object(l.b)("li",{parentName:"ol"},"iife 是函数表达式，不是函数声明。")),Object(l.b)("h2",{id:"34-改造上题，分别打印10和20"},"34. 改造上题，分别打印10和20"),Object(l.b)("p",null,"打印10"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var b = 10;\n(function b(){ \n    b = 20;\n    console.log(window.b); \n})();\n")),Object(l.b)("p",null,"打印20"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var b = 10;\n(function b(b) {\n b = 20;\n console.log(b)\n})(b)\n")),Object(l.b)("h2",{id:"39-介绍下-bfc-及其应用"},"39. 介绍下 BFC 及其应用?"),Object(l.b)("p",null,"BFC 是块级格式化上下文。正常流的排版分为3种情况："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"遇到行级元素，归入行级格式化上下文。行级元素是从左往右边排列(根据文字方向)，如果排不下，会新起一行盒，行盒是块级，归入块级格式化上下文。"),Object(l.b)("li",{parentName:"ul"},"遇到块级元素，归入块级格式化上下文。块级元素是独占一行，从上往下排列。"),Object(l.b)("li",{parentName:"ul"},"遇到 float 元素，顶部与当前行级格式化上下文对齐，左右边缘根据浮动左右与块级格式化上下文对齐。")),Object(l.b)("p",null,"行内盒子上下 margin 失效\n特点是：\n1. 块级格式化上下文包含其内的所有元素，包括浮动盒子，所以会计算高度。\n2. BFC 里的元素上下 margin 会重叠。这个可以理解为 margin 是盒子之间的最小距离\n3. BFC 内的元素会一个个从上往下放置。"),Object(l.b)("p",null,"新建 BFC 的方式：\n1. 浮动元素\n2. 绝对定位元素 poa pof\n3. 非块级，但是能包含块的容器，如 inline-block，table-cell，table-captions\n4. 块级元素设置 overflow: 非 visible，如 auto\n5. 弹性盒子，网格元素"),Object(l.b)("p",null,"应用场景："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"清除浮动"),Object(l.b)("li",{parentName:"ul"},"margin 重叠")),Object(l.b)("h2",{id:"41-输出"},"41. 输出"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var a = 10;\n(function () {\n    console.log(a)  // undefined\n    a = 5     \n    console.log(window.a)  // 10\n    var a = 20;\n    console.log(a)   // 20\n})()\n")),Object(l.b)("h2",{id:"43-输出结果"},"43. 输出结果"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"使用 sort() 对数组 ","[3, 15, 8, 29, 102, 22]"," 进行排序，输出结果?")),Object(l.b)("p",null,"102、15、22、29、3、8。是按字典序来的。"),Object(l.b)("h2",{id:"46-输出结果"},"46. 输出结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var obj = {\n    '2': 3,\n    '3': 4,\n    'length': 2,\n    'splice': Array.prototype.splice,\n    'push': Array.prototype.push\n}\nobj.push(1)\nobj.push(2)\nconsole.log(obj)\n\n")),Object(l.b)("p",null,"{2:1,3:2,length:4} ，是从 length+1 开始替换"),Object(l.b)("h2",{id:"绝对定位是根据父元素的什么"},"绝对定位是根据父元素的什么"),Object(l.b)("p",null,"padding?border?content"),Object(l.b)("p",null,"始终是以 content， left top:0 都是 content 左上角"),Object(l.b)("p",null,"fixed 不写 left top 是相对于 content，写了是相对于可是区域左上角。"),Object(l.b)("p",null,"绝对定位"),Object(l.b)("p",null,"一旦给元素加上absolute或float就相当于给元素加上了display:block\nabsolute元素覆盖正常文档流内元素（不用设z-index，自然覆盖）\n可以减少重绘和回流的开销（如absolute+ top:-9999em，或absolute + visibility:hidden，将动画效果放到absolute元素中）"),Object(l.b)("p",null,"属性介绍"),Object(l.b)("p",null,"static，默认值。位置设置为static的元素，它始终会处于文档流给予的位置。\ninherit，规定应该从父元素继承 position 属性的值。但是任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。\nfixed，生成绝对定位的元素。默认情况下，可定位于相对于浏览器窗口的指定坐标。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。不论窗口滚动与否，元素都会留在那个位置。但当祖先元素具有transform属性且不为none时，就会相对于祖先元素指定坐标，而不是浏览器窗口。\nabsolute，生成绝对定位的元素，相对于距该元素最近的已定位的祖先元素进行定位。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。\nrelative，生成相对定位的元素，相对于该元素在文档中的初始位置进行定位。通过 “left”、”top”、”right” 以及 “bottom” 属性来设置此元素相对于自身位置的偏移。"),Object(l.b)("p",null,"浮动、绝对定位和固定定位会脱离文档流，相对定位不会脱离文档流，绝对定位相对于该元素最近的已定位的祖先元素，如果没有一个祖先元素设置定位，那么参照物是body层。\n绝对定位相对于包含块的起始位置："),Object(l.b)("p",null,"如果祖先元素是块级元素，包含块则设置为该元素的内边距边界。\n如果祖先元素是行内元素，包含块则设置为该祖先元素的内容边界。"),Object(l.b)("p",null,"问答题："),Object(l.b)("p",null,"定位的元素的起始位置为父包含块的内边距（不会在border里，除非使用负值，会在padding里）\n定位的元素的margin还是能起作用的\nbackground属性是会显示在border里的\nz-index是有层叠层级的，需要考虑同一个层叠上下文的层叠优先级\nz-index是负值不会覆盖包含块的背景色（但是如果有内容，会被包含块的内容覆盖）\nz-index的值影响的元素是定位元素以及flex盒子\n上面一个定位元素，下面一个正常流的元素，定位元素会覆盖在正常流元素之上，除非给z-index是负值\n页面根元素html天生具有层叠上下文，称之为“根层叠上下文”"),Object(l.b)("h2",{id:"52-怎么让一个-div-水平垂直居中"},"52. 怎么让一个 div 水平垂直居中"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"水平居中")),Object(l.b)("p",null,"若是行内元素，给其父元素设置text-align:center即可实现行内元素水平居中\n若是块级元素，该元素设置margin:0 auto即可（元素需要定宽）\n若是块级元素，设置父元素为flex布局，子元素设置margin:0 auto即可（子元素不需要定宽）\n使用flex 2012年版本布局，可以轻松的实现水平居中\n使用绝对定位和CSS3新增的属性transform"),Object(l.b)("p",null,"基础布局"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-html"}),"<div class='parent'>\n    <div class=\"child\"></div>\n</div>\n\n.parent {\n    outline: solid 1px red;\n    width: 200px;\n    height: 200px;\n}\n\n.child {\n    width: 50px;\n    height: 50px;\n    background: blue;\n}\n")),Object(l.b)("p",null,"布局方式如下："),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"flex 布局")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-css"}),"// 1\n.parent{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n// 2\n.parent{\n    display: flex;\n}\n.child{\n    margin: auto\n}\n")),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"grid 布局")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-css"}),".parent{\n    display: grid\n}\n.child{\n    align-self: center;\n    justify-self: center;\n}\n\n// 2 \n.child{\n    margin: auto\n}\n")),Object(l.b)("ol",{start:3},Object(l.b)("li",{parentName:"ol"},"absolute")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-css"}),".parent{\n    position: relative\n}\n\n// 1\n.child{\n    position:absolute;\n    left:0;\n    top:0;\n    right:0;\n    bottom:0;\n    margin:atuo;\n}\n\n// 2\n.child{\n    position:absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%)\n}\n\n// 3\n.child{\n    position:absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -25px;\n    margin-top: -25px;\n}\n")),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"table-cell")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-css"}),".parent{\n    display: tabel-cell;\n    text-align: center;\n    vertical-align: middle\n}\n.child{\n    display: inline-block\n}\n\n// 如果只要文字居中，可以\n.parent{\n    display: table\n}\n.child{\n    display: table-cell;\n    vertical-align: middle;\n    text-algin: center;\n}\n")),Object(l.b)("h2",{id:"53-执行结果"},"53. 执行结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var a = {n: 1};\nvar b = a;\na.x = a = {n: 2};\n\nconsole.log(a.x)    \nconsole.log(b.x)\n")),Object(l.b)("p",null,".运算优先级高。 相当于"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"b = {n: 1}\na.x = {n:1, x:{n:2}}  // 实际修改了b\na = {n:2}\n\na.x // undefined\nb.x = {n:2}\n")),Object(l.b)("p",null,"变形如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var a = {n: 1};\nvar b = a;\na = a.x = {n: 2};\n\nconsole.log(a.x)    \nconsole.log(b.x)\n")),Object(l.b)("p",null,"实际是一样。"),Object(l.b)("h2",{id:"57-三种透明方案的分析比较"},"57. 三种透明方案的分析比较"),Object(l.b)("p",null,"分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。"),Object(l.b)("p",null,"结构上： display:none 不会进 render tree，不占空间，opacity:0 占据空间，只是内容不可见，可点击，visibility:hidden，占据空间，内容不可见。"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",a({parentName:"tr"},{align:null}),"属性"),Object(l.b)("th",a({parentName:"tr"},{align:null}),"显示时"),Object(l.b)("th",a({parentName:"tr"},{align:null}),"占位"),Object(l.b)("th",a({parentName:"tr"},{align:null}),"子元素"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"display:none")),Object(l.b)("td",a({parentName:"tr"},{align:null}),"重排"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"不占"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"无法显示")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"visibility:hidden")),Object(l.b)("td",a({parentName:"tr"},{align:null}),"重绘"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"占"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"visiblility:visible可显示")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",a({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"opacity:0")),Object(l.b)("td",a({parentName:"tr"},{align:null}),"重绘，重建图层，性能消耗少"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"占"),Object(l.b)("td",a({parentName:"tr"},{align:null}),"无法显示")))),Object(l.b)("p",null,"问：用 CSS 隐藏页面上的一个元素有哪几种方法？"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"设置 fixed 并设置足够大负距离的 left top 使其“隐藏”；"),Object(l.b)("li",{parentName:"ul"},"用层叠关系 z-index 把元素叠在最底下使其“隐藏”；"),Object(l.b)("li",{parentName:"ul"},"用 text-indent:-9999px 使其文字隐藏。")),Object(l.b)("h2",{id:"58-箭头函数和普通函数的区别"},"58. 箭头函数和普通函数的区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"预解释"),Object(l.b)("li",{parentName:"ul"},"箭头函数没有自己的 this "),Object(l.b)("li",{parentName:"ul"},"没有 function 关键字，不能用作 generator"),Object(l.b)("li",{parentName:"ul"},"不可以使用 arguments"),Object(l.b)("li",{parentName:"ul"},"不能 new",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"因为没有自己的this，无法调用 call，apply"),Object(l.b)("li",{parentName:"ul"},"没有 prototype")))),Object(l.b)("h2",{id:"60-覆盖-import-让图片宽度-300px"},"60. 覆盖 import 让图片宽度 300px"),Object(l.b)("p",null,"已知如下代码，让图片宽度 300px。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-html"}),'<img src="1.jpg" style="width:480px!important;" />\n')),Object(l.b)("p",null,"方法如下："),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-html"}),'// 1\n<img src="http://resource.muyiy.cn/image/winter.jpg" style="width:300px!important" style="width:480px!important;"  />\n\n// 2\nimg{\n    transform: scale(0.625)\n}\n\n// 3\nimg{\n    max-width: 300px;\n}\n\n// 4\nimg{\n    box-sizing: border-box;\n    padding: 0 90px;\n}\n\n// 5. 动画样式优先级高于 important\nimg {\n    animation: test 0s forwards;\n}\n@keyframes test {\n    from {\n        width: 300px;\n    }\n    to {\n        width: 300px;\n    }\n}\n\n// 6.zoom CSS 属性会根据 @viewport 来初始化一个缩放因数。\nimg {\n    zoom: 0.625;\n}\n')),Object(l.b)("h2",{id:"65-abc-和-ab-性能"},"65. a.b.c 和 a","['b']['c']"," 性能"),Object(l.b)("h2",{id:"66-es6-代码转-es5-代码的思路"},"66. ES6 代码转 ES5 代码的思路"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"生成AST，将字符串解析成抽象语法树  @babel/parser"),Object(l.b)("li",{parentName:"ol"},"处理AST，进行替换  @babel/core 的 transformFromAstSync   @babel/traverse 来获取依赖文件"),Object(l.b)("li",{parentName:"ol"},"将 AST 树转成代码字符串")),Object(l.b)("h2",{id:"68如何解决移动端-1px-像素问题？"},"68.如何解决移动端 1px 像素问题？"),Object(l.b)("h2",{id:"73介绍下-bfc、ifc、gfc-和-ffc"},"73.介绍下 BFC、IFC、GFC 和 FFC?"),Object(l.b)("h2",{id:"75-数组取值"},"75. 数组取值"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少?")),Object(l.b)("p",null,"O(1) 基本一样。 js 里的数组实际是哈希表。"),Object(l.b)("h2",{id:"76-输出结果"},"76. 输出结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"// example 1\nvar a={}, b='123', c=123;  \na[b]='b';\na[c]='c';  \nconsole.log(a[b]);  // c\n\n---------------------\n// example 2\nvar a={}, b=Symbol('123'), c=Symbol('123');  \na[b]='b';\na[c]='c';  \nconsole.log(a[b]);  // 'b'\n\n---------------------\n// example 3\nvar a={}, b={key:'123'}, c={key:'456'};  \na[b]='b';\na[c]='c';  \nconsole.log(a[b]);  // c\n")),Object(l.b)("p",null,"再看一下数据类型转换 toString() 和 valueOf()。"),Object(l.b)("h2",{id:"79input处理中文"},"79.input处理中文"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"function jeiliu(timeout){\n    var timer;\n    function input(e){\n    if(e.target.composing){\n        return ;\n    }\n    if(timer){\n        clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n            console.log(e.target.value);\n            timer = null;\n        }, timeout); \n    }\n    return input;\n}\n\nfunction onCompositionStart(e){\n    e.target.composing = true;\n}\nfunction onCompositionEnd(e){\n    //console.log(e.target)\n    e.target.composing = false;\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent('input');\n    e.target.dispatchEvent(event);\n}\nvar input_dom = document.getElementById('myinput');\ninput_dom.addEventListener('input',jeiliu(1000));\ninput_dom.addEventListener('compositionstart',onCompositionStart);\ninput_dom.addEventListener('compositionend',onCompositionEnd);\n")),Object(l.b)("h2",{id:"83var-let-const-区别和实现原理"},"83.var let const 区别和实现原理"),Object(l.b)("p",null,"声明、初始化、赋值\nvar 声明和初始化提前了 undefined\nlet 只声明了，没有初始化，所以 not define"),Object(l.b)("p",null,"是执行到作用域的时候 预解释"),Object(l.b)("h2",{id:"96-前端加密场景和方法"},"96. 前端加密场景和方法"),Object(l.b)("p",null,"场景\n1. 密码， http是明文传输，别人获取密码后可以进入网站或猜它另外网站的密码。"),Object(l.b)("p",null,"方法是："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"https"),Object(l.b)("li",{parentName:"ul"},"使用加密算法进行加密"),Object(l.b)("li",{parentName:"ul"},"前端逻辑混淆压缩 webpack")),Object(l.b)("p",null,"增加攻击者的成本"),Object(l.b)("h2",{id:"98-打印结果"},"98. 打印结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),'function changeObjProperty(o) {\n  o.siteUrl = "http://www.baidu.com"\n  o = new Object()\n  o.siteUrl = "http://www.google.com"\n} \nlet webSite = new Object();\nchangeObjProperty(webSite);\nconsole.log(webSite.siteUrl);  // baidu.com\n')),Object(l.b)("h2",{id:"100-打印结果"},"100. 打印结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"function Foo() {\n    Foo.a = function() {\n        console.log(1)\n    }\n    this.a = function() {\n        console.log(2)\n    }\n}\nFoo.prototype.a = function() {\n    console.log(3)\n}\nFoo.a = function() {\n    console.log(4)\n}\nFoo.a();  // 4\nlet obj = new Foo();\nobj.a();  // 2\nFoo.a();  // 1\n")),Object(l.b)("h2",{id:"106-返回值"},"106. 返回值"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"String('11') == new String('11');  // true\nString('11') === new String('11');  // false\n")),Object(l.b)("h2",{id:"108-打印结果"},"108. 打印结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var name = 'Tom';\n(function() {\n    if (typeof name == 'undefined') {\n        var name = 'Jack';\n        console.log('Goodbye ' + name);  // Goodbye Jack\n    } else {\n        console.log('Hello ' + name);\n    }\n})();\n")),Object(l.b)("h2",{id:"109-打印结果"},"109. 打印结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"var name = 'Tom';\n(function() {\nif (typeof name == 'undefined') {\n  name = 'Jack';\n  console.log('Goodbye ' + name);\n} else {\n  console.log('Hello ' + name);\n}\n})();\n")),Object(l.b)("h2",{id:"116-输出结果"},"116. 输出结果"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),'1 + "1"   // \'11\'\n\n2 * "2"   //  4\n\n[1, 2] + [2, 1]   // \'1,22,1\'\n\n"a" + + "b"   // "aNaN"\n')),Object(l.b)("p",null,"加号作为一元运算符时，其后面的表达式将进行ToNumber(参考es规范)的抽象操作："),Object(l.b)("p",null,"true -> 1\nfalse -> 0\nundefined -> NaN\nnull -> 0\n’字符串‘ -> 字符串为纯数字时返回转换后的数字（十六进制返回十进制数），否则返回NaN\n对象 -> 通过ToPrimitive拿到基本类型值，然后再进行ToNumber操作"),Object(l.b)("h2",{id:"136-实现骨架屏"},"136. 实现骨架屏"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://github.com/Jocs/jocs.github.io/issues/22"}),"https://github.com/Jocs/jocs.github.io/issues/22")),Object(l.b)("h2",{id:"koa2"},"koa2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍koa2"),Object(l.b)("li",{parentName:"ul"},"使用过的koa2中间件"),Object(l.b)("li",{parentName:"ul"},"koa2中间件原理"),Object(l.b)("li",{parentName:"ul"},"koa-body原理"),Object(l.b)("li",{parentName:"ul"},"介绍自己写过的中间件"),Object(l.b)("li",{parentName:"ul"},"koa原理，为什么要用koa(express和koa对比)"),Object(l.b)("li",{parentName:"ul"},"使用的koa中间件"),Object(l.b)("li",{parentName:"ul"},"koa中response.send、response.rounded、response.json发生了什么事，浏览器为什么能识别到它是一个json结构或是html"),Object(l.b)("li",{parentName:"ul"},"koa-bodyparser怎么来解析request")),Object(l.b)("h2",{id:"pm2"},"pm2"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍pm2"),Object(l.b)("li",{parentName:"ul"},"master挂了的话pm2怎么处理"),Object(l.b)("li",{parentName:"ul"},"pm2怎么做进程管理，进程挂掉怎么处理"),Object(l.b)("li",{parentName:"ul"},"不用pm2怎么做进程管理")),Object(l.b)("h2",{id:"网络"},"网络"),Object(l.b)("h3",{id:"首屏加载优化"},"首屏加载优化"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F26710831"}),"https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F26710831"),"\nVue-Router路由懒加载（利用Webpack的代码切割）\n使用CDN加速，将通用的库从vendor进行抽离\nNginx的gzip压缩\nVue异步组件\n服务端渲染SSR\n如果使用了一些UI库，采用按需加载\nWebpack开启gzip压缩\n如果首屏为登录页，可以做成多入口\nService Worker缓存文件处理\n使用link标签的rel属性设置   prefetch（这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低，prefetch通常用于加速下一次导航）、preload（preload将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度）"),Object(l.b)("h3",{id:"service-worker有哪些作用"},"Service Worker有哪些作用"),Object(l.b)("h3",{id:"get-和-post-有什么区别"},"get 和 post 有什么区别"),Object(l.b)("p",null,"本质上，这两个方法没有区别，hTTP最初设定这些方法，只是让请求更有语义。"),Object(l.b)("p",null,"语义上\n根据语义，get是获取资源，post是提交资源"),Object(l.b)("p",null,"数据大小\nget 通过 url 提交，浏览器中对 url 长度做了限制，所以 get 提交的数据大小也有限制\npost 是没有大小限制"),Object(l.b)("p",null,"安全性\n安全性上，post 比 get 稍微安全一点，"),Object(l.b)("p",null,"根据不同的请求，我们可以简单设计出 接口，restful api。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"使用名词，而不是动词"),Object(l.b)("li",{parentName:"ul"},"请求的语义"),Object(l.b)("li",{parentName:"ul"},"接口版本化")),Object(l.b)("h3",{id:"网络的五层模型"},"网络的五层模型"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"应用层"),Object(l.b)("li",{parentName:"ul"},"传输层"),Object(l.b)("li",{parentName:"ul"},"ip层"),Object(l.b)("li",{parentName:"ul"},"数据链路层"),Object(l.b)("li",{parentName:"ul"},"物理层")),Object(l.b)("h3",{id:"http和https的区别"},"HTTP和HTTPS的区别"),Object(l.b)("p",null,"HTTP: 是明文传输\nHTTPS：是经过 SSL 加密后传输，可验证身份\n端口不同 80 和 443"),Object(l.b)("h3",{id:"介绍ssl和tls，https加密过程"},"介绍SSL和TLS，HTTPS加密过程"),Object(l.b)("p",null,"SSL 是 TLS 不同时期的名称，是同一个东西，"),Object(l.b)("h3",{id:"介绍http20"},"介绍http2.0"),Object(l.b)("p",null,"相对于HTTP1.0，HTTP1.1的优化："),Object(l.b)("p",null,"1.HTTP 1.0\n浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。\n访问一个包含有许多图像的网页文件的整个过程包含了多次请求和响应，每次请求和响应都需要建立一个单独的连接，每次连接只是传输一个文档和图像，上一 次和下一次请求完全分离。即使图像文件都很小，但是客户端和服务器端每次建立和关闭连接却是一个相对比较费时的过程，并且会严重影响客户机和服务器的性能。"),Object(l.b)("p",null,"2.HTTP 1.1\nHTTP 1.1允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。\n由此可见http1.1并不支持一个tcp通道的多个http文件并行下载。但是它支持多通道并行下载，即同时建立多个TCP通道，并行传输对象，重叠了TCP连接建立时间，因而总体延迟会减少，但并行连接对客户端及服务器性能提出了更高要求，HTTP规范并行TCP连接不应超过2个，事实上现代浏览器已经支持6-10个不等。即我们实验中出现的多端口传输。"),Object(l.b)("p",null,"实验中发现接受一个网页时，不同的数据包可能来自不同的端口，即tcp通道，但是一个tcp通道必须等待上一个响应返回后才会发送下一个请求，也就是说就目前的网咯状况"),Object(l.b)("p",null,"缓存处理：多了Entity tag，If-Unmodified-Since, If-Match, If-None-Match等缓存信息（HTTTP1.0 If-Modified-Since,Expires）\n带宽优化及网络连接的使用\n错误通知的管理\nHost头处理\n长连接： HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。"),Object(l.b)("p",null,"相对于HTTP1.1，HTTP2的优化："),Object(l.b)("p",null,"HTTP 2.0 会对 HTTP 的头进行一定的压缩，将原来每次都要携带的大量 key value 在两端建立一个索引表，对相同的头只发送索引表中的索引。\n另外，HTTP 2.0 协议将一个 TCP 的连接中，切分成多个流，每个流都有自己的 ID，而且流可以是客户 端发往服务端，也可以是服务端发往客户端。它其实只是一个虚拟的通道。流是有优先级的。\nHTTP 2.0 还将所有的传输信息分割为更小的消息和帧，并对它们采用二进制格式编码。常见的帧有 Header 帧，用于传输 Header 内容，并且会开启一个新的流。再就是Data 帧，用来传输正文实体。多 个 Data 帧属于同一个流。\n通过这两种机制，HTTP 2.0 的客户端可以将多个请求分到不同的流中，然后将请求内容拆成帧，进行二 进制传输。这些帧可以打散乱序发送， 然后根据每个帧首部的流标识符重新组装，并且可以根据优先 级，决定优先处理哪个流的数据。"),Object(l.b)("p",null,"HTTP2支持二进制传送（实现方便且健壮），HTTP1.x是字符串传送\n- 单连接多资源，可以减少服务器连接压力，减少内存占用，连接吞吐量大\n- tcp 连接少，改善网络拥塞，慢启动时间减少，拥塞和丢包恢复速度更快\nHTTP2支持多路复用。一个信道同时传输多路信号\n- 运行同时通过单一的 HTTP/2 连接发起多重请求-响应\n- http1 浏览器客户端同一实际，针对同一域名下的请求有一定数量限制，超过的将会被阻塞\nHTTP2采用 HPACK 压缩算法压缩头部，减小了传输的体积\nHTTP2支持服务端推送"),Object(l.b)("p",null,"2MSL就是一个发送和一个回复所需的最大时间。 MaximumSegmentLifetime英文的缩写,中文可以译为“报文最大生存时间”,"),Object(l.b)("h3",{id:"介绍dns解析"},"介绍DNS解析"),Object(l.b)("p",null,"域名解析，就是根据域名查出IP地址。因为人们很难记住ip。\nDNS服务器： 人们都需要它，一旦出现故障，整个互联网都瘫痪，另外上网的人分布在全球，如果远了，会造成很大延迟，所以 DNS 服务器要高可用、高并发和分布式。"),Object(l.b)("p",null,Object(l.b)("img",a({parentName:"p"},{src:"/img/net/dns.jpg",alt:null}))),Object(l.b)("h3",{id:"常见http请求头"},"常见Http请求头"),Object(l.b)("p",null,"请求头\nAccept",Object(l.b)("br",{parentName:"p"}),"\n","Accept-Encoding\nAccept-Charset\nAccept-Language\nCache-Control\nConnection\nHost\nIf-Modified-Since\nIf-None-Match\nUser-Agent\nCookie\nReferer: 请求来源\nPragma\nSec-Fetch-Mode\nSec-Fetch-Site\nRange\nContent-Type"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"Accept: image/webp,image/apng,image/*,*/*;q=0.8\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,da;q=0.6,und;q=0.5\nCache-Control: no-cache\nConnection: keep-alive\nCookie: BIDUPSID=C5D29E79FB413765F95A74F1F61A4D4F;\nHost: www.baidu.com\nPragma: no-cache\nReferer: https://www.baidu.com/s?ie=UTF-8&wd=keep%20alive\nSec-Fetch-Mode: no-cors\nSec-Fetch-Site: same-origin\nUser-Agent: Mozilla/5.0 (Ma\n")),Object(l.b)("p",null,"相应头\nCache-Control\nConnection\nContent-Encoding\nContent-Length\nContent-Type\nDate\nETag\nExpires\nKeep-Alive\nLast-Modified\nServer\nSet-Cookie\nVia\nAccept-Ranges: bytes\nReferrer-Policy: no-referrer-when-downgrade\nX-Powered-By: W3 Total Cache/0.9.7.5"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),'Accept-Ranges: bytes\nCache-Control: max-age=315360000\nConnection: Keep-Alive\nContent-Length: 705\nContent-Type: image/gif\nDate: Wed, 04 Sep 2019 01:15:32 GMT\nEtag: "2c1-4a6473f6030c0"\nExpires: Sat, 01 Sep 2029 01:15:32 GMT\nLast-Modified: Wed, 22 Jun 2011 06:40:43 GMT\nServer: Apache\n')),Object(l.b)("h3",{id:"http-11-时如何复用tcp连接"},"http 1.1 时如何复用tcp连接"),Object(l.b)("p",null,"默认情况下，http 是在请求完成之后关闭。可以开启 keep-alive 头信息。"),Object(l.b)("p",null,"Connection: Keep-Alive  表示连接复用"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"const http = require('http');\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Http报文的请求会有几个部分")),Object(l.b)("p",null,"请求行: 方法 URL 版本    GET / HTTP/1.1\n请求头  k: v\n请求体"),Object(l.b)("p",null,"响应报文\n状态行 版本 状态码 短语   HTTP/1.1 200 OK\n响应头  k: v\n实体"),Object(l.b)("h3",{id:"tcp3次握手，四次挥手"},"tcp3次握手，四次挥手"),Object(l.b)("p",null,Object(l.b)("img",a({parentName:"p"},{src:"/img/net/tcp3.jpg",alt:null})),"\n",Object(l.b)("img",a({parentName:"p"},{src:"/img/net/tcp4.jpg",alt:null})),"\n",Object(l.b)("img",a({parentName:"p"},{src:"/img/net/tcp2.jpg",alt:null}))),Object(l.b)("h3",{id:"tcp"},"tcp"),Object(l.b)("p",null,"tcp 属于传输层，它是面向连接的，可以保证数据安全有序到达，它的格式是"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(源、目标)端口号"),Object(l.b)("li",{parentName:"ul"},"序列号 seq  包编号，解决乱序"),Object(l.b)("li",{parentName:"ul"},"确认序号 ack  防止丢包，超时重发"),Object(l.b)("li",{parentName:"ul"},"窗口大小",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"滑动窗口：流量控制"),Object(l.b)("li",{parentName:"ul"},"拥塞控制：拥堵控制，防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。")))),Object(l.b)("p",null,"每个连接都有不同的序号。"),Object(l.b)("h3",{id:"http缓存控制"},"http缓存控制"),Object(l.b)("p",null,"缓存分为强缓存和协商缓存。强缓存不过服务器，协商缓存需要过服务器，协商缓存返回的状态码是304。两类缓存机制可以同时存在，强缓存的优先级高于协商缓存。当执行强缓存时，如若缓存命中，则直接使用缓存数据库中的数据，不再进行缓存协商。\n强缓存\nExpires(HTTP1.0)：Exprires的值为服务端返回的数据到期时间。当再次请求时的请求时间小于返回的此时间，则直接使用缓存数据。但由于服务端时间和客户端时间可能有误差，这也将导致缓存命中的误差。另一方面，Expires是HTTP1.0的产物，故现在大多数使用Cache-Control替代。\n缺点：使用的是绝对时间，如果服务端和客户端的时间产生偏差，那么会导致命中缓存产生偏差。\nPragma(HTTP1.0)：HTTP1.0时的遗留字段，当值为\"no-cache\"时强制验证缓存，Pragma禁用缓存，如果又给Expires定义一个还未到期的时间，那么Pragma字段的优先级会更高。服务端响应添加'Pragma': 'no-cache'，浏览器表现行为和刷新(F5)类似。\nCache-Control(HTTP1.1)：有很多属性，不同的属性代表的意义也不同："),Object(l.b)("p",null,"private：客户端可以缓存\npublic：客户端和代理服务器都可以缓存\nmax-age=t：缓存内容将在t秒后失效\nno-cache：需要使用协商缓存来验证缓存数据\nno-store：所有内容都不会缓存"),Object(l.b)("p",null,"请注意no-cache指令很多人误以为是不缓存，这是不准确的，no-cache的意思是可以缓存，但每次用应该去想服务器验证缓存是否可用。no-store才是不缓存内容。当在首部字段Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。命中强缓存的表现形式：Firefox浏览器表现为一个灰色的200状态码。Chrome浏览器状态码表现为200 (from disk cache)或是200 OK (from memory cache)。\n协商缓存\n协商缓存需要进行对比判断是否可以使用缓存。浏览器第一次请求数据时，服务器会将缓存标识与数据一起响应给客户端，客户端将它们备份至缓存中。再次请求时，客户端会将缓存中的标识发送给服务器，服务器根据此标识判断。若未失效，返回304状态码，浏览器拿到此状态码就可以直接使用缓存数据了。\nLast-Modified：服务器在响应请求时，会告诉浏览器资源的最后修改时间。\nif-Modified-Since：浏览器再次请求服务器的时候，请求头会包含此字段，后面跟着在缓存中获得的最后修改时间。服务端收到此请求头发现有if-Modified-Since，则与被请求资源的最后修改时间进行对比，如果一致则返回304和响应报文头，浏览器只需要从缓存中获取信息即可。"),Object(l.b)("p",null,"如果真的被修改：那么开始传输响应一个整体，服务器返回：200 OK\n如果没有被修改：那么只需传输响应header，服务器返回：304 Not Modified"),Object(l.b)("p",null,"if-Unmodified-Since: 从某个时间点算起, 是否文件没有被修改，使用的是相对时间，不需要关心客户端和服务端的时间偏差。"),Object(l.b)("p",null,"如果没有被修改：则开始`继续'传送文件，服务器返回: 200 OK\n如果文件被修改：则不传输，服务器返回: 412 Precondition failed (预处理错误)"),Object(l.b)("p",null,"这两个的区别是一个是修改了才下载一个是没修改才下载。如果在服务器上，一个资源被修改了，但其实际内容根本没发生改变，会因为Last-Modified时间匹配不上而返回了整个实体给客户端（即使客户端缓存里有个一模一样的资源）。为了解决这个问题，HTTP1.1推出了Etag。\nEtag：服务器响应请求时，通过此字段告诉浏览器当前资源在服务器生成的唯一标识（生成规则由服务器决定）\nIf-Match：条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改\nIf-None-Match： 再次请求服务器时，浏览器的请求报文头部会包含此字段，后面的值为在缓存中获取的标识。服务器接收到次报文后发现If-None-Match则与被请求资源的唯一标识进行对比。"),Object(l.b)("p",null,"不同，说明资源被改动过，则响应整个资源内容，返回状态码200。\n相同，说明资源无心修改，则响应header，浏览器直接从缓存中获取数据信息。返回状态码304."),Object(l.b)("p",null,"但是实际应用中由于Etag的计算是使用算法来得出的，而算法会占用服务端计算的资源，所有服务端的资源都是宝贵的，所以就很少使用Etag了。"),Object(l.b)("p",null,"浏览器地址栏中写入URL，回车浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿（最快）\nF5就是告诉浏览器，别偷懒，好歹去服务器看看这个文件是否有过期了。于是浏览器就胆胆襟襟的发送一个请求带上If-Modify-since\nCtrl+F5告诉浏览器，你先把你缓存中的这个文件给我删了，然后再去服务器请求个完整的资源文件下来。于是客户端就完成了强行更新的操作"),Object(l.b)("p",null,"缓存场景\n对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略"),Object(l.b)("p",null,"对于某些不需要缓存的资源，可以使用 Cache-control: no-store ，表示该资源不需要缓存\n对于频繁变动的资源，可以使用 Cache-Control: no-cache 并配合 ETag 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新\n对于代码文件来说，通常使用 Cache-Control: max-age=31536000 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件"),Object(l.b)("h3",{id:"介绍下http状态码"},"介绍下HTTP状态码"),Object(l.b)("p",null,"1xx，表示临时回应，通常是浏览器请继续\n2xx 表示成功\n200\n3xx 表示重定向\n301\n302\n304 客户端缓存\n4xx 表示客户端错误\n403\n404 请求页面不存在\n418 彩蛋\n5xx 表示服务端错误\n500 服务端错误\n503 服务端暂时错误，等会再试"),Object(l.b)("h3",{id:"403、301、302是什么"},"403、301、302是什么"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"403 表示客户端无权限")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"301 表示永久重定向")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"302 表示临时重定向")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"缓存相关的HTTP请求头")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"介绍HTTPS")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"HTTPS怎么建立安全通道"))),Object(l.b)("h2",{id:"从输入url到页面加载全过程"},"从输入URL到页面加载全过程"),Object(l.b)("h2",{id:"linux"},"linux"),Object(l.b)("h3",{id:"linux-754-介绍"},"Linux 754 介绍"),Object(l.b)("p",null,"1 2 4 分别表示读、写、执行"),Object(l.b)("p",null,"754 表示权限，三位表示：所属用户、所属用户组以及组外用户"),Object(l.b)("h2",{id:"js"},"js"),Object(l.b)("h3",{id:"介绍暂时性死区"},"介绍暂时性死区"),Object(l.b)("p",null,"暂时性死区是指变量不能在声明之前使用。es5 var function 有预解析，es6 const let class "),Object(l.b)("h3",{id:"1-2-3-4-5变成1-2-3-a-b-5"},"[1, 2, 3, 4, 5]","变成","[1, 2, 3, a, b, 5]"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"let a = [1, 2, 3, 4, 5]\na.splice(3, 0, 'a', 'b')\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"取数组的最大值（ES5、ES6）")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"let a = [1, 2, 3]\n// es5 \nMath.max.apply(null, a)\n\n// es6\nMath.max(...a)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"ES5和ES6有什么区别")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"JS是什么范式语言(面向对象还是函数式编程)")),Object(l.b)("p",null,"既可以面向对象，也可以函数式编程"),Object(l.b)("h3",{id:"如何判断两个变量相等"},"如何判断两个变量相等"),Object(l.b)("p",null,"Object.is 实现原理"),Object(l.b)("h3",{id:"介绍class和es5的类以及区别"},"介绍class和ES5的类以及区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"class 不能提取使用"),Object(l.b)("li",{parentName:"ul"},"class ")),Object(l.b)("h3",{id:"介绍箭头函数和普通函数的区别"},"介绍箭头函数和普通函数的区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"箭头函数的 this 是查找父级"),Object(l.b)("li",{parentName:"ul"},"箭头函数不能 new "),Object(l.b)("li",{parentName:"ul"},"预解析")),Object(l.b)("h3",{id:"介绍defineproperty方法，什么时候用"},"介绍defineProperty方法，什么时候用?"),Object(l.b)("p",null,"可以定义对象的属性描述符，数据、存取\n没用过，vue2 用来做响应式数据。"),Object(l.b)("h3",{id:"forin-和-objectkeys的区别"},"for..in 和 object.keys的区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"for...in 用来遍历对象，只能遍历可迭代属性，会遍历原型上的属性"),Object(l.b)("li",{parentName:"ul"},"object.keys 返回对象的可迭代属性。")),Object(l.b)("h3",{id:"介绍闭包，使用闭包特权函数的使用场景"},"介绍闭包，使用闭包特权函数的使用场景"),Object(l.b)("p",null,"闭包是携带执行环境中的函数，个人理解是所有的函数都是闭包，因为它的执行环境有执行外层作用域的指针。"),Object(l.b)("p",null,"一般用来做封装，比如 throttle"),Object(l.b)("h3",{id:"let、const以及var的区别"},"let、const以及var的区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"暂时性死区"),Object(l.b)("li",{parentName:"ul"},"块级作用域")),Object(l.b)("h3",{id:"浅拷贝和深拷贝的区别与实现"},"浅拷贝和深拷贝的区别与实现"),Object(l.b)("h3",{id:"介绍-this-和原型"},"介绍 this 和原型"),Object(l.b)("h3",{id:"使用原型最大的好处"},"使用原型最大的好处"),Object(l.b)("p",null,"共享方法，节省内存"),Object(l.b)("h3",{id:"介绍localstorage的api"},"介绍localstorage的API"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"setItem()"),Object(l.b)("li",{parentName:"ul"},"getItem()"),Object(l.b)("li",{parentName:"ul"},"removeItem()"),Object(l.b)("li",{parentName:"ul"},"clear()"),Object(l.b)("li",{parentName:"ul"},"key(index)")),Object(l.b)("h3",{id:"如何处理异常捕获"},"如何处理异常捕获"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"try...catch"),Object(l.b)("li",{parentName:"ul"},"window.onerror"),Object(l.b)("li",{parentName:"ul"},"promise  onrejectionhandled"),Object(l.b)("li",{parentName:"ul"},"网络加载错误\nwindow.addEventListener('error') 捕获"),Object(l.b)("li",{parentName:"ul"},"页面崩溃错误",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"load beforeunload 有问题"),Object(l.b)("li",{parentName:"ul"},"Service Worker "))),Object(l.b)("li",{parentName:"ul"},"框架错误",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"vue   Vue.config.errorHandler  error vm info(错误时期信息,比如挂载)"))),Object(l.b)("li",{parentName:"ul"},"ajax错误",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"xhr error")))),Object(l.b)("h3",{id:"js继承方案和区别"},"JS继承方案和区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"call调用属性(防止多个对象串改父实例属性) + 原型链继承方法")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"es6 class")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。"))),Object(l.b)("h3",{id:"如何判断一个变量是不是数组"},"如何判断一个变量是不是数组"),Object(l.b)("p",null,"内置对象内部都有个私有的",Object(l.b)("inlineCode",{parentName:"p"},"[[Class]]"),"属性,toString 可以访问到它。"),Object(l.b)("p",null,"instanceof 的问题。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"toString.call([]) === [object Array]\n")),Object(l.b)("p",null,"Array.isArray()"),Object(l.b)("h3",{id:"变量a和b，如何交换"},"变量a和b，如何交换"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"temp")),Object(l.b)("li",{parentName:"ol"})),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"[a, b] = [b, a]\n")),Object(l.b)("ol",{start:3},Object(l.b)("li",{parentName:"ol"},"整数数字")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"// 加2减1\na = a + b;\nb = a - b;\na = a - b;\n\n// 3次异或\na = a ^ b;\nb = a ^ b;\na = a ^ b\n")),Object(l.b)("h3",{id:"多个标签生成的dom结构"},"多个标签生成的Dom结构"),Object(l.b)("p",null,"是一个类数组"),Object(l.b)("h3",{id:"类数组和数组的区别，转换"},"类数组和数组的区别，转换"),Object(l.b)("p",null,"类数组不能用数组的方法，但是和数组类似，可以通过下标取值，可以循环。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"es5可以通过 call 转换"),Object(l.b)("li",{parentName:"ul"},"es6 展开符")),Object(l.b)("p",null,"dom NodeList"),Object(l.b)("h3",{id:"cookie-是为了解决什么问题"},"cookie 是为了解决什么问题"),Object(l.b)("p",null,"http是无状态的。"),Object(l.b)("h3",{id:"cookie和localstorage的区别"},"cookie和localStorage的区别"),Object(l.b)("p",null,"操作\ncookie 客户端，服务端都可以操作\nlocalStorage 只在客户端\ncookie 操作复杂\nlocalStorage api 简单"),Object(l.b)("p",null,"大小\ncookie 有大小4k，条数限制，chrome 53\nlocalStorage 5M  每个浏览器不一致"),Object(l.b)("p",null,"有效期\ncookie 可以通过 expires 设置有效期\nlocalStorage 不手动清除长期有效"),Object(l.b)("h3",{id:"formdata和原生的ajax有什么区别"},"formData和原生的ajax有什么区别"),Object(l.b)("h3",{id:"介绍下表单提交，和-formdata-有什么关系"},"介绍下表单提交，和 formData 有什么关系"),Object(l.b)("p",null,"表单提交 content-type x/www-form-urlencoded"),Object(l.b)("h3",{id:"介绍this各种情况"},"介绍this各种情况"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"fn()"),Object(l.b)("li",{parentName:"ul"},"obj.fn()"),Object(l.b)("li",{parentName:"ul"},"fn.call()")),Object(l.b)("h3",{id:"-和--的区别，什么情况下用相等"},"== 和 === 的区别，什么情况下用相等=="),Object(l.b)("p",null,"== 比较的是值，=== 比较的是引用和值"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"ES6中的map和原生的对象有什么区别"),Object(l.b)("li",{parentName:"ul"},"介绍下原型链（解决的是继承问题吗）"),Object(l.b)("li",{parentName:"ul"},"sum(2, 3)实现sum(2)(3)的效果"),Object(l.b)("li",{parentName:"ul"},"两个对象如何比较"),Object(l.b)("li",{parentName:"ul"},"JS的原型")),Object(l.b)("h3",{id:"作用域链的理解"},"作用域链的理解"),Object(l.b)("p",null,"了解作用域链之前我们要知道一下几个概念："),Object(l.b)("p",null,"函数的生命周期\n变量和函数的声明\nActivetion Object（AO）、Variable Object（VO）"),Object(l.b)("p",null,"函数的生命周期："),Object(l.b)("p",null,"创建：JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。"),Object(l.b)("p",null,"执行：JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。"),Object(l.b)("p",null,"变量和函数的声明：如果变量名和函数名声明时相同，函数优先声明。\nActivetion Object（AO）、Variable Object（VO）："),Object(l.b)("p",null,"AO：Activetion Object（活动对象）\nVO：Variable Object（变量对象）"),Object(l.b)("p",null,"VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容："),Object(l.b)("p",null,"变量 (var, 变量声明);\n函数声明 (FunctionDeclaration, 缩写为FD);\n函数的形参"),Object(l.b)("p",null,"AO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了："),Object(l.b)("p",null,"函数的所有局部变量\n函数的所有命名参数\n函数的参数集合\n函数的this指向"),Object(l.b)("p",null,"作用域链：\n当代码在一个环境中创建时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。\n在《JavaScript深入之变量对象》中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"call、apply、bind的区别"),Object(l.b)("li",{parentName:"ul"},"防抖和节流的区别"),Object(l.b)("li",{parentName:"ul"},"ES6新的特性")),Object(l.b)("h3",{id:"prototype和proto区别"},"prototype和",Object(l.b)("strong",{parentName:"h3"},"proto"),"区别"),Object(l.b)("p",null,"一个是构造函数的属性，一个是实例的属性"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"new是怎么实现的")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"localStorage和cookie有什么区别")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"介绍原型链")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"如何继承")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"介绍JS数据类型，基本数据类型和引用数据类型的区别")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Array 是 Object 类型吗")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"数据类型分别存在哪里")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},'var a = {name: "前端开发"}; var b = a; a = null那么b输出什么')),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"var a = {b: 1} 存放在哪里")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"var a = {b: {c: 1}}存放在哪里")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"栈和堆的区别")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"垃圾回收时栈和堆的区别")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"栈和堆具体怎么存储")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"JS执行过程中分为哪些阶段")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"词法作用域和this的区别")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"平常是怎么做继承")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"深拷贝和浅拷贝")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"loadsh深拷贝实现原理")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"ES6中let块作用域是怎么实现的")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"JS变量类型分为几种，区别是什么")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"手写数组去重函数")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"手写数组扁平化函数")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"前端怎么控制管理路由")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"使用路由时出现问题如何解决")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"柯里化函数两端的参数具体是什么东西")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"如何设计一个 localStorage，保证数据的实效性")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"some、every、find、filter、map、forEach有什么区别"))),Object(l.b)("h2",{id:"重绘和回流"},"重绘和回流"),Object(l.b)("p",null,"浏览器使用流式布局模型 (Flow Based Layout)\n浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了Render Tree\n有了RenderTree就能知道所有节点的样式，计算节点在页面上的大小和位置，把节点绘制到页面上\n由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，通常需要多次计算且要花费3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一"),Object(l.b)("p",null,"浏览器渲染过程如下："),Object(l.b)("p",null,"解析HTML，生成DOM树\n解析CSS，生成CSSOM树\n将DOM树和CSSOM树结合，生成渲染树(Render Tree)\nLayout(回流)：根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）\nPainting(重绘)：根据渲染树以及回流得到的几何信息，得到节点的绝对像素\nDisplay：将像素发送给GPU，展示在页面上。（这一步其实还有很多内容，比如会在GPU将多个合成层合并为同一个层，并展示在页面中。而css3硬件加速的原理则是新建合成层，这里我们不展开，之后有机会会写一篇博客）"),Object(l.b)("p",null,"何时触发回流和重绘\n何时发生回流："),Object(l.b)("p",null,"添加或删除可见的DOM元素\n元素的位置发生变化\n元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n页面一开始渲染的时候（这肯定避免不了）\n浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）"),Object(l.b)("p",null,"何时发生重绘（回流一定会触发重绘）：\n当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。\n有时即使仅仅回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。现代浏览器会对频繁的回流或重绘操作进行优化，浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。你访问以下属性或方法时，浏览器会立刻清空队列："),Object(l.b)("p",null,"clientWidth、clientHeight、clientTop、clientLeft\noffsetWidth、offsetHeight、offsetTop、offsetLeft\nscrollWidth、scrollHeight、scrollTop、scrollLeft\nwidth、height\ngetComputedStyle()\ngetBoundingClientRect()"),Object(l.b)("p",null,"以上属性和方法都需要返回最新的布局信息，因此浏览器不得不清空队列，触发回流重绘来返回正确的值。因此，我们在修改样式的时候，",Object(l.b)("strong",{parentName:"p"},"最好避免使用上面列出的属性，他们都会刷新渲染队列。"),"如果要使用它们，最好将值缓存起来。\n如何避免触发回流和重绘\nCSS："),Object(l.b)("p",null,"避免使用table布局。\n尽可能在DOM树的最末端改变class。\n避免设置多层内联样式。\n将动画效果应用到position属性为absolute或fixed的元素上\n避免使用CSS表达式（例如：calc()）\nCSS3硬件加速（GPU加速）"),Object(l.b)("p",null,"JavaScript："),Object(l.b)("p",null,"避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性\n避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中\n也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘\n避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来\n对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流"),Object(l.b)("h3",{id:"随机值存在一样的情况，如何避免"},"随机值存在一样的情况，如何避免?"),Object(l.b)("p",null,"加时间戳"),Object(l.b)("h3",{id:"如何找-0-5-的随机数，95-99呢"},"如何找 0-5 的随机数，95-99呢"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"Math.floor(Math.random() * 5 + 1)\nMath.floor(Math.random() * 4 + 95)\n")),Object(l.b)("h2",{id:"事件"},"事件"),Object(l.b)("h3",{id:"浏览器事件流向"},"浏览器事件流向"),Object(l.b)("h3",{id:"事件代理和优缺点"},"事件代理和优缺点"),Object(l.b)("p",null,"事件代理能节省内存，缺点是如果事件链太长，会稍慢一些"),Object(l.b)("h3",{id:"如何判断是button"},"如何判断是button"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"e.target.tagName === 'BUTTON'\n")),Object(l.b)("h3",{id:"生成一万个button，并且绑定事件，如何做"},"生成一万个button，并且绑定事件，如何做"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"拼接字符串，插入"),Object(l.b)("li",{parentName:"ol"},"事件委托")),Object(l.b)("h3",{id:"事件委托的优点"},"事件委托的优点"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"只在内存中开辟了一块空间，节省资源同时减少了dom操作，提高性能"),Object(l.b)("li",{parentName:"ol"},"对于新添加的元素也会有之前的事件")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"target"),Object(l.b)("li",{parentName:"ul"},"currentTarget"),Object(l.b)("li",{parentName:"ul"},"relateTarget具体指向什么目标")),Object(l.b)("h3",{id:"改变-input-后-p-标签就跟着变"},"改变 input 后 p 标签就跟着变"),Object(l.b)("p",null,"监听input的哪个事件，在什么时候触发"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"设置 input 事件")),Object(l.b)("h3",{id:"react的事件机制（绑定一个事件到一个组件上）"},"React的事件机制（绑定一个事件到一个组件上）"),Object(l.b)("h2",{id:"性能优化"},"性能优化"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"前端性能优化"),Object(l.b)("li",{parentName:"ul"},"304是什么"),Object(l.b)("li",{parentName:"ul"},"整个前端性能提升大致分几类"),Object(l.b)("li",{parentName:"ul"},"用户体验做过什么优化"),Object(l.b)("li",{parentName:"ul"},"前端性能优化（JS原生和React）"),Object(l.b)("li",{parentName:"ul"},"前端性能优化（1js css；2 图片；3 缓存预加载； 4 SSR； 5 多域名加载；6 负载均衡）"),Object(l.b)("li",{parentName:"ul"},"并发请求资源数上限（6个）"),Object(l.b)("li",{parentName:"ul"},"base64为什么能提升性能，缺点"),Object(l.b)("li",{parentName:"ul"},"介绍 webp 这个图片文件格式"),Object(l.b)("li",{parentName:"ul"},"介绍service worker")),Object(l.b)("h2",{id:"异步"},"异步"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍异步方案"),Object(l.b)("li",{parentName:"ul"},"Promise 和 async/await 和 callback的区别"),Object(l.b)("li",{parentName:"ul"},"Promise有没有解决异步的问题（promise链是真正强大的地方）")),Object(l.b)("h3",{id:"promise和settimeout的区别（event-loop）"},"Promise和setTimeout的区别（Event Loop）"),Object(l.b)("h3",{id:"浏览器和-node-事件环的区别"},"浏览器和 node 事件环的区别"),Object(l.b)("p",null,"Node.js中宏任务分成了几种类型，并且放在了不同的task queue里。不同的task queue在执行顺序上也有区别，微任务放在了每个task queue的末尾："),Object(l.b)("p",null,"setTimeout/setInterval 属于 timers 类型；\nsetImmediate 属于 check 类型；\nsocket 的 close 事件属于 close callbacks 类型；\n其他 MacroTask 都属于 poll 类型。\nprocess.nextTick 本质上属于 MicroTask，但是它先于所有其他 MicroTask 执行；\n所有 MicroTask 的执行时机在不同类型的 MacroTask 切换后。\nidle/prepare 仅供内部调用，我们可以忽略。\npending callbacks 不太常见，我们也可以忽略。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍Promise和then"),Object(l.b)("li",{parentName:"ul"},"介绍Promise，异常捕获"),Object(l.b)("li",{parentName:"ul"},"介绍下Promise，内部实现"),Object(l.b)("li",{parentName:"ul"},"如何设计Promise.all()"),Object(l.b)("li",{parentName:"ul"},"使用Async会注意哪些东西"),Object(l.b)("li",{parentName:"ul"},"Async里面有多个await请求，可以怎么优化（请求是否有依赖）"),Object(l.b)("li",{parentName:"ul"},"Promise和Async处理失败的时候有什么区别"),Object(l.b)("li",{parentName:"ul"},"介绍下Promise的用途和性质"),Object(l.b)("li",{parentName:"ul"},"Promise有几个状态"),Object(l.b)("li",{parentName:"ul"},"promise 的精髓，以及优缺点"),Object(l.b)("li",{parentName:"ul"},"JS怎么实现异步"),Object(l.b)("li",{parentName:"ul"},"异步整个执行周期"),Object(l.b)("li",{parentName:"ul"},"Async/Await怎么实现"),Object(l.b)("li",{parentName:"ul"},"Promise和setTimeout执行先后的区别"),Object(l.b)("li",{parentName:"ul"},"JS为什么要区分微任务和宏任务"),Object(l.b)("li",{parentName:"ul"},"Promise构造函数是同步还是异步执行，then呢"),Object(l.b)("li",{parentName:"ul"},"Promise.all实现原理"),Object(l.b)("li",{parentName:"ul"},"介绍Promise的特性，优缺点"),Object(l.b)("li",{parentName:"ul"},"promise如何实现then处理"),Object(l.b)("li",{parentName:"ul"},"promise里面和then里面执行有什么区别"),Object(l.b)("li",{parentName:"ul"},"setInterval需要注意的点"),Object(l.b)("li",{parentName:"ul"},"定时器为什么是不精确的"),Object(l.b)("li",{parentName:"ul"},"setTimeout(1)和setTimeout(2)之间的区别"),Object(l.b)("li",{parentName:"ul"},"介绍宏任务和微任务"),Object(l.b)("li",{parentName:"ul"},"JS 异步解决方案的发展历程以及优缺点"),Object(l.b)("li",{parentName:"ul"},"对async、await的理解，内部原理")),Object(l.b)("h2",{id:"算法"},"算法"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"1块、4块、5块，求总数n块的最小硬币数"),Object(l.b)("li",{parentName:"ul"},"介绍冒泡排序，选择排序，冒泡排序如何优化"),Object(l.b)("li",{parentName:"ul"},"介绍快速排序"),Object(l.b)("li",{parentName:"ul"},"算法：前K个最大的元素"),Object(l.b)("li",{parentName:"ul"},"项目中树的使用场景以及了解"),Object(l.b)("li",{parentName:"ul"},"介绍排序算法和快排原理"),Object(l.b)("li",{parentName:"ul"},"如何判断链表是否有环"),Object(l.b)("li",{parentName:"ul"},"介绍二叉搜索树的特点"),Object(l.b)("li",{parentName:"ul"},"项目中如何应用数据结构"),Object(l.b)("li",{parentName:"ul"},"介绍下DFS深度优先")),Object(l.b)("h2",{id:"跨域"},"跨域"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍下浏览器跨域\n端口、协议、域名某一个不同时就会跨域，主要是为了安全，防止 csrf 攻击，")),Object(l.b)("h3",{id:"怎么去解决跨域问题"},"怎么去解决跨域问题"),Object(l.b)("p",null,"ajax 跨域解决方法有 CORS JSONP\n窗口跨域可以用：postMessage、window.name、document.domain、hash、websocket 等"),Object(l.b)("h3",{id:"jsonp方案需要服务端怎么配合"},"jsonp方案需要服务端怎么配合"),Object(l.b)("p",null,"服务端返回 callback(data) 的形式。"),Object(l.b)("h3",{id:"加上cors之后从发起到请求正式成功的过程"},"加上CORS之后从发起到请求正式成功的过程"),Object(l.b)("p",null,"如果是简单请求，会有OPTIONS预检，检查服务器是否支持跨域请求。"),Object(l.b)("p",null,"简单请求是指: get head post请求、content-Type是文本、表单、formData类型，无自定义头。\n非简单请求是：put delete、带自定义头，content-type 是 json"),Object(l.b)("h3",{id:"跨域怎么解决，有没有使用过apache等方案"},"跨域怎么解决，有没有使用过Apache等方案"),Object(l.b)("p",null,"没有，用过 nginx。"),Object(l.b)("h3",{id:"access-control-allow-origin-在服务端哪里配置"},"Access-Control-Allow-Origin 在服务端哪里配置"),Object(l.b)("p",null,"hader 里配置，可以设置一个白名单。"),Object(l.b)("h3",{id:"csrf-跨站攻击怎么解决"},"csrf 跨站攻击怎么解决"),Object(l.b)("p",null,"解决方案有："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"禁止第三方网站带 cookies，可以通过设置 cookie 的same-site属性实现。"),Object(l.b)("li",{parentName:"ul"},"在前端加入验证码（但是影响用户体验，可以用ccap模块）。"),Object(l.b)("li",{parentName:"ul"},"使用 token。前端将它放到页面",Object(l.b)("inlineCode",{parentName:"li"},"<input type=hidden token=xx>"),"或 ",Object(l.b)("inlineCode",{parentName:"li"},"<meta>")," 中，同时后端将它设置到 cookie 中，在发送请求时后端验证这2个值是否一致。因为攻击者不访问前端无法获得 token ，而且无法得到和修改 cookie 里的 token。"),Object(l.b)("li",{parentName:"ul"},"验证origin Header和referer Header。打开本地 url file://xx 不会发送 referer，通过 http 请求才会发。所以可以使用正则/https?\\/\\/localhost/ 验证 referer 是否符合条件。但有些浏览器可以让用户设置不发 referer，所以可能会导致一些问题。")),Object(l.b)("h3",{id:"cors如何设置"},"CORS如何设置"),Object(l.b)("p",null,"res.setHeader('Access-Control-Allow-Origin', '')"),Object(l.b)("h3",{id:"介绍同源策略"},"介绍同源策略"),Object(l.b)("h3",{id:"jsonp-为什么不支持-post-方法"},"jsonp 为什么不支持 post 方法"),Object(l.b)("h3",{id:"jsonp-安全性"},"jsonp 安全性"),Object(l.b)("p",null,"jsonp  csrf",Object(l.b)("br",{parentName:"p"}),"\n","xss   1.强制 content-type: application/json  2.强制将字符转换 < $lt 等"),Object(l.b)("h2",{id:"小程序"},"小程序"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"小程序里面开页面最多多少  < 10  做了限制")),Object(l.b)("h2",{id:"设计模式"},"设计模式"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍下观察者模式"),Object(l.b)("li",{parentName:"ul"},"观察者和发布订阅的区别，各自用在哪里"),Object(l.b)("li",{parentName:"ul"},"观察者模式里面使用的数据结构(不具备顺序 ，是一个list)"),Object(l.b)("li",{parentName:"ul"},"单例、工厂、观察者项目中实际场景"),Object(l.b)("li",{parentName:"ul"},"介绍中介者模式"),Object(l.b)("li",{parentName:"ul"},"前端开发中用到哪些设计模式"),Object(l.b)("li",{parentName:"ul"},"React/Redux中哪些功能用到了哪些设计模式")),Object(l.b)("h2",{id:"内存泄露"},"内存泄露"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍垃圾回收"),Object(l.b)("li",{parentName:"ul"},"添加原生事件不移除为什么会内存泄露"),Object(l.b)("li",{parentName:"ul"},"还有哪些地方会内存泄露"),Object(l.b)("li",{parentName:"ul"},"JS里垃圾回收机制是什么，常用的是哪种，怎么处理的")),Object(l.b)("h2",{id:"项目"},"项目"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"遇到的复杂业务场景  火车票里的三种状态"),Object(l.b)("li",{parentName:"ul"},"什么是单页项目"),Object(l.b)("li",{parentName:"ul"},"使用过程中遇到的问题，如何解决的"),Object(l.b)("li",{parentName:"ul"},"网站SEO怎么处理"),Object(l.b)("li",{parentName:"ul"},"服务端怎么做统一的状态处理"),Object(l.b)("li",{parentName:"ul"},"介绍单页面应用和多页面应用"),Object(l.b)("li",{parentName:"ul"},"介绍MVP怎么组织"),Object(l.b)("li",{parentName:"ul"},"对PWA有什么了解")),Object(l.b)("h2",{id:"webpack"},"webpack"),Object(l.b)("h3",{id:"webpack-打包流程和生命周期"},"webpack 打包流程和生命周期"),Object(l.b)("p",null,"打包过程：\n1. 初始化 option， entry-option\n1. 开始编译  run"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"// Compiler.js  经过改造，只为了让流程清晰\nclass Compiler{\n    newCompilation(){\n        const compilation = new Compilation(this)\n        this.hooks.compilation.call()\n    }\n    compile(callback){\n        this.hooks.beforeCompile.callAsync(()=>{\n            this.hooks.compile.call()\n            const compilation = this.newCompilation()\n            this.hooks.make.callAsync(compilation, ()=>{\n                compilation.finish(()=>{\n                    compilation.seal(()=>{\n                        this.hooks.afterCompile.callAsync(compilation, ()=>{\n                            return callback(null, compilation)\n                        })\n                    })\n                })\n            })\n        })\n    }\n    run(){\n        const onCompiled = ()=>{\n            this.hooks.shouldEmit.call()\n            this.emitAssets(compilation, ()=>{\n                this.hooks.done.callAsync(()=>{\n                    this.hooks.additionalPass.callAsync(()=>{\n                        this.compile(onCompiled)\n                    })\n                })\n            })\n        }\n        this.hooks.beforeRun.callAsync(()=>{\n            this.hooks.run.callAsync(()=>{\n                this.compile(onCompiled)\n            })\n        })\n    }\n}\n")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"make:  从 entry 开始递归的分析依赖，对每个依赖模块进行 build"),Object(l.b)("li",{parentName:"ol"},"before-resolve: 对模块位置进行解析"),Object(l.b)("li",{parentName:"ol"},"build-module: 使用 loader 加载文件并开始构建某个模块"),Object(l.b)("li",{parentName:"ol"},"normal-module-loader: 对 loader 加载对文件用 acron 编译，生成 AST 树"),Object(l.b)("li",{parentName:"ol"},"program: 遍历 AST，当遇到 require 等一些调用表达式时，收集依赖"),Object(l.b)("li",{parentName:"ol"},"seal: 所有依赖 build 完成，开始优化（抽取公共模块，加 hash）"),Object(l.b)("li",{parentName:"ol"},"emit: 输出到 dist 目录")),Object(l.b)("p",null,"生命周期"),Object(l.b)("p",null,"compiler hooks 流程相关"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(before-)run"),Object(l.b)("li",{parentName:"ul"},"(before-/after-)compile"),Object(l.b)("li",{parentName:"ul"},"make"),Object(l.b)("li",{parentName:"ul"},"(after-)emit"),Object(l.b)("li",{parentName:"ul"},"done")),Object(l.b)("p",null,"监听相关"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"watch-run"),Object(l.b)("li",{parentName:"ul"},"watch-close")),Object(l.b)("p",null,"compilation hooks\ncompiler 也会调用 compilation 生命周期方法\naddEntry -> addModuleChain\nfinish 模块错误上报\nseal 构建完后资源的生成和优化"),Object(l.b)("p",null,"ModuleFactory会创建\nNormalModuleFactory\nContextModuleFactory"),Object(l.b)("p",null,"Module 下有五种\nNormalModule  普通模块\n- 使用loader-runner 运行 loaders\n- 通过 Parser 解析，内部是 acron，解析出 require 依赖\n- ParserPlugins 添加依赖\nContextModule ./src/a 带路径的\nExternalModule  module.exports = jQuery\nDelegatedModule  manifest\nMultiModule      entry:","['a','b']"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"使用 webpack 构建时有无做一些自定义操作? ")),Object(l.b)("p",null,"之前将 vue-cli 的单页配置改为多页配置。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"webpack里面的插件是怎么实现的?")),Object(l.b)("p",null,"插件机制是通过 tapable 实现的，它类似 node 里的 EventEmitter。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"抽取公共文件是怎么配置的?")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"optimization:{\n    splitChunks: {\n        cacheGroups: {\n            commons: {\n                name: 'commons',\n                chunks: 'all',\n                minChunks: 2\n            }\n        }\n    }\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"import { Button } from 'antd'")," ，打包的时候只打包button，分模块加载，是怎么做到的")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"loader 和 plugin 有什么区别"))),Object(l.b)("p",null,"loader 主要是加载资源，转换资源。plugin 主要是扩展 webpack 功能，更强大。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍AST（Abstract Syntax Tree）抽象语法树")),Object(l.b)("p",null,"AST 抽象语法树是对源代码的一种抽象。将源代码抽象成树状结构，像 babel，场景的 ast 库有 babylon。之前模仿过一个四则运算的解析器。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"使用过webpack里面哪些 plugin 和 loader ?")),Object(l.b)("p",null,"HtmlWebpackPlugin\nCleanWebpackPlugin\nTerserWebpackPlguin\nDllPlugin\nCommonsChunkPlugin\nSplitChunksPlugin\nHotModuleReplacementPlugin\nMiniCssExtractPlugin\nUglifyjsWebpackPlugin"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"一般怎么组织CSS（Webpack）")),Object(l.b)("p",null,"专门建一个 css 目录，通过",Object(l.b)("inlineCode",{parentName:"p"},"import"),"入口文件，通用样式放在入口文件中，按照模块添加样式文件，组件内文件放在 .vue 文件中。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"webpack和gulp的优缺点")),Object(l.b)("p",null,"gulp 是基于任务的，可以自动化完成一些任务，但是它没有解决模块化和打包的问题。\nwebpack 目的就是打包，支持各种模块化开发。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"webpack 配 sass 需要哪些 loader?")),Object(l.b)("p",null,"css-loader、less-loader、style-loader(或者 MiniCssExtractPlugin 将 css 提取出来)"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"如何配置把js、css、html单独打包成一个文件。")),Object(l.b)("p",null,"html 通过 HtmlWebpackPlugin 生成。css 通过 style-loader 或 html-inline-css-webpack-plugin 插件，可以嵌入到 html 中。\n可以使用 raw-loader 在 html 模版里嵌入 html 和 js 文件。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}<\/script>\n")),Object(l.b)("h2",{id:"vue"},"vue"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"虚拟DOM主要做了什么"),Object(l.b)("li",{parentName:"ul"},"虚拟DOM本身是什么（JS对象）")),Object(l.b)("h2",{id:"css"},"css"),Object(l.b)("h3",{id:"介绍flex布局"},"介绍flex布局"),Object(l.b)("h3",{id:"介绍css3中positionsticky"},"介绍css3中position:sticky"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍position属性包括CSS3新增")),Object(l.b)("h3",{id:"清除浮动"},"清除浮动"),Object(l.b)("h2",{id:"浏览器"},"浏览器"),Object(l.b)("h3",{id:"居中为什么要使用transform（为什么不使用marginlefttop）"},"居中为什么要使用transform（为什么不使用marginLeft/Top）"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"定位问题（绝对定位、相对定位等）"),Object(l.b)("li",{parentName:"ul"},"transform动画和直接使用left、top改变位置有什么优缺点"),Object(l.b)("li",{parentName:"ul"},"动画的了解"),Object(l.b)("li",{parentName:"ul"},"CSS选择器有哪些")),Object(l.b)("h3",{id:"css选择器优先级"},"css选择器优先级"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"!important  "),Object(l.b)("li",{parentName:"ul"},"行内"),Object(l.b)("li",{parentName:"ul"},"id"),Object(l.b)("li",{parentName:"ul"},"类/伪类/属性选择器"),Object(l.b)("li",{parentName:"ul"},"元素/关系/伪元素选择器"),Object(l.b)("li",{parentName:"ul"},"通配符选择器")),Object(l.b)("h3",{id:"伪类和伪元素的区别"},"伪类和伪元素的区别"),Object(l.b)("p",null,": 和 ::(ie8)\n伪类： 状态\n伪元素: 新增一些元素，不在dom树中，在css树中"),Object(l.b)("h3",{id:"盒子模型，以及标准情况和ie下的区别"},"盒子模型，以及标准情况和IE下的区别"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"如何实现高度自适应"),Object(l.b)("li",{parentName:"ul"},"如何实现H5手机端的适配"),Object(l.b)("li",{parentName:"ul"},"rem、flex的区别（root em）"),Object(l.b)("li",{parentName:"ul"},"em和px的区别"),Object(l.b)("li",{parentName:"ul"},"两个元素块，一左一右，中间相距10像素"),Object(l.b)("li",{parentName:"ul"},"上下固定，中间滚动布局如何实现")),Object(l.b)("h3",{id:"盒模型"},"盒模型"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"margin border padding")),Object(l.b)("p",null,"box-sizing: content-box\nborder-box: border-box   ie6"),Object(l.b)("h3",{id:"如何实现左侧宽度固定，右侧宽度自适应的布局"},"如何实现左侧宽度固定，右侧宽度自适应的布局"),Object(l.b)("h2",{id:"安全"},"安全"),Object(l.b)("h3",{id:"项目中如何处理安全问题"},"项目中如何处理安全问题"),Object(l.b)("h3",{id:"介绍css，xsrf"},"介绍css，xsrf"),Object(l.b)("h3",{id:"xsrf跨域攻击的安全性问题怎么防范"},"xsrf跨域攻击的安全性问题怎么防范"),Object(l.b)("h3",{id:"对安全有什么了解"},"对安全有什么了解"),Object(l.b)("h3",{id:"介绍下数字签名的原理"},"介绍下数字签名的原理"),Object(l.b)("h2",{id:"ajax"},"ajax"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"文件上传如何做断点续传"),Object(l.b)("li",{parentName:"ul"},"表单可以跨域吗"),Object(l.b)("li",{parentName:"ul"},"异步请求，低版本fetch如何低版本适配"),Object(l.b)("li",{parentName:"ul"},"前端和后端怎么联调")),Object(l.b)("h3",{id:"文件上传的二进制具体是怎么处理的"},"文件上传的二进制具体是怎么处理的"),Object(l.b)("p",null,"form-data\napplication/x-www-form-urlencoded"),Object(l.b)("h2",{id:"cookie-session"},"cookie session"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"cookie放哪里，cookie能做的事情和存在的价值"),Object(l.b)("li",{parentName:"ul"},"cookie和token都存放在header里面，为什么只劫持前者"),Object(l.b)("li",{parentName:"ul"},"cookie和session有哪些方面的区别")),Object(l.b)("h2",{id:"300前端怎么做单元测试"},"300.前端怎么做单元测试"),Object(l.b)("h2",{id:"html"},"html"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"html语义化的理解"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"<b>"),"和",Object(l.b)("inlineCode",{parentName:"li"},"<strong>"),"的区别")),Object(l.b)("h2",{id:"防抖"},"防抖"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"搜索请求如何处理（防抖）")),Object(l.b)("h2",{id:"虚拟dom"},"虚拟DOM"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍虚拟DOM"),Object(l.b)("li",{parentName:"ul"},"为什么虚拟DOM比真实DOM性能好"),Object(l.b)("li",{parentName:"ul"},"渲染的时候key给什么值，可以使用index吗，用id好还是index好")),Object(l.b)("h2",{id:"rn"},"rn"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"RN有没有做热加载"),Object(l.b)("li",{parentName:"ul"},"RN遇到的兼容性问题"),Object(l.b)("li",{parentName:"ul"},"RN如何实现一个原生的组件"),Object(l.b)("li",{parentName:"ul"},"RN混原生和原生混RN有什么不同"),Object(l.b)("li",{parentName:"ul"},"RN的原理，为什么可以同时在安卓和IOS端运行"),Object(l.b)("li",{parentName:"ul"},"RN如何调用原生的一些功能"),Object(l.b)("li",{parentName:"ul"},"介绍RN的缺点"),Object(l.b)("li",{parentName:"ul"},"RN和原生通信"),Object(l.b)("li",{parentName:"ul"},"如何做RN在安卓和IOS端的适配"),Object(l.b)("li",{parentName:"ul"},"RN为什么能在原生中绘制成原生组件（bundle.js）"),Object(l.b)("li",{parentName:"ul"},"native提供了什么能力给RN"),Object(l.b)("li",{parentName:"ul"},"安卓Activity之间数据是怎么传递的"),Object(l.b)("li",{parentName:"ul"},"安卓4.0到6.0过程中WebView对js兼容性的变化"),Object(l.b)("li",{parentName:"ul"},"WebView和原生是如何通信")),Object(l.b)("h2",{id:"进程和线程"},"进程和线程"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"进程和线程的区别（一个node实例就是一个进程，node是单线程，通过事件循环来实现异步）")),Object(l.b)("h2",{id:"node"},"node"),Object(l.b)("h3",{id:"nodejs的加载机制"},"Node.js的加载机制"),Object(l.b)("p",null,"require和module.exports\nmodule.exports和exports的区别，或者也可能问CommonJS引入和ES6引入的区别。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"node接口转发有无做什么优化"),Object(l.b)("li",{parentName:"ul"},"node起服务如何保证稳定性，平缓降级，重启等"),Object(l.b)("li",{parentName:"ul"},"node文件查找优先级")),Object(l.b)("h3",{id:"如何在node端配置路径别名"},"如何在Node端配置路径别名"),Object(l.b)("p",null,"类似于Webpack中的alias配置"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"全局变量"),Object(l.b)("li",{parentName:"ul"},"修改 rootRequire"),Object(l.b)("li",{parentName:"ul"},"封装自己的require")),Object(l.b)("h2",{id:"npm2和npm3有什么区别"},"npm2和npm3+有什么区别"),Object(l.b)("h2",{id:"react"},"react"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"有没有涉及到Cluster"),Object(l.b)("li",{parentName:"ul"},"如何和MySQL进行通信"),Object(l.b)("li",{parentName:"ul"},"路由的动态加载模块"),Object(l.b)("li",{parentName:"ul"},"Redux如何实现多个组件之间的通信，多个组件使用相同状态如何进行管理"),Object(l.b)("li",{parentName:"ul"},"多个组件之间如何拆分各自的state，每块小的组件有自己的状态，它们之间还有一些公共的状态需要维护，如何思考这块"),Object(l.b)("li",{parentName:"ul"},"使用过的Redux中间件"),Object(l.b)("li",{parentName:"ul"},"介绍redux，主要解决什么问题"),Object(l.b)("li",{parentName:"ul"},"搜索请求中文如何请求"),Object(l.b)("li",{parentName:"ul"},"React组件中怎么做事件代理"),Object(l.b)("li",{parentName:"ul"},"React组件事件代理的原理"),Object(l.b)("li",{parentName:"ul"},"React怎么做数据的检查和变化"),Object(l.b)("li",{parentName:"ul"},"react-router怎么实现路由切换"),Object(l.b)("li",{parentName:"ul"},"react-router里的",Object(l.b)("inlineCode",{parentName:"li"},"<Link>"),"标签和",Object(l.b)("inlineCode",{parentName:"li"},"<a>"),"标签有什么区别"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"<a>"),"标签默认事件禁掉之后做了什么才实现了跳转"),Object(l.b)("li",{parentName:"ul"},"React层面的性能优化"),Object(l.b)("li",{parentName:"ul"},"React中Dom结构发生变化后内部经历了哪些变化"),Object(l.b)("li",{parentName:"ul"},"React挂载的时候有3个组件，textComponent、composeComponent、domComponent，区别和关系，Dom结构发生变化时怎么区分data的变化，- 怎么更新，更新怎么调度，如果更新的时候还有其他任务存在怎么处理"),Object(l.b)("li",{parentName:"ul"},"key主要是解决哪一类的问题，为什么不建议用索引index（重绘）"),Object(l.b)("li",{parentName:"ul"},"Redux中异步的请求怎么处理"),Object(l.b)("li",{parentName:"ul"},"Redux中间件是什么东西，接受几个参数（两端的柯里化函数）"),Object(l.b)("li",{parentName:"ul"},"中间件是怎么拿到store和action，然后怎么处理"),Object(l.b)("li",{parentName:"ul"},"state是怎么注入到组件的，从reducer到组件经历了什么样的过程"),Object(l.b)("li",{parentName:"ul"},"redux的设计思想"),Object(l.b)("li",{parentName:"ul"},"接入redux的过程"),Object(l.b)("li",{parentName:"ul"},"绑定connect的过程"),Object(l.b)("li",{parentName:"ul"},"connect原理"),Object(l.b)("li",{parentName:"ul"},"react异步渲染的概念,介绍Time Slicing 和 Suspense"),Object(l.b)("li",{parentName:"ul"},"16.X声明周期的改变"),Object(l.b)("li",{parentName:"ul"},"16.X中props改变后在哪个生命周期中处理"),Object(l.b)("li",{parentName:"ul"},"介绍纯函数"),Object(l.b)("li",{parentName:"ul"},"pureComponent和FunctionComponent区别"),Object(l.b)("li",{parentName:"ul"},"介绍JSX"),Object(l.b)("li",{parentName:"ul"},"介绍高阶组件"),Object(l.b)("li",{parentName:"ul"},"React高阶组件的作用有哪些"),Object(l.b)("li",{parentName:"ul"},"React和Vue的区别"),Object(l.b)("li",{parentName:"ul"},"react性能优化"),Object(l.b)("li",{parentName:"ul"},"react生命周期"),Object(l.b)("li",{parentName:"ul"},"介绍Fiber"),Object(l.b)("li",{parentName:"ul"},"介绍DOM树对比"),Object(l.b)("li",{parentName:"ul"},"react中的key的作用"),Object(l.b)("li",{parentName:"ul"},"如何设计状态树"),Object(l.b)("li",{parentName:"ul"},"shouldComponentUpdate是为了解决什么问题"),Object(l.b)("li",{parentName:"ul"},"如何解决props层级过深的问题"),Object(l.b)("li",{parentName:"ul"},"Redux在状态管理方面解决了React本身不能解决的问题"),Object(l.b)("li",{parentName:"ul"},"Redux有没有做过封装"),Object(l.b)("li",{parentName:"ul"},"react生命周期，常用的生命周期"),Object(l.b)("li",{parentName:"ul"},"对应的生命周期做什么事"),Object(l.b)("li",{parentName:"ul"},"遇到性能问题一般在哪个生命周期里解决"),Object(l.b)("li",{parentName:"ul"},"怎么做性能优化（异步加载组件...）"),Object(l.b)("li",{parentName:"ul"},"写react有哪些细节可以优化"),Object(l.b)("li",{parentName:"ul"},"React子父组件之间如何传值"),Object(l.b)("li",{parentName:"ul"},"Emit事件怎么发，需要引入什么"),Object(l.b)("li",{parentName:"ul"},"介绍下React高阶组件，和普通组件有什么区别"),Object(l.b)("li",{parentName:"ul"},"一个对象数组，每个子对象包含一个id和name，React如何渲染出全部的name"),Object(l.b)("li",{parentName:"ul"},"其中有几个 name 不存在，通过异步接口获取，如何做"),Object(l.b)("li",{parentName:"ul"},"对React看法，有没有遇到一些坑"),Object(l.b)("li",{parentName:"ul"},"React生命周期"),Object(l.b)("li",{parentName:"ul"},"componentWillReceiveProps的触发条件是什么"),Object(l.b)("li",{parentName:"ul"},"React16.3对生命周期的改变"),Object(l.b)("li",{parentName:"ul"},"介绍下React的Filber架构"),Object(l.b)("li",{parentName:"ul"},"画 Filber 渲染树"),Object(l.b)("li",{parentName:"ul"},"介绍React高阶组件"),Object(l.b)("li",{parentName:"ul"},"父子组件之间如何通信"),Object(l.b)("li",{parentName:"ul"},"Redux怎么实现属性传递，介绍下原理"),Object(l.b)("li",{parentName:"ul"},"React-Router版本号"),Object(l.b)("li",{parentName:"ul"},"前后端通信使用什么方案"),Object(l.b)("li",{parentName:"ul"},"RESTful 常用的 Method"),Object(l.b)("li",{parentName:"ul"},"React声明周期"),Object(l.b)("li",{parentName:"ul"},"如何去除url中的#号"),Object(l.b)("li",{parentName:"ul"},"Redux状态管理器和变量挂载到window中有什么区别"),Object(l.b)("li",{parentName:"ul"},"如何实现异步加载"),Object(l.b)("li",{parentName:"ul"},"如何实现分模块打包（多入口）"),Object(l.b)("li",{parentName:"ul"},"React使用过的一些组件"),Object(l.b)("li",{parentName:"ul"},"介绍 Immuable"),Object(l.b)("li",{parentName:"ul"},"介绍下redux整个流程原理"),Object(l.b)("li",{parentName:"ul"},"React中setState后发生了什么"),Object(l.b)("li",{parentName:"ul"},"setState为什么默认是异步"),Object(l.b)("li",{parentName:"ul"},"setState什么时候是同步的"),Object(l.b)("li",{parentName:"ul"},"为什么3大框架出现以后就出现很多native（RN）框架（虚拟DOM）"),Object(l.b)("li",{parentName:"ul"},"a，b两个按钮，点击aba，返回顺序可能是baa，如何保证是aba（Promise.then）"),Object(l.b)("li",{parentName:"ul"},"介绍Redux"),Object(l.b)("li",{parentName:"ul"},"堆和栈的区别"),Object(l.b)("li",{parentName:"ul"},"介绍redux接入流程"),Object(l.b)("li",{parentName:"ul"},"rudux和全局管理有什么区别（数据可控、数据响应）"),Object(l.b)("li",{parentName:"ul"},"常用的中间件"),Object(l.b)("li",{parentName:"ul"},"如何对相对路径引用进行优化"),Object(l.b)("li",{parentName:"ul"},"knex连接数据库响应回调"),Object(l.b)("li",{parentName:"ul"},"redux状态树的管理"),Object(l.b)("li",{parentName:"ul"},"react设计思路"),Object(l.b)("li",{parentName:"ul"},"react常见的通信方式"),Object(l.b)("li",{parentName:"ul"},"redux整体的工作流程"),Object(l.b)("li",{parentName:"ul"},"redux和全局对象之间的区别"),Object(l.b)("li",{parentName:"ul"},"Redux数据回溯设计思路"),Object(l.b)("li",{parentName:"ul"},"react生命周期"),Object(l.b)("li",{parentName:"ul"},"react性能优化"),Object(l.b)("li",{parentName:"ul"},"介绍pureComponet"),Object(l.b)("li",{parentName:"ul"},"介绍Function Component"),Object(l.b)("li",{parentName:"ul"},"React数据流"),Object(l.b)("li",{parentName:"ul"},"props和state的区别"),Object(l.b)("li",{parentName:"ul"},"介绍react context"),Object(l.b)("li",{parentName:"ul"},"React15/16.x的区别"),Object(l.b)("li",{parentName:"ul"},"重新渲染render会做些什么"),Object(l.b)("li",{parentName:"ul"},"哪些方法会触发react重新渲染"),Object(l.b)("li",{parentName:"ul"},"state和props触发更新的生命周期分别有什么区别"),Object(l.b)("li",{parentName:"ul"},"setState是同步还是异步"),Object(l.b)("li",{parentName:"ul"},"对无状态组件的理解"),Object(l.b)("li",{parentName:"ul"},"介绍Redux工作流程"),Object(l.b)("li",{parentName:"ul"},"对react看法，它的优缺点"),Object(l.b)("li",{parentName:"ul"},"react的理念是什么（拿函数式编程来做页面渲染）"),Object(l.b)("li",{parentName:"ul"},"React声明周期及自己的理解"),Object(l.b)("li",{parentName:"ul"},"如何配置React-Router"),Object(l.b)("li",{parentName:"ul"},"服务端渲染SSR"),Object(l.b)("li",{parentName:"ul"},"介绍路由的history")),Object(l.b)("p",null,"history.length\nhistory.go(-1)\nhistory.back()\nhistory.forward()\nhisotry.pushState()\nhisotry.replaceState()\nhistory.state 可以直接读取历史条目的状态，不需要等待 popstate\npopstate 事件，只有点击浏览器才会触发，pushState 不会触发"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"介绍react优化"),Object(l.b)("li",{parentName:"ul"},"redux请求中间件如何处理并发"),Object(l.b)("li",{parentName:"ul"},"介绍Redux数据流的流程")),Object(l.b)("p",null,"vuex"),Object(l.b)("p",null,"vuex 是 vue.js 开发的状态管理模式，是集中式存储管理的方式给所有组件提供状态。并保证状态以一种可预测的方式发生变化。"),Object(l.b)("p",null,"问题：多个组件共享时，单向数据流很容易被破坏。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"多个视图依赖同一状态。多层嵌套，兄弟组件状态传递。"),Object(l.b)("li",{parentName:"ul"},"不同视图需要变更一个状态。")),Object(l.b)("p",null,"vuex 将组件的共享状态抽取出来，以一个全局单例模式来管理。"),Object(l.b)("p",null,"vuex 的核心思想： store 仓库"),Object(l.b)("p",null,"store 和单纯的全局变量的不同："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"store 是响应式的，store 的变化会导致响应组件更新"),Object(l.b)("li",{parentName:"ul"},"不能直接修改 store，只能通过 commit mutation提交，这样可以记录每一步的变化，来了解应用的状态")),Object(l.b)("p",null,"通过强制的规定，代码变得结构化且易维护。"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"提供 install 方法。如果有 Vue 且是开发环境，报错 vuex 已经安装了。")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"applyMixin(Vue)\n")),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"applyMixin 就是给 Vue 添加 beforeCreate 方法，每个组件创建时会执行，即给每个组件注入 this.$store")),Object(l.b)("p",null,"组件渲染是从根到子的，所以根先有了，子再引用根的。"),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"Vue.mixin({ beforeCreate: vuexInit })\n\nfunction vuexInit () {\n    const options = this.$options\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store\n    }\n  }\n")),Object(l.b)("h2",{id:"vue-1"},"vue"),Object(l.b)("h3",{id:"vue-运行机制"},"vue 运行机制"),Object(l.b)("p",null,"初始化流程"),Object(l.b)("p",null,"创建Vue实例对象\ninit过程会初始化生命周期，初始化事件中心，初始化渲染、执行beforeCreate周期函数、初始化 data、props、computed、watcher、执行created周期函数等。\n初始化后，调用$mount方法对Vue实例进行挂载（挂载的核心过程包括模板编译、渲染以及更新三个过程）。\n如果没有在Vue实例上定义render方法而是定义了template，那么需要经历编译阶段。需要先将template 字符串编译成 render function，template 字符串编译步骤如下 ："),Object(l.b)("p",null,"parse正则解析template字符串形成AST（抽象语法树，是源代码的抽象语法结构的树状表现形式）\noptimize标记静态节点跳过diff算法（diff算法是逐层进行比对，只有同层级的节点进行比对，因此时间的复杂度只有O(n)。如果对于时间复杂度不是很清晰的，可以查看我写的文章ziyi2/algorithms-javascript/渐进记号）\ngenerate将AST转化成render function字符串"),Object(l.b)("p",null,"编译成render function 后，调用$mount的mountComponent方法，先执行beforeMount钩子函数，然后核心是实例化一个渲染Watcher，在它的回调函数（初始化的时候执行，以及组件实例中监测到数据发生变化时执行）中调用updateComponent方法（此方法调用render方法生成虚拟Node，最终调用update方法更新DOM）。\n调用render方法将render function渲染成虚拟的Node（真正的 DOM 元素是非常庞大的，因为浏览器的标准就把 DOM 设计的非常复杂。如果频繁的去做 DOM 更新，会产生一定的性能问题，而 Virtual DOM 就是用一个原生的 JavaScript 对象去描述一个 DOM 节点，所以它比创建一个 DOM 的代价要小很多，而且修改属性也很轻松，还可以做到跨平台兼容），render方法的第一个参数是createElement(或者说是h函数)，这个在官方文档也有说明。\n生成虚拟DOM树后，需要将虚拟DOM树转化成真实的DOM节点，此时需要调用update方法，update方法又会调用pacth方法把虚拟DOM转换成真正的DOM节点。需要注意在图中忽略了新建真实DOM的情况（如果没有旧的虚拟Node，那么可以直接通过createElm创建真实DOM节点），这里重点分析在已有虚拟Node的情况下，会通过sameVnode判断当前需要更新的Node节点是否和旧的Node节点相同（例如我们设置的key属性发生了变化，那么节点显然不同），如果节点不同那么将旧节点采用新节点替换即可，如果相同且存在子节点，需要调用patchVNode方法执行diff算法更新DOM，从而提升DOM操作的性能。"),Object(l.b)("p",null,"需要注意在初始化阶段，没有详细描述数据的响应式过程，这个在响应式流程里做说明。"),Object(l.b)("p",null,"响应式流程"),Object(l.b)("p",null,"在init的时候会利用Object.defineProperty方法（不兼容IE8）监听Vue实例的响应式数据的变化从而实现数据劫持能力（利用了JavaScript对象的访问器属性get和set，在未来的Vue3中会使用ES6的Proxy来优化响应式原理）。在初始化流程中的编译阶段，当render function被渲染的时候，会读取Vue实例中和视图相关的响应式数据，此时会触发getter函数进行依赖收集（将观察者Watcher对象存放到当前闭包的订阅者Dep的subs中），此时的数据劫持功能和观察者模式就实现了一个MVVM模式中的Binder，之后就是正常的渲染和更新流程。\n当数据发生变化或者视图导致的数据发生了变化时，会触发数据劫持的setter函数，setter会通知初始化依赖收集中的Dep中的和视图相应的Watcher，告知需要重新渲染视图，Wather就会再次通过update方法来更新视图。"),Object(l.b)("p",null,"可以发现只要视图中添加监听事件，自动变更对应的数据变化时，就可以实现数据和视图的双向绑定了。"),Object(l.b)("h3",{id:"vue响应式原理"},"Vue响应式原理"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://juejin.im/post/5cd8a7c1f265da037a3d0992#heading-22"}),"https://juejin.im/post/5cd8a7c1f265da037a3d0992#heading-22")),Object(l.b)("p",null,"Vue 3.0 在响应式原理上的优化"),Object(l.b)("h3",{id:"说说vue中nexttick的实现原理"},"说说Vue中$nextTick的实现原理"),Object(l.b)("p",null,"flush 清空"),Object(l.b)("p",null,"isUsingMicroTask\n1. Promise.then(ios 里回调会放入微任务队列，但是队列不更新，需要做一些其它事情才刷新 setTimeout)\n2. MutationObserver 观察一个 textNode，改变 textNode.data 更新\n3. setImmediate 高版本IE和edge   宏任务\n4. setTimeout"),Object(l.b)("p",null,"执行 nextTick(fn) 时，fn 会push 到 callbacks 数组中，flushCallbacks() 执行时循环去执行，包裹一层做错误处理\n如果参数不是函数，就\nnextTick().then(()=>{})"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://juejin.im/post/5cd9854b5188252035420a13"}),"https://juejin.im/post/5cd9854b5188252035420a13")),Object(l.b)("h3",{id:"react和vue的区别"},"React和Vue的区别"),Object(l.b)("h3",{id:"什么情况下会阻塞-dom-渲染"},"什么情况下会阻塞 DOM 渲染"),Object(l.b)("h3",{id:"computed的实现原理"},"computed的实现原理"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"computed 初始化是在 Vue 实例初始化阶段 initState()，initState 初始化了 props，methods，data，computed，watch"),Object(l.b)("li",{parentName:"ol"},"watchers = vm._computedWatchers = {} 创建一个watcher对象"),Object(l.b)("li",{parentName:"ol"},"initComputed(vm, opts.computed) 中循环 computed 对象，获取每个属性的 getter，然后给每个属性创建一个 watcher，添加到 watchers ，",Object(l.b)("inlineCode",{parentName:"li"},"watcher[key] = new Watcher(vm,getter,noop, 计算watcher配置)")),Object(l.b)("li",{parentName:"ol"},"如果 computed 里的key 不在 vm 上，就定义",Object(l.b)("inlineCode",{parentName:"li"},"defineComputed(vm, key, userDef)"),"。否则开发环境检查 computed 是否定义成了 data 或 prop，报警告。"),Object(l.b)("li",{parentName:"ol"},"defineComputed 就是 给 Object.defineProperty(vm,key, {getter}), 如果computed里是函数, 非 ssr，getter 就是 createComputedGetter(key)，是ssr 就是 userDef")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{className:"language-js"}),"function defineComputed(){\n    if(typeof userDef === 'function'){\n        // !ssr 缓存\n        sharedPropertyDefinition.get = !ssr ? createComputedGetter(key) : userDef\n    }else {\n        // 是对象，且有 set，才有 setter，否则 noop\n    }\n    \n    Object.defineProperty(target, key, sharedPropertyDefinition)\n}\nfunction createComputedGetter(key){\n    // 返回计算属性的 getter\n    return function computedGetter(){\n        const watcher = this._computedWatchers && this._computedWatchers[key]\n        if(watcher){\n            watcher.depend()\n            return watch.evaluate()\n        }\n    }\n}\n")),Object(l.b)("ol",{start:6},Object(l.b)("li",{parentName:"ol"},"computed watcher 和普通 watcher 的区别。")),Object(l.b)("h3",{id:"watch-的运行原理"},"Watch 的运行原理"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"initState() 初始化 initWatch"),Object(l.b)("li",{parentName:"ol"},"遍历 watch，如果 属性的handler 是数组则遍历调用 createWatcher"),Object(l.b)("li",{parentName:"ol"},"createWatcher ")),Object(l.b)("pre",null,Object(l.b)("code",a({parentName:"pre"},{}),"watch: {\n    // 配置转换是在 合并配置时\n    a(){}\n    a: {handler}\n    a: 'xx' // xx方法\n    a:[]\n}\n")),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"vm.$watch(key, handler, options)，options 里有 {deep:true} 之列")),Object(l.b)("h3",{id:"vue-的数据为什么频繁变化但只会更新一次"},"Vue 的数据为什么频繁变化但只会更新一次"),Object(l.b)("p",null,"Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。\n另外，关于waiting变量，这是很重要的一个标志位，它保证 flushSchedulerQueue 回调（$nextTick中执行）允许被置入callbacks一次。\n因为Vue的事件机制是通过事件队列来调度执行，会等主进程执行空闲后进行调度，所以先会去等待所有的同步代码执行完成之后再去一次更新。这样的性能优势很明显，比如：\n现在有这样的一种情况，mounted的时候test的值会被循环执行++1000次。 每次++时，都会根据响应式触发setter->Dep->Watcher->update->run。 如果这时候没有异步更新视图，那么每次++都会直接操作DOM更新视图，这是非常消耗性能的。 所以Vue实现了一个queue队列，在下一个tick（或者是当前tick的微任务阶段）统一执行queue中Watcher的run。同时，拥有相同id的Watcher不会被重复加入到该queue中去，所以不会执行1000次Watcher的run。最终更新视图只会直接将test对的DOM的0变成1000。 保证更新视图操作DOM的动作是在当前栈执行完以后下一个tick（或者是当前tick的微任务阶段）的时候调用，大大优化了性能。\n执行顺序update -> queueWatcher -> 维护观察者队列（重复id的Watcher处理） -> waiting标志位处理（保证需要更新DOM或者Watcher视图更新的方法flushSchedulerQueue只会被推入异步执行的$nextTick回调数组一次） -> 处理$nextTick（在为微任务或者宏任务中异步更新DOM）->"),Object(l.b)("p",null,"Vue是异步更新Dom的，Dom的更新放在下一个宏任务或者当前宏任务的末尾（微任务）中进行执行"),Object(l.b)("p",null,"由于VUE的数据驱动视图更新是异步的，即修改数据的当下，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。在同一事件循环中的数据变化后，DOM完成更新，立即执行nextTick(callback)内的回调。\nvue和react一样，对dom的修改都是异步的。它会在队列里记录你对dom的操作并进行diff操作，后一个操作会覆盖前一个，然后更新dom。"),Object(l.b)("h3",{id:"chrome插件如何屏蔽广告"},"Chrome插件如何屏蔽广告"),Object(l.b)("p",null,"提供右键 加入黑名单之类"),Object(l.b)("h3",{id:"zindex"},"zindex"),Object(l.b)("p",null,"默认值是 auto"),Object(l.b)("p",null,"z-index:0 的会创建一个新的层叠上下文\n而auto 不会"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://link.juejin.im/?target=https%3A%2F%2Fwww.zhangxinxu.com%2Fwordpress%2F2016%2F01%2Funderstand-css-stacking-context-order-z-index%2F"}),"https://link.juejin.im/?target=https%3A%2F%2Fwww.zhangxinxu.com%2Fwordpress%2F2016%2F01%2Funderstand-css-stacking-context-order-z-index%2F")),Object(l.b)("h3",{id:"css3动画"},"CSS3动画"),Object(l.b)("p",null,"CSS3动画硬件加速？CSS3动画的性能问题（重绘和重流，是否需要脱离正常文档流）？"),Object(l.b)("h3",{id:"es678-新特性"},"es678 新特性"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",a({parentName:"li"},{href:"https://juejin.im/post/5c02b106f265da61764aa0c1"}),"https://juejin.im/post/5c02b106f265da61764aa0c1")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",a({parentName:"li"},{href:"https://www.jianshu.com/p/9da4aa1c9970"}),"https://www.jianshu.com/p/9da4aa1c9970"))),Object(l.b)("h3",{id:"做过推动流程或者改善流程的事件"},"做过推动流程或者改善流程的事件"),Object(l.b)("h3",{id:"http状态码206是干什么的"},"HTTP状态码206是干什么的"),Object(l.b)("p",null,"断点续传"),Object(l.b)("h2",{id:"项目-1"},"项目"),Object(l.b)("h2",{id:"leader"},"leader"),Object(l.b)("p",null,"为什么要离开现在的公司\n以前公司的岗位制度是什么样\n你是校招进去的么\n你现在的岗位等级情况\n你的绩效情况\n你领导对你的评价是怎么样的\n领导是不是经常找你沟通"),Object(l.b)("p",null,"你为什么要离开现在的公司\n你们公司的岗位等级是怎么评定的，你现在是什么岗位等级\n谈谈你在公司的绩效情况\n你觉得你做的最有成就感的一件事\n你一般解决问题的方法有哪些\n你是因为什么契机选择做前端\n你有对你所在的公司做过什么流程或制度规范上的改进么\n你最近在看什么书，和工作相关么，你为什么要看这些书\n看到你之前还面试了其他两个部门都挂在了一面，你感觉是什么原因\n你期望的薪资待遇是多少"),Object(l.b)("h2",{id:"进程和线程-1"},"进程和线程"),Object(l.b)("p",null,"1、进程是资源分配的最小单位，线程是程序执行的最小单位（资源调度的最小单位）\n2、进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。\n而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。\n3、线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。\n4、但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。"),Object(l.b)("p",null,"12h   3天 珠峰 vue，搞定下面面试题"),Object(l.b)("p",null,Object(l.b)("a",a({parentName:"p"},{href:"https://github.com/haizlin/fe-interview/blob/master/lib/Vue.md"}),"https://github.com/haizlin/fe-interview/blob/master/lib/Vue.md")),Object(l.b)("p",null,"MVVM如何实现模板绑定，依赖是如何收集的？"),Object(l.b)("p",null,"vue2中的diff算法是怎样实现的？"),Object(l.b)("p",null,"请详细说出vue生命周期的执行过程"),Object(l.b)("p",null,"vue组件间的交互有七种你知道几种？"),Object(l.b)("p",null,"vue-cli3.0如何实现的？"),Object(l.b)("p",null,"说说hash路由和history路由，你能自己编写一个前端路由吗？"),Object(l.b)("p",null,"你能手写vuex状态管理吗？"),Object(l.b)("p",null,"你能开发自己的组件库吗(树组件，日期组件，表格组件)？"),Object(l.b)("h2",{id:"自我介绍"},"自我介绍"),Object(l.b)("p",null,"我叫贺昱皓，家乡是湖北潜江，2011年7月份从三峡大学毕业，本科学的是物理学专业，毕业后从事过丝网印刷、软件测试等工作，2014 左右年了解到到可以使用 seo 做网站来做淘宝客，开始学习 seo 搭建淘宝客网站，做网站过程中发现对页面修改比较感兴趣。后来发现前端这个行业，开始学习前端，15年过年后在武汉找了一家公司，信阳佳创互联有限公司，一直做到今年的5月份。在这段过程中不断的学习技能，努力将公司产品做到更好、将工作流程更规范化。公司大多数时候只有我一个前端，没有专业的 UE，所以用户体验这块我比较注重，经常看一些文章，然后思考后和其它同事讨论，做对应的修改。"),Object(l.b)("p",null,"我的自我介绍就到这里。"),Object(l.b)("h2",{id:"哪个项目最满意，如何做的？"},"哪个项目最满意，如何做的？"),Object(l.b)("p",null,"背景：代理商系统，当时公司准备做一个代理商系统，比较大，我之前了解过 vue，但是没有学过，在网上看了别个的对比后，容易上手，包体积小，数据驱动。于是花了两天时间将官方文档过了一遍。就开始做项目了。"),Object(l.b)("p",null,"当时是使用 vue-cli 搭建环境，然后使用 vue 全家桶做开发，样式库使用的是 weui。\n1. 基础库方面，写了一些基本的方法。\n1. 组件方面，基于 weui 封装了一些公共组件和业务组件，比如 tabbar，自动生成表单。\n1. 在网络请求方面，我封装了 axios，使用工厂模式导出了三个方法，get post upload ，用于发请求。直接可以 async await 调用。并且内部使用拦截器处理了响应数据。\n2. 在安全方面，防御 xss 攻击，csrf 攻击、密码安全、传输安全\n3. 工作流程方面\n- gulp 一键发布到测试环境和正式环境\n- 使用 prettier 规范代码格式\n- 使用 eslint 规范代码\n- 使用 husky 增加 commit 规范\n3. 性能优化方面：\n- 图片压缩\n- js懒加载和图片懒加载\n- 代码\n- 将项目进行拆分\n- 对 cli 增加配置\n- 去掉 console、warn\n-\n4. 监控方面，增加错误上报"),Object(l.b)("h2",{id:"印象最深的技术问题，最后怎么解决的，有什么心得？"},"印象最深的技术问题，最后怎么解决的，有什么心得？"),Object(l.b)("h2",{id:"做的最久的一个项目，项目有什么问题，你能做什么？"},"做的最久的一个项目，项目有什么问题，你能做什么？"),Object(l.b)("h2",{id:"能给我们团队和产品带来什么？"},"能给我们团队和产品带来什么？"),Object(l.b)("p",null,"之前经常和其它岗位的公司交流需求，开发产品，所以可以很好融入团队，并且担当起应该负起的责任，同时作为前端会以自己最大能力来优化产品，比如节省流量、提高用户体验等，为公司带来更高的效益。"),Object(l.b)("p",null,"webp\n1. 图片体积小，而且肉眼看不出差别\n2. 支持无损压缩和有损压缩\n3. 支持透明和动画\nPNG8 色彩不够丰富和在浏览器中可能会出现毛边的问题\njpg全名是JPEG,就是有损压缩\npng 支持无损压缩和有损压缩\n兼容性：通过 accept 判断"),Object(l.b)("p",null,"Animated PNG 可以解决高清动画图片的问题。PNG 动画图片支持 24 位（1600W 色），并且支持 alpha 透明度。另外，GIF 动画每秒最多限制为 10 帧，PNG 动画则无此限制，因此可以得到更为细腻的动画效果。"),Object(l.b)("p",null,"Animated PNG 很早就在 Firefox 中得到支持，并且在 Safari 8+、chrome 59+ 也得到支持。也就是说，除了微软系浏览器外，最新的主流浏览器都支持 Animated PNG 了"))}u.isMDXComponent=!0}}]);